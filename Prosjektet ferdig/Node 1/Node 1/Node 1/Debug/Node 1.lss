
Node 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000212  00800100  00002448  000024dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002448  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000039  00800312  00800312  000026ee  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000026ee  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000298  00000000  00000000  0000274a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002f41  00000000  00000000  000029e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001024  00000000  00000000  00005923  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e3c  00000000  00000000  00006947  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000664  00000000  00000000  00007784  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000778  00000000  00000000  00007de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001904  00000000  00000000  00008560  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000240  00000000  00000000  00009e64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 26 01 	jmp	0x24c	; 0x24c <__ctors_end>
       4:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
       8:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
       c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      10:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      14:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      18:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      1c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      20:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      24:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      28:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      2c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      30:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      34:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      38:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      3c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      40:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      44:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      48:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      4c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      50:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      54:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      58:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      5c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      60:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      64:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      68:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>
      6c:	0c 94 43 01 	jmp	0x286	; 0x286 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 00       	nop
      76:	00 5e       	subi	r16, 0xE0	; 224
      78:	00 00       	nop
      7a:	00 0e       	add	r0, r16
      7c:	00 0e       	add	r0, r16
      7e:	00 28       	or	r0, r0
      80:	7c 28       	or	r7, r12
      82:	7c 28       	or	r7, r12
      84:	08 54       	subi	r16, 0x48	; 72
      86:	7c 54       	subi	r23, 0x4C	; 76
      88:	20 26       	eor	r2, r16
      8a:	10 08       	sbc	r1, r0
      8c:	64 00       	.word	0x0064	; ????
      8e:	28 54       	subi	r18, 0x48	; 72
      90:	28 40       	sbci	r18, 0x08	; 8
      92:	00 00       	nop
      94:	00 0e       	add	r0, r16
      96:	00 00       	nop
      98:	00 3c       	cpi	r16, 0xC0	; 192
      9a:	42 00       	.word	0x0042	; ????
      9c:	00 00       	nop
      9e:	42 3c       	cpi	r20, 0xC2	; 194
      a0:	00 00       	nop
      a2:	00 54       	subi	r16, 0x40	; 64
      a4:	38 54       	subi	r19, 0x48	; 72
      a6:	00 10       	cpse	r0, r0
      a8:	10 7c       	andi	r17, 0xC0	; 192
      aa:	10 10       	cpse	r1, r0
      ac:	00 80       	ld	r0, Z
      ae:	60 20       	and	r6, r0
      b0:	00 10       	cpse	r0, r0
      b2:	10 10       	cpse	r1, r0
      b4:	10 00       	.word	0x0010	; ????
      b6:	00 60       	ori	r16, 0x00	; 0
      b8:	60 00       	.word	0x0060	; ????
      ba:	00 20       	and	r0, r0
      bc:	10 08       	sbc	r1, r0
      be:	04 00       	.word	0x0004	; ????
      c0:	00 3c       	cpi	r16, 0xC0	; 192
      c2:	42 3c       	cpi	r20, 0xC2	; 194
      c4:	00 00       	nop
      c6:	44 7e       	andi	r20, 0xE4	; 228
      c8:	40 00       	.word	0x0040	; ????
      ca:	44 62       	ori	r20, 0x24	; 36
      cc:	52 4c       	sbci	r21, 0xC2	; 194
      ce:	00 22       	and	r0, r16
      d0:	4a 4a       	sbci	r20, 0xAA	; 170
      d2:	36 00       	.word	0x0036	; ????
      d4:	18 14       	cp	r1, r8
      d6:	7e 10       	cpse	r7, r14
      d8:	00 2e       	mov	r0, r16
      da:	4a 4a       	sbci	r20, 0xAA	; 170
      dc:	32 00       	.word	0x0032	; ????
      de:	3c 4a       	sbci	r19, 0xAC	; 172
      e0:	4a 30       	cpi	r20, 0x0A	; 10
      e2:	00 02       	muls	r16, r16
      e4:	62 1a       	sub	r6, r18
      e6:	06 00       	.word	0x0006	; ????
      e8:	34 4a       	sbci	r19, 0xA4	; 164
      ea:	4a 34       	cpi	r20, 0x4A	; 74
      ec:	00 0c       	add	r0, r0
      ee:	52 52       	subi	r21, 0x22	; 34
      f0:	3c 00       	.word	0x003c	; ????
      f2:	00 6c       	ori	r16, 0xC0	; 192
      f4:	6c 00       	.word	0x006c	; ????
      f6:	00 80       	ld	r0, Z
      f8:	6c 2c       	mov	r6, r12
      fa:	00 00       	nop
      fc:	00 10       	cpse	r0, r0
      fe:	28 44       	sbci	r18, 0x48	; 72
     100:	00 28       	or	r0, r0
     102:	28 28       	or	r2, r8
     104:	28 00       	.word	0x0028	; ????
     106:	00 44       	sbci	r16, 0x40	; 64
     108:	28 10       	cpse	r2, r8
     10a:	00 00       	nop
     10c:	04 52       	subi	r16, 0x24	; 36
     10e:	0c 00       	.word	0x000c	; ????
     110:	3c 42       	sbci	r19, 0x2C	; 44
     112:	5a 1c       	adc	r5, r10
     114:	00 7c       	andi	r16, 0xC0	; 192
     116:	12 12       	cpse	r1, r18
     118:	7c 00       	.word	0x007c	; ????
     11a:	7e 4a       	sbci	r23, 0xAE	; 174
     11c:	4a 34       	cpi	r20, 0x4A	; 74
     11e:	00 3c       	cpi	r16, 0xC0	; 192
     120:	42 42       	sbci	r20, 0x22	; 34
     122:	24 00       	.word	0x0024	; ????
     124:	7e 42       	sbci	r23, 0x2E	; 46
     126:	42 3c       	cpi	r20, 0xC2	; 194
     128:	00 7e       	andi	r16, 0xE0	; 224
     12a:	4a 4a       	sbci	r20, 0xAA	; 170
     12c:	42 00       	.word	0x0042	; ????
     12e:	7e 0a       	sbc	r7, r30
     130:	0a 02       	muls	r16, r26
     132:	00 3c       	cpi	r16, 0xC0	; 192
     134:	42 52       	subi	r20, 0x22	; 34
     136:	74 00       	.word	0x0074	; ????
     138:	7e 08       	sbc	r7, r14
     13a:	08 7e       	andi	r16, 0xE8	; 232
     13c:	00 00       	nop
     13e:	42 7e       	andi	r20, 0xE2	; 226
     140:	42 00       	.word	0x0042	; ????
     142:	20 40       	sbci	r18, 0x00	; 0
     144:	40 3e       	cpi	r20, 0xE0	; 224
     146:	00 7e       	andi	r16, 0xE0	; 224
     148:	18 24       	eor	r1, r8
     14a:	42 00       	.word	0x0042	; ????
     14c:	7e 40       	sbci	r23, 0x0E	; 14
     14e:	40 40       	sbci	r20, 0x00	; 0
     150:	00 7e       	andi	r16, 0xE0	; 224
     152:	0c 0c       	add	r0, r12
     154:	7e 00       	.word	0x007e	; ????
     156:	7e 0c       	add	r7, r14
     158:	30 7e       	andi	r19, 0xE0	; 224
     15a:	00 3c       	cpi	r16, 0xC0	; 192
     15c:	42 42       	sbci	r20, 0x22	; 34
     15e:	3c 00       	.word	0x003c	; ????
     160:	7e 12       	cpse	r7, r30
     162:	12 0c       	add	r1, r2
     164:	00 3c       	cpi	r16, 0xC0	; 192
     166:	62 42       	sbci	r22, 0x22	; 34
     168:	bc 00       	.word	0x00bc	; ????
     16a:	7e 12       	cpse	r7, r30
     16c:	32 4c       	sbci	r19, 0xC2	; 194
     16e:	00 24       	eor	r0, r0
     170:	4a 52       	subi	r20, 0x2A	; 42
     172:	24 00       	.word	0x0024	; ????
     174:	00 02       	muls	r16, r16
     176:	7e 02       	muls	r23, r30
     178:	00 3e       	cpi	r16, 0xE0	; 224
     17a:	40 40       	sbci	r20, 0x00	; 0
     17c:	3e 00       	.word	0x003e	; ????
     17e:	1e 60       	ori	r17, 0x0E	; 14
     180:	60 1e       	adc	r6, r16
     182:	00 7e       	andi	r16, 0xE0	; 224
     184:	30 30       	cpi	r19, 0x00	; 0
     186:	7e 00       	.word	0x007e	; ????
     188:	66 18       	sub	r6, r6
     18a:	18 66       	ori	r17, 0x68	; 104
     18c:	00 00       	nop
     18e:	0e 70       	andi	r16, 0x0E	; 14
     190:	0e 00       	.word	0x000e	; ????
     192:	62 52       	subi	r22, 0x22	; 34
     194:	4a 46       	sbci	r20, 0x6A	; 106
     196:	00 00       	nop
     198:	7e 42       	sbci	r23, 0x2E	; 46
     19a:	42 00       	.word	0x0042	; ????
     19c:	04 08       	sbc	r0, r4
     19e:	10 20       	and	r1, r0
     1a0:	00 00       	nop
     1a2:	42 42       	sbci	r20, 0x22	; 34
     1a4:	7e 00       	.word	0x007e	; ????
     1a6:	00 04       	cpc	r0, r0
     1a8:	02 04       	cpc	r0, r2
     1aa:	00 40       	sbci	r16, 0x00	; 0
     1ac:	40 40       	sbci	r20, 0x00	; 0
     1ae:	40 00       	.word	0x0040	; ????
     1b0:	00 02       	muls	r16, r16
     1b2:	04 00       	.word	0x0004	; ????
     1b4:	00 30       	cpi	r16, 0x00	; 0
     1b6:	48 28       	or	r4, r8
     1b8:	78 00       	.word	0x0078	; ????
     1ba:	7e 48       	sbci	r23, 0x8E	; 142
     1bc:	48 30       	cpi	r20, 0x08	; 8
     1be:	00 30       	cpi	r16, 0x00	; 0
     1c0:	48 48       	sbci	r20, 0x88	; 136
     1c2:	00 00       	nop
     1c4:	30 48       	sbci	r19, 0x80	; 128
     1c6:	48 7e       	andi	r20, 0xE8	; 232
     1c8:	00 30       	cpi	r16, 0x00	; 0
     1ca:	68 58       	subi	r22, 0x88	; 136
     1cc:	10 00       	.word	0x0010	; ????
     1ce:	10 7c       	andi	r17, 0xC0	; 192
     1d0:	12 04       	cpc	r1, r2
     1d2:	00 50       	subi	r16, 0x00	; 0
     1d4:	a8 a8       	ldd	r10, Y+48	; 0x30
     1d6:	98 00       	.word	0x0098	; ????
     1d8:	7e 08       	sbc	r7, r14
     1da:	08 70       	andi	r16, 0x08	; 8
     1dc:	00 00       	nop
     1de:	48 7a       	andi	r20, 0xA8	; 168
     1e0:	40 00       	.word	0x0040	; ????
     1e2:	00 40       	sbci	r16, 0x00	; 0
     1e4:	80 7a       	andi	r24, 0xA0	; 160
     1e6:	00 7e       	andi	r16, 0xE0	; 224
     1e8:	10 28       	or	r1, r0
     1ea:	40 00       	.word	0x0040	; ????
     1ec:	00 42       	sbci	r16, 0x20	; 32
     1ee:	7e 40       	sbci	r23, 0x0E	; 14
     1f0:	00 78       	andi	r16, 0x80	; 128
     1f2:	10 18       	sub	r1, r0
     1f4:	70 00       	.word	0x0070	; ????
     1f6:	78 08       	sbc	r7, r8
     1f8:	08 70       	andi	r16, 0x08	; 8
     1fa:	00 30       	cpi	r16, 0x00	; 0
     1fc:	48 48       	sbci	r20, 0x88	; 136
     1fe:	30 00       	.word	0x0030	; ????
     200:	f8 48       	sbci	r31, 0x88	; 136
     202:	48 30       	cpi	r20, 0x08	; 8
     204:	00 30       	cpi	r16, 0x00	; 0
     206:	48 48       	sbci	r20, 0x88	; 136
     208:	f8 00       	.word	0x00f8	; ????
     20a:	78 08       	sbc	r7, r8
     20c:	08 10       	cpse	r0, r8
     20e:	00 50       	subi	r16, 0x00	; 0
     210:	58 68       	ori	r21, 0x88	; 136
     212:	28 00       	.word	0x0028	; ????
     214:	08 3e       	cpi	r16, 0xE8	; 232
     216:	48 40       	sbci	r20, 0x08	; 8
     218:	00 38       	cpi	r16, 0x80	; 128
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	78 00       	.word	0x0078	; ????
     21e:	00 38       	cpi	r16, 0x80	; 128
     220:	40 38       	cpi	r20, 0x80	; 128
     222:	00 78       	andi	r16, 0x80	; 128
     224:	60 60       	ori	r22, 0x00	; 0
     226:	78 00       	.word	0x0078	; ????
     228:	48 30       	cpi	r20, 0x08	; 8
     22a:	30 48       	sbci	r19, 0x80	; 128
     22c:	00 18       	sub	r0, r0
     22e:	a0 40       	sbci	r26, 0x00	; 0
     230:	38 00       	.word	0x0038	; ????
     232:	48 68       	ori	r20, 0x88	; 136
     234:	58 48       	sbci	r21, 0x88	; 136
     236:	00 00       	nop
     238:	08 3c       	cpi	r16, 0xC8	; 200
     23a:	42 00       	.word	0x0042	; ????
     23c:	00 00       	nop
     23e:	7e 00       	.word	0x007e	; ????
     240:	00 00       	nop
     242:	42 3c       	cpi	r20, 0xC2	; 194
     244:	08 00       	.word	0x0008	; ????
     246:	04 02       	muls	r16, r20
     248:	04 02       	muls	r16, r20
	...

0000024c <__ctors_end>:
     24c:	11 24       	eor	r1, r1
     24e:	1f be       	out	0x3f, r1	; 63
     250:	cf ef       	ldi	r28, 0xFF	; 255
     252:	d4 e0       	ldi	r29, 0x04	; 4
     254:	de bf       	out	0x3e, r29	; 62
     256:	cd bf       	out	0x3d, r28	; 61

00000258 <__do_copy_data>:
     258:	13 e0       	ldi	r17, 0x03	; 3
     25a:	a0 e0       	ldi	r26, 0x00	; 0
     25c:	b1 e0       	ldi	r27, 0x01	; 1
     25e:	e8 e4       	ldi	r30, 0x48	; 72
     260:	f4 e2       	ldi	r31, 0x24	; 36
     262:	02 c0       	rjmp	.+4      	; 0x268 <__do_copy_data+0x10>
     264:	05 90       	lpm	r0, Z+
     266:	0d 92       	st	X+, r0
     268:	a2 31       	cpi	r26, 0x12	; 18
     26a:	b1 07       	cpc	r27, r17
     26c:	d9 f7       	brne	.-10     	; 0x264 <__do_copy_data+0xc>

0000026e <__do_clear_bss>:
     26e:	23 e0       	ldi	r18, 0x03	; 3
     270:	a2 e1       	ldi	r26, 0x12	; 18
     272:	b3 e0       	ldi	r27, 0x03	; 3
     274:	01 c0       	rjmp	.+2      	; 0x278 <.do_clear_bss_start>

00000276 <.do_clear_bss_loop>:
     276:	1d 92       	st	X+, r1

00000278 <.do_clear_bss_start>:
     278:	ab 34       	cpi	r26, 0x4B	; 75
     27a:	b2 07       	cpc	r27, r18
     27c:	e1 f7       	brne	.-8      	; 0x276 <.do_clear_bss_loop>
     27e:	0e 94 da 04 	call	0x9b4	; 0x9b4 <main>
     282:	0c 94 22 12 	jmp	0x2444	; 0x2444 <_exit>

00000286 <__bad_interrupt>:
     286:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000028a <adc_init>:

volatile unsigned char *ext_adc = (char *) 0x1400;

void adc_init(){
    //Setter PB1 OG PB2 som INPUT
    DDRB |= (0<<PB1) | (0<<PB2);
     28a:	87 b3       	in	r24, 0x17	; 23
     28c:	87 bb       	out	0x17, r24	; 23
    PORTB = 0xff;
     28e:	8f ef       	ldi	r24, 0xFF	; 255
     290:	88 bb       	out	0x18, r24	; 24
     292:	08 95       	ret

00000294 <adc_read>:
}

unsigned char adc_read(unsigned char channel){
    
    *ext_adc = (channel + 3);
     294:	e0 91 06 01 	lds	r30, 0x0106
     298:	f0 91 07 01 	lds	r31, 0x0107
     29c:	8d 5f       	subi	r24, 0xFD	; 253
     29e:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2a0:	83 ed       	ldi	r24, 0xD3	; 211
     2a2:	90 e3       	ldi	r25, 0x30	; 48
     2a4:	01 97       	sbiw	r24, 0x01	; 1
     2a6:	f1 f7       	brne	.-4      	; 0x2a4 <adc_read+0x10>
     2a8:	00 c0       	rjmp	.+0      	; 0x2aa <adc_read+0x16>
     2aa:	00 00       	nop
    _delay_ms(50);
    return *ext_adc;
     2ac:	e0 91 06 01 	lds	r30, 0x0106
     2b0:	f0 91 07 01 	lds	r31, 0x0107
     2b4:	80 81       	ld	r24, Z
}
     2b6:	08 95       	ret

000002b8 <can_Init_Normal>:
#include "CAN.h"


void can_Init_Normal(){
    
    mcp2515_init();
     2b8:	0e 94 95 05 	call	0xb2a	; 0xb2a <mcp2515_init>
    
    //Normal MODE ENABLED
    mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	60 ee       	ldi	r22, 0xE0	; 224
     2c0:	8f e0       	ldi	r24, 0x0F	; 15
     2c2:	0e 94 77 05 	call	0xaee	; 0xaee <mcp2515_bit_modify>
     2c6:	08 95       	ret

000002c8 <can_message_send>:
    //LOOPBACK MODE ENABLED
    mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_LOOPBACK);
    
}

void can_message_send(can_message_t *message) {
     2c8:	1f 93       	push	r17
     2ca:	cf 93       	push	r28
     2cc:	df 93       	push	r29
     2ce:	ec 01       	movw	r28, r24
    
    unsigned char buffer = 0b00110110;
    
    mcp2515_bit_modify(0b00110101, 0b00001111, message->length); // TXB0DLC, setter lengde
     2d0:	4a 81       	ldd	r20, Y+2	; 0x02
     2d2:	6f e0       	ldi	r22, 0x0F	; 15
     2d4:	85 e3       	ldi	r24, 0x35	; 53
     2d6:	0e 94 77 05 	call	0xaee	; 0xaee <mcp2515_bit_modify>
    
    mcp2515_write(0b00110010, ((message->id & 0x7) << 5));
     2da:	68 81       	ld	r22, Y
     2dc:	62 95       	swap	r22
     2de:	66 0f       	add	r22, r22
     2e0:	60 7e       	andi	r22, 0xE0	; 224
     2e2:	82 e3       	ldi	r24, 0x32	; 50
     2e4:	0e 94 65 05 	call	0xaca	; 0xaca <mcp2515_write>
    mcp2515_write(0b00110001, (message->id >> 3) & 0xFF);
     2e8:	68 81       	ld	r22, Y
     2ea:	79 81       	ldd	r23, Y+1	; 0x01
     2ec:	76 95       	lsr	r23
     2ee:	67 95       	ror	r22
     2f0:	76 95       	lsr	r23
     2f2:	67 95       	ror	r22
     2f4:	76 95       	lsr	r23
     2f6:	67 95       	ror	r22
     2f8:	81 e3       	ldi	r24, 0x31	; 49
     2fa:	0e 94 65 05 	call	0xaca	; 0xaca <mcp2515_write>
    
    for (uint8_t i = 0; i < message->length; i++) {
     2fe:	8a 81       	ldd	r24, Y+2	; 0x02
     300:	88 23       	and	r24, r24
     302:	69 f0       	breq	.+26     	; 0x31e <can_message_send+0x56>
     304:	10 e0       	ldi	r17, 0x00	; 0
        mcp2515_write(buffer+i, message->data[i]);
     306:	fe 01       	movw	r30, r28
     308:	e1 0f       	add	r30, r17
     30a:	f1 1d       	adc	r31, r1
     30c:	63 81       	ldd	r22, Z+3	; 0x03
     30e:	86 e3       	ldi	r24, 0x36	; 54
     310:	81 0f       	add	r24, r17
     312:	0e 94 65 05 	call	0xaca	; 0xaca <mcp2515_write>
    mcp2515_bit_modify(0b00110101, 0b00001111, message->length); // TXB0DLC, setter lengde
    
    mcp2515_write(0b00110010, ((message->id & 0x7) << 5));
    mcp2515_write(0b00110001, (message->id >> 3) & 0xFF);
    
    for (uint8_t i = 0; i < message->length; i++) {
     316:	1f 5f       	subi	r17, 0xFF	; 255
     318:	8a 81       	ldd	r24, Y+2	; 0x02
     31a:	18 17       	cp	r17, r24
     31c:	a0 f3       	brcs	.-24     	; 0x306 <can_message_send+0x3e>
        mcp2515_write(buffer+i, message->data[i]);
    }
    mcp2515_bit_modify(MCP_TXB0CTRL,0b11111111,0b00001000); // Setter Message transmit request bit
     31e:	48 e0       	ldi	r20, 0x08	; 8
     320:	6f ef       	ldi	r22, 0xFF	; 255
     322:	80 e3       	ldi	r24, 0x30	; 48
     324:	0e 94 77 05 	call	0xaee	; 0xaee <mcp2515_bit_modify>
    
    PORTB &= ~(1 << 4);
     328:	c4 98       	cbi	0x18, 4	; 24
    
    SPI_Send(MCP_RTS_TX0);
     32a:	81 e8       	ldi	r24, 0x81	; 129
     32c:	0e 94 ef 0a 	call	0x15de	; 0x15de <SPI_Send>
    
    PORTB |= (1 << 4);
     330:	c4 9a       	sbi	0x18, 4	; 24
}
     332:	df 91       	pop	r29
     334:	cf 91       	pop	r28
     336:	1f 91       	pop	r17
     338:	08 95       	ret

0000033a <can_data_receive>:
    
    return 1;
}
*/

void can_data_receive(can_message_t * message) {
     33a:	df 92       	push	r13
     33c:	ef 92       	push	r14
     33e:	ff 92       	push	r15
     340:	0f 93       	push	r16
     342:	1f 93       	push	r17
     344:	cf 93       	push	r28
     346:	df 93       	push	r29
     348:	00 d0       	rcall	.+0      	; 0x34a <can_data_receive+0x10>
     34a:	00 d0       	rcall	.+0      	; 0x34c <can_data_receive+0x12>
     34c:	cd b7       	in	r28, 0x3d	; 61
     34e:	de b7       	in	r29, 0x3e	; 62
     350:	8c 01       	movw	r16, r24
    
    message->length = 0;
     352:	fc 01       	movw	r30, r24
     354:	12 82       	std	Z+2, r1	; 0x02
    
    unsigned char readByte = 0;
    unsigned char rxb0dlc = 0;
    unsigned char rxb1dlc = 0;
    readByte = mcp2515_read(MCP_CANINTF);
     356:	8c e2       	ldi	r24, 0x2C	; 44
     358:	0e 94 57 05 	call	0xaae	; 0xaae <mcp2515_read>
     35c:	f8 2e       	mov	r15, r24
    rxb0dlc = mcp2515_read(0b01100101);
     35e:	85 e6       	ldi	r24, 0x65	; 101
     360:	0e 94 57 05 	call	0xaae	; 0xaae <mcp2515_read>
     364:	e8 2e       	mov	r14, r24
    rxb1dlc = mcp2515_read(0b01110101);
     366:	85 e7       	ldi	r24, 0x75	; 117
     368:	0e 94 57 05 	call	0xaae	; 0xaae <mcp2515_read>
     36c:	d8 2e       	mov	r13, r24
    
    unsigned char buffer = 0;
    if(1 == (readByte&0b00000001)) { //reading from RXB0
     36e:	f0 fe       	sbrs	r15, 0
     370:	35 c0       	rjmp	.+106    	; 0x3dc <can_data_receive+0xa2>
        unsigned int least = ((mcp2515_read(MCP_RXB0SIDL)  & 0b11100000) >> 5);
     372:	82 e6       	ldi	r24, 0x62	; 98
     374:	0e 94 57 05 	call	0xaae	; 0xaae <mcp2515_read>
     378:	f8 2e       	mov	r15, r24
        unsigned int most  = (mcp2515_read(MCP_RXB0SIDH) << 3);
     37a:	81 e6       	ldi	r24, 0x61	; 97
     37c:	0e 94 57 05 	call	0xaae	; 0xaae <mcp2515_read>
    rxb0dlc = mcp2515_read(0b01100101);
    rxb1dlc = mcp2515_read(0b01110101);
    
    unsigned char buffer = 0;
    if(1 == (readByte&0b00000001)) { //reading from RXB0
        unsigned int least = ((mcp2515_read(MCP_RXB0SIDL)  & 0b11100000) >> 5);
     380:	f6 94       	lsr	r15
     382:	f6 94       	lsr	r15
     384:	f6 94       	lsr	r15
     386:	f6 94       	lsr	r15
     388:	f6 94       	lsr	r15
     38a:	2f 2d       	mov	r18, r15
     38c:	30 e0       	ldi	r19, 0x00	; 0
        unsigned int most  = (mcp2515_read(MCP_RXB0SIDH) << 3);
        volatile unsigned int sum = least + most;
     38e:	f8 e0       	ldi	r31, 0x08	; 8
     390:	8f 9f       	mul	r24, r31
     392:	20 0d       	add	r18, r0
     394:	31 1d       	adc	r19, r1
     396:	11 24       	eor	r1, r1
     398:	3c 83       	std	Y+4, r19	; 0x04
     39a:	2b 83       	std	Y+3, r18	; 0x03
        
        message->id = sum;
     39c:	2b 81       	ldd	r18, Y+3	; 0x03
     39e:	3c 81       	ldd	r19, Y+4	; 0x04
     3a0:	f8 01       	movw	r30, r16
     3a2:	31 83       	std	Z+1, r19	; 0x01
     3a4:	20 83       	st	Z, r18
        sum = message->id;
     3a6:	3c 83       	std	Y+4, r19	; 0x04
     3a8:	2b 83       	std	Y+3, r18	; 0x03
        
        message->length =rxb0dlc&0x0F; // LESER LENGDEN
     3aa:	8e 2d       	mov	r24, r14
     3ac:	8f 70       	andi	r24, 0x0F	; 15
     3ae:	82 83       	std	Z+2, r24	; 0x02
        
        for (uint8_t i = 0; i < message->length; i++) {
     3b0:	88 23       	and	r24, r24
     3b2:	71 f0       	breq	.+28     	; 0x3d0 <can_data_receive+0x96>
     3b4:	f1 2c       	mov	r15, r1
            message->data[i] = mcp2515_read(0b01100110+i);// LESER DATA
     3b6:	86 e6       	ldi	r24, 0x66	; 102
     3b8:	8f 0d       	add	r24, r15
     3ba:	0e 94 57 05 	call	0xaae	; 0xaae <mcp2515_read>
     3be:	f8 01       	movw	r30, r16
     3c0:	ef 0d       	add	r30, r15
     3c2:	f1 1d       	adc	r31, r1
     3c4:	83 83       	std	Z+3, r24	; 0x03
        message->id = sum;
        sum = message->id;
        
        message->length =rxb0dlc&0x0F; // LESER LENGDEN
        
        for (uint8_t i = 0; i < message->length; i++) {
     3c6:	f3 94       	inc	r15
     3c8:	f8 01       	movw	r30, r16
     3ca:	82 81       	ldd	r24, Z+2	; 0x02
     3cc:	f8 16       	cp	r15, r24
     3ce:	98 f3       	brcs	.-26     	; 0x3b6 <can_data_receive+0x7c>
            message->data[i] = mcp2515_read(0b01100110+i);// LESER DATA
        }
        
        mcp2515_bit_modify(MCP_CANINTF, 0b00000001, 0b00000000); //setter  interrupt flag = 0
     3d0:	40 e0       	ldi	r20, 0x00	; 0
     3d2:	61 e0       	ldi	r22, 0x01	; 1
     3d4:	8c e2       	ldi	r24, 0x2C	; 44
     3d6:	0e 94 77 05 	call	0xaee	; 0xaee <mcp2515_bit_modify>
     3da:	3c c0       	rjmp	.+120    	; 0x454 <can_data_receive+0x11a>
    }
    
    else if(2 == (readByte&0b00000010)) { //reading from RXB1
     3dc:	f1 fe       	sbrs	r15, 1
     3de:	3a c0       	rjmp	.+116    	; 0x454 <can_data_receive+0x11a>
        unsigned int least = ((mcp2515_read(MCP_RXB1SIDL)  & 0b1110000) >> 5);
     3e0:	82 e7       	ldi	r24, 0x72	; 114
     3e2:	0e 94 57 05 	call	0xaae	; 0xaae <mcp2515_read>
     3e6:	f8 2e       	mov	r15, r24
        unsigned int most  = (mcp2515_read(MCP_RXB1SIDH) << 3);
     3e8:	81 e7       	ldi	r24, 0x71	; 113
     3ea:	0e 94 57 05 	call	0xaae	; 0xaae <mcp2515_read>
        
        mcp2515_bit_modify(MCP_CANINTF, 0b00000001, 0b00000000); //setter  interrupt flag = 0
    }
    
    else if(2 == (readByte&0b00000010)) { //reading from RXB1
        unsigned int least = ((mcp2515_read(MCP_RXB1SIDL)  & 0b1110000) >> 5);
     3ee:	2f 2d       	mov	r18, r15
     3f0:	20 77       	andi	r18, 0x70	; 112
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	35 95       	asr	r19
     3f6:	27 95       	ror	r18
     3f8:	35 95       	asr	r19
     3fa:	27 95       	ror	r18
     3fc:	35 95       	asr	r19
     3fe:	27 95       	ror	r18
     400:	35 95       	asr	r19
     402:	27 95       	ror	r18
     404:	35 95       	asr	r19
     406:	27 95       	ror	r18
        unsigned int most  = (mcp2515_read(MCP_RXB1SIDH) << 3);
        volatile unsigned int sum = least + most;
     408:	f8 e0       	ldi	r31, 0x08	; 8
     40a:	8f 9f       	mul	r24, r31
     40c:	20 0d       	add	r18, r0
     40e:	31 1d       	adc	r19, r1
     410:	11 24       	eor	r1, r1
     412:	3a 83       	std	Y+2, r19	; 0x02
     414:	29 83       	std	Y+1, r18	; 0x01
        message->id = sum;
     416:	29 81       	ldd	r18, Y+1	; 0x01
     418:	3a 81       	ldd	r19, Y+2	; 0x02
     41a:	f8 01       	movw	r30, r16
     41c:	31 83       	std	Z+1, r19	; 0x01
     41e:	20 83       	st	Z, r18
        sum = message->id;
     420:	3a 83       	std	Y+2, r19	; 0x02
     422:	29 83       	std	Y+1, r18	; 0x01
        
        message->length =rxb1dlc&0x0F;
     424:	8d 2d       	mov	r24, r13
     426:	8f 70       	andi	r24, 0x0F	; 15
     428:	82 83       	std	Z+2, r24	; 0x02
        
        for (uint8_t i = 0; i < message->length; i++) {
     42a:	88 23       	and	r24, r24
     42c:	71 f0       	breq	.+28     	; 0x44a <can_data_receive+0x110>
     42e:	f1 2c       	mov	r15, r1
            message->data[i] = mcp2515_read(0b01100110+i);// LESER DATA
     430:	86 e6       	ldi	r24, 0x66	; 102
     432:	8f 0d       	add	r24, r15
     434:	0e 94 57 05 	call	0xaae	; 0xaae <mcp2515_read>
     438:	f8 01       	movw	r30, r16
     43a:	ef 0d       	add	r30, r15
     43c:	f1 1d       	adc	r31, r1
     43e:	83 83       	std	Z+3, r24	; 0x03
        message->id = sum;
        sum = message->id;
        
        message->length =rxb1dlc&0x0F;
        
        for (uint8_t i = 0; i < message->length; i++) {
     440:	f3 94       	inc	r15
     442:	f8 01       	movw	r30, r16
     444:	82 81       	ldd	r24, Z+2	; 0x02
     446:	f8 16       	cp	r15, r24
     448:	98 f3       	brcs	.-26     	; 0x430 <can_data_receive+0xf6>
            message->data[i] = mcp2515_read(0b01100110+i);// LESER DATA
        }
        
        mcp2515_bit_modify(MCP_CANINTF, 0b00000010, 0b00000000);//setter  interrupt flag = 0
     44a:	40 e0       	ldi	r20, 0x00	; 0
     44c:	62 e0       	ldi	r22, 0x02	; 2
     44e:	8c e2       	ldi	r24, 0x2C	; 44
     450:	0e 94 77 05 	call	0xaee	; 0xaee <mcp2515_bit_modify>
    }
    
}
     454:	0f 90       	pop	r0
     456:	0f 90       	pop	r0
     458:	0f 90       	pop	r0
     45a:	0f 90       	pop	r0
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	1f 91       	pop	r17
     462:	0f 91       	pop	r16
     464:	ff 90       	pop	r15
     466:	ef 90       	pop	r14
     468:	df 90       	pop	r13
     46a:	08 95       	ret

0000046c <receive_score>:


void receive_score(can_message_t * msg,int * playingGame){
     46c:	0f 93       	push	r16
     46e:	1f 93       	push	r17
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	cd b7       	in	r28, 0x3d	; 61
     476:	de b7       	in	r29, 0x3e	; 62
     478:	a1 97       	sbiw	r28, 0x21	; 33
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	f8 94       	cli
     47e:	de bf       	out	0x3e, r29	; 62
     480:	0f be       	out	0x3f, r0	; 63
     482:	cd bf       	out	0x3d, r28	; 61
     484:	8c 01       	movw	r16, r24
     486:	cb 01       	movw	r24, r22
    
    char scoreString [33];
    
    stopGame(playingGame);
     488:	0e 94 82 06 	call	0xd04	; 0xd04 <stopGame>
    
    oled_clear_screen();
     48c:	0e 94 da 05 	call	0xbb4	; 0xbb4 <oled_clear_screen>
    
    oled_set_line(2);
     490:	82 e0       	ldi	r24, 0x02	; 2
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	0e 94 d1 05 	call	0xba2	; 0xba2 <oled_set_line>
    oled_print_string("Score: ");
     498:	8a e2       	ldi	r24, 0x2A	; 42
     49a:	91 e0       	ldi	r25, 0x01	; 1
     49c:	0e 94 98 06 	call	0xd30	; 0xd30 <oled_print_string>
	oled_set_line(4);
     4a0:	84 e0       	ldi	r24, 0x04	; 4
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	0e 94 d1 05 	call	0xba2	; 0xba2 <oled_set_line>
	
	itoa(msg->data[0], scoreString,10); // KONVERTERER FRA INT TIL STRING
     4a8:	f8 01       	movw	r30, r16
     4aa:	83 81       	ldd	r24, Z+3	; 0x03
     4ac:	4a e0       	ldi	r20, 0x0A	; 10
     4ae:	50 e0       	ldi	r21, 0x00	; 0
     4b0:	be 01       	movw	r22, r28
     4b2:	6f 5f       	subi	r22, 0xFF	; 255
     4b4:	7f 4f       	sbci	r23, 0xFF	; 255
     4b6:	99 27       	eor	r25, r25
     4b8:	87 fd       	sbrc	r24, 7
     4ba:	90 95       	com	r25
     4bc:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <itoa>
	
	oled_print_number(scoreString);
     4c0:	ce 01       	movw	r24, r28
     4c2:	01 96       	adiw	r24, 0x01	; 1
     4c4:	0e 94 81 07 	call	0xf02	; 0xf02 <oled_print_number>
	
	while(!joy_button_left());
     4c8:	0e 94 9d 04 	call	0x93a	; 0x93a <joy_button_left>
     4cc:	89 2b       	or	r24, r25
     4ce:	e1 f3       	breq	.-8      	; 0x4c8 <receive_score+0x5c>
        oled_meny_print();
     4d0:	0e 94 a7 06 	call	0xd4e	; 0xd4e <oled_meny_print>
    
}
     4d4:	a1 96       	adiw	r28, 0x21	; 33
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	f8 94       	cli
     4da:	de bf       	out	0x3e, r29	; 62
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	cd bf       	out	0x3d, r28	; 61
     4e0:	df 91       	pop	r29
     4e2:	cf 91       	pop	r28
     4e4:	1f 91       	pop	r17
     4e6:	0f 91       	pop	r16
     4e8:	08 95       	ret

000004ea <joystick_init>:
float x_volt_ref = 128.0;
float y_volt_ref = 128.0;
float x_volt_ref_joystick2 = 130.0;
float y_volt_ref_joystick2 = 133.0;

void joystick_init(){
     4ea:	4f 92       	push	r4
     4ec:	5f 92       	push	r5
     4ee:	6f 92       	push	r6
     4f0:	7f 92       	push	r7
     4f2:	8f 92       	push	r8
     4f4:	9f 92       	push	r9
     4f6:	af 92       	push	r10
     4f8:	bf 92       	push	r11
     4fa:	cf 92       	push	r12
     4fc:	df 92       	push	r13
     4fe:	ef 92       	push	r14
     500:	ff 92       	push	r15
     502:	0f 93       	push	r16
     504:	1f 93       	push	r17
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	00 d0       	rcall	.+0      	; 0x50c <__stack+0xd>
     50c:	00 d0       	rcall	.+0      	; 0x50e <__stack+0xf>
     50e:	cd b7       	in	r28, 0x3d	; 61
     510:	de b7       	in	r29, 0x3e	; 62
    
    DDRB    |=  (1<<DDB3) ;  // Button output to rele
     512:	bb 9a       	sbi	0x17, 3	; 23
    PORTB   |=  (1 << PB3);	 // Set button high
     514:	c3 9a       	sbi	0x18, 3	; 24
    
    DDRE    |=  (1<<DDE2) ;  // Button output to rele
     516:	32 9a       	sbi	0x06, 2	; 6
    PORTE   |=  (1 << PE2);	 // Set button high
     518:	3a 9a       	sbi	0x07, 2	; 7
     51a:	0a e0       	ldi	r16, 0x0A	; 10
     51c:	10 e0       	ldi	r17, 0x00	; 0
    
    float x_offset = 0.0;
    float y_offset = 0.0;
    
    float x_offset_joystick2 = 0.0;
    float y_offset_joystick2 = 0.0;
     51e:	19 82       	std	Y+1, r1	; 0x01
     520:	1a 82       	std	Y+2, r1	; 0x02
     522:	1b 82       	std	Y+3, r1	; 0x03
     524:	1c 82       	std	Y+4, r1	; 0x04
    PORTE   |=  (1 << PE2);	 // Set button high
    
    float x_offset = 0.0;
    float y_offset = 0.0;
    
    float x_offset_joystick2 = 0.0;
     526:	c1 2c       	mov	r12, r1
     528:	d1 2c       	mov	r13, r1
     52a:	76 01       	movw	r14, r12
    
    DDRE    |=  (1<<DDE2) ;  // Button output to rele
    PORTE   |=  (1 << PE2);	 // Set button high
    
    float x_offset = 0.0;
    float y_offset = 0.0;
     52c:	46 01       	movw	r8, r12
     52e:	57 01       	movw	r10, r14
    PORTB   |=  (1 << PB3);	 // Set button high
    
    DDRE    |=  (1<<DDE2) ;  // Button output to rele
    PORTE   |=  (1 << PE2);	 // Set button high
    
    float x_offset = 0.0;
     530:	26 01       	movw	r4, r12
     532:	37 01       	movw	r6, r14
    
    for (int i = 0; i < 10; i++) {
        
        // Kalibrerer joystick 1 og 2
        
        y_offset += adc_read(1);
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	0e 94 4a 01 	call	0x294	; 0x294 <adc_read>
     53c:	bc 01       	movw	r22, r24
     53e:	88 27       	eor	r24, r24
     540:	77 fd       	sbrc	r23, 7
     542:	80 95       	com	r24
     544:	98 2f       	mov	r25, r24
     546:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <__floatsisf>
     54a:	9b 01       	movw	r18, r22
     54c:	ac 01       	movw	r20, r24
     54e:	c5 01       	movw	r24, r10
     550:	b4 01       	movw	r22, r8
     552:	0e 94 6f 0b 	call	0x16de	; 0x16de <__addsf3>
     556:	4b 01       	movw	r8, r22
     558:	5c 01       	movw	r10, r24
        x_offset += adc_read(2);
     55a:	82 e0       	ldi	r24, 0x02	; 2
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	0e 94 4a 01 	call	0x294	; 0x294 <adc_read>
     562:	bc 01       	movw	r22, r24
     564:	88 27       	eor	r24, r24
     566:	77 fd       	sbrc	r23, 7
     568:	80 95       	com	r24
     56a:	98 2f       	mov	r25, r24
     56c:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <__floatsisf>
     570:	9b 01       	movw	r18, r22
     572:	ac 01       	movw	r20, r24
     574:	c3 01       	movw	r24, r6
     576:	b2 01       	movw	r22, r4
     578:	0e 94 6f 0b 	call	0x16de	; 0x16de <__addsf3>
     57c:	2b 01       	movw	r4, r22
     57e:	3c 01       	movw	r6, r24
     580:	87 e8       	ldi	r24, 0x87	; 135
     582:	93 e1       	ldi	r25, 0x13	; 19
     584:	01 97       	sbiw	r24, 0x01	; 1
     586:	f1 f7       	brne	.-4      	; 0x584 <__stack+0x85>
     588:	00 c0       	rjmp	.+0      	; 0x58a <__stack+0x8b>
     58a:	00 00       	nop
        _delay_ms(20);
        y_offset_joystick2	+= adc_read(3);
     58c:	83 e0       	ldi	r24, 0x03	; 3
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	0e 94 4a 01 	call	0x294	; 0x294 <adc_read>
     594:	bc 01       	movw	r22, r24
     596:	88 27       	eor	r24, r24
     598:	77 fd       	sbrc	r23, 7
     59a:	80 95       	com	r24
     59c:	98 2f       	mov	r25, r24
     59e:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <__floatsisf>
     5a2:	9b 01       	movw	r18, r22
     5a4:	ac 01       	movw	r20, r24
     5a6:	69 81       	ldd	r22, Y+1	; 0x01
     5a8:	7a 81       	ldd	r23, Y+2	; 0x02
     5aa:	8b 81       	ldd	r24, Y+3	; 0x03
     5ac:	9c 81       	ldd	r25, Y+4	; 0x04
     5ae:	0e 94 6f 0b 	call	0x16de	; 0x16de <__addsf3>
     5b2:	69 83       	std	Y+1, r22	; 0x01
     5b4:	7a 83       	std	Y+2, r23	; 0x02
     5b6:	8b 83       	std	Y+3, r24	; 0x03
     5b8:	9c 83       	std	Y+4, r25	; 0x04
        x_offset_joystick2	+= adc_read(4);
     5ba:	84 e0       	ldi	r24, 0x04	; 4
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	0e 94 4a 01 	call	0x294	; 0x294 <adc_read>
     5c2:	bc 01       	movw	r22, r24
     5c4:	88 27       	eor	r24, r24
     5c6:	77 fd       	sbrc	r23, 7
     5c8:	80 95       	com	r24
     5ca:	98 2f       	mov	r25, r24
     5cc:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <__floatsisf>
     5d0:	9b 01       	movw	r18, r22
     5d2:	ac 01       	movw	r20, r24
     5d4:	c7 01       	movw	r24, r14
     5d6:	b6 01       	movw	r22, r12
     5d8:	0e 94 6f 0b 	call	0x16de	; 0x16de <__addsf3>
     5dc:	6b 01       	movw	r12, r22
     5de:	7c 01       	movw	r14, r24
     5e0:	01 50       	subi	r16, 0x01	; 1
     5e2:	11 09       	sbc	r17, r1
    float y_offset = 0.0;
    
    float x_offset_joystick2 = 0.0;
    float y_offset_joystick2 = 0.0;
    
    for (int i = 0; i < 10; i++) {
     5e4:	01 15       	cp	r16, r1
     5e6:	11 05       	cpc	r17, r1
     5e8:	09 f0       	breq	.+2      	; 0x5ec <__stack+0xed>
     5ea:	a4 cf       	rjmp	.-184    	; 0x534 <__stack+0x35>
        _delay_ms(20);
        y_offset_joystick2	+= adc_read(3);
        x_offset_joystick2	+= adc_read(4);
    }
    
    x_volt_ref = (x_offset / 10.0);
     5ec:	20 e0       	ldi	r18, 0x00	; 0
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	40 e2       	ldi	r20, 0x20	; 32
     5f2:	51 e4       	ldi	r21, 0x41	; 65
     5f4:	c3 01       	movw	r24, r6
     5f6:	b2 01       	movw	r22, r4
     5f8:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__divsf3>
     5fc:	60 93 14 01 	sts	0x0114, r22
     600:	70 93 15 01 	sts	0x0115, r23
     604:	80 93 16 01 	sts	0x0116, r24
     608:	90 93 17 01 	sts	0x0117, r25
    y_volt_ref = (y_offset / 10.0);
     60c:	20 e0       	ldi	r18, 0x00	; 0
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	40 e2       	ldi	r20, 0x20	; 32
     612:	51 e4       	ldi	r21, 0x41	; 65
     614:	c5 01       	movw	r24, r10
     616:	b4 01       	movw	r22, r8
     618:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__divsf3>
     61c:	60 93 10 01 	sts	0x0110, r22
     620:	70 93 11 01 	sts	0x0111, r23
     624:	80 93 12 01 	sts	0x0112, r24
     628:	90 93 13 01 	sts	0x0113, r25
    x_volt_ref_joystick2 = (x_offset_joystick2 / 10.0);
     62c:	20 e0       	ldi	r18, 0x00	; 0
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	40 e2       	ldi	r20, 0x20	; 32
     632:	51 e4       	ldi	r21, 0x41	; 65
     634:	c7 01       	movw	r24, r14
     636:	b6 01       	movw	r22, r12
     638:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__divsf3>
     63c:	60 93 0c 01 	sts	0x010C, r22
     640:	70 93 0d 01 	sts	0x010D, r23
     644:	80 93 0e 01 	sts	0x010E, r24
     648:	90 93 0f 01 	sts	0x010F, r25
    y_volt_ref_joystick2 = (y_offset_joystick2 / 10.0);
     64c:	20 e0       	ldi	r18, 0x00	; 0
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	40 e2       	ldi	r20, 0x20	; 32
     652:	51 e4       	ldi	r21, 0x41	; 65
     654:	69 81       	ldd	r22, Y+1	; 0x01
     656:	7a 81       	ldd	r23, Y+2	; 0x02
     658:	8b 81       	ldd	r24, Y+3	; 0x03
     65a:	9c 81       	ldd	r25, Y+4	; 0x04
     65c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__divsf3>
     660:	60 93 08 01 	sts	0x0108, r22
     664:	70 93 09 01 	sts	0x0109, r23
     668:	80 93 0a 01 	sts	0x010A, r24
     66c:	90 93 0b 01 	sts	0x010B, r25
}
     670:	0f 90       	pop	r0
     672:	0f 90       	pop	r0
     674:	0f 90       	pop	r0
     676:	0f 90       	pop	r0
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	1f 91       	pop	r17
     67e:	0f 91       	pop	r16
     680:	ff 90       	pop	r15
     682:	ef 90       	pop	r14
     684:	df 90       	pop	r13
     686:	cf 90       	pop	r12
     688:	bf 90       	pop	r11
     68a:	af 90       	pop	r10
     68c:	9f 90       	pop	r9
     68e:	8f 90       	pop	r8
     690:	7f 90       	pop	r7
     692:	6f 90       	pop	r6
     694:	5f 90       	pop	r5
     696:	4f 90       	pop	r4
     698:	08 95       	ret

0000069a <joystick_dir>:


Position joystick_dir(anal_pos pos) {
     69a:	cf 93       	push	r28
     69c:	df 93       	push	r29
     69e:	cd b7       	in	r28, 0x3d	; 61
     6a0:	de b7       	in	r29, 0x3e	; 62
     6a2:	28 97       	sbiw	r28, 0x08	; 8
     6a4:	0f b6       	in	r0, 0x3f	; 63
     6a6:	f8 94       	cli
     6a8:	de bf       	out	0x3e, r29	; 62
     6aa:	0f be       	out	0x3f, r0	; 63
     6ac:	cd bf       	out	0x3d, r28	; 61
     6ae:	29 83       	std	Y+1, r18	; 0x01
     6b0:	3a 83       	std	Y+2, r19	; 0x02
     6b2:	4b 83       	std	Y+3, r20	; 0x03
     6b4:	5c 83       	std	Y+4, r21	; 0x04
     6b6:	29 81       	ldd	r18, Y+1	; 0x01
     6b8:	3a 81       	ldd	r19, Y+2	; 0x02
     6ba:	8b 81       	ldd	r24, Y+3	; 0x03
     6bc:	9c 81       	ldd	r25, Y+4	; 0x04
    
    if (pos.x_percent > 0+margin) {
     6be:	2b 30       	cpi	r18, 0x0B	; 11
     6c0:	31 05       	cpc	r19, r1
     6c2:	7c f0       	brlt	.+30     	; 0x6e2 <joystick_dir+0x48>
        
        if (pos.x_percent > abs(pos.y_percent))
     6c4:	ac 01       	movw	r20, r24
     6c6:	99 23       	and	r25, r25
     6c8:	24 f4       	brge	.+8      	; 0x6d2 <joystick_dir+0x38>
     6ca:	44 27       	eor	r20, r20
     6cc:	55 27       	eor	r21, r21
     6ce:	48 1b       	sub	r20, r24
     6d0:	59 0b       	sbc	r21, r25
     6d2:	42 17       	cp	r20, r18
     6d4:	53 07       	cpc	r21, r19
     6d6:	3c f1       	brlt	.+78     	; 0x726 <joystick_dir+0x8c>
            return RIGHT;
        else if (pos.y_percent > 0)
     6d8:	18 16       	cp	r1, r24
     6da:	19 06       	cpc	r1, r25
     6dc:	34 f5       	brge	.+76     	; 0x72a <joystick_dir+0x90>
            return UP;
     6de:	82 e0       	ldi	r24, 0x02	; 2
     6e0:	2d c0       	rjmp	.+90     	; 0x73c <joystick_dir+0xa2>
        else return DOWN;
    }
    
    else if (pos.x_percent < 0 - margin) {
     6e2:	26 3f       	cpi	r18, 0xF6	; 246
     6e4:	4f ef       	ldi	r20, 0xFF	; 255
     6e6:	34 07       	cpc	r19, r20
     6e8:	b4 f4       	brge	.+44     	; 0x716 <joystick_dir+0x7c>
        
        if (abs(pos.x_percent) > abs(pos.y_percent))
     6ea:	a9 01       	movw	r20, r18
     6ec:	33 23       	and	r19, r19
     6ee:	24 f4       	brge	.+8      	; 0x6f8 <joystick_dir+0x5e>
     6f0:	44 27       	eor	r20, r20
     6f2:	55 27       	eor	r21, r21
     6f4:	42 1b       	sub	r20, r18
     6f6:	53 0b       	sbc	r21, r19
     6f8:	9c 01       	movw	r18, r24
     6fa:	99 23       	and	r25, r25
     6fc:	24 f4       	brge	.+8      	; 0x706 <joystick_dir+0x6c>
     6fe:	22 27       	eor	r18, r18
     700:	33 27       	eor	r19, r19
     702:	28 1b       	sub	r18, r24
     704:	39 0b       	sbc	r19, r25
     706:	24 17       	cp	r18, r20
     708:	35 07       	cpc	r19, r21
     70a:	8c f0       	brlt	.+34     	; 0x72e <joystick_dir+0x94>
            return LEFT;
        else if (pos.y_percent > 0)
     70c:	18 16       	cp	r1, r24
     70e:	19 06       	cpc	r1, r25
     710:	84 f4       	brge	.+32     	; 0x732 <joystick_dir+0x98>
            return UP;
     712:	82 e0       	ldi	r24, 0x02	; 2
     714:	13 c0       	rjmp	.+38     	; 0x73c <joystick_dir+0xa2>
        else return DOWN;
    }
    
    else if (pos.y_percent > 0 + margin) return UP;
     716:	8b 30       	cpi	r24, 0x0B	; 11
     718:	91 05       	cpc	r25, r1
     71a:	6c f4       	brge	.+26     	; 0x736 <joystick_dir+0x9c>
    else if (pos.y_percent < 0 - margin) return DOWN;
     71c:	86 3f       	cpi	r24, 0xF6	; 246
     71e:	9f 4f       	sbci	r25, 0xFF	; 255
     720:	64 f4       	brge	.+24     	; 0x73a <joystick_dir+0xa0>
     722:	83 e0       	ldi	r24, 0x03	; 3
     724:	0b c0       	rjmp	.+22     	; 0x73c <joystick_dir+0xa2>
Position joystick_dir(anal_pos pos) {
    
    if (pos.x_percent > 0+margin) {
        
        if (pos.x_percent > abs(pos.y_percent))
            return RIGHT;
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	09 c0       	rjmp	.+18     	; 0x73c <joystick_dir+0xa2>
        else if (pos.y_percent > 0)
            return UP;
        else return DOWN;
     72a:	83 e0       	ldi	r24, 0x03	; 3
     72c:	07 c0       	rjmp	.+14     	; 0x73c <joystick_dir+0xa2>
    }
    
    else if (pos.x_percent < 0 - margin) {
        
        if (abs(pos.x_percent) > abs(pos.y_percent))
            return LEFT;
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	05 c0       	rjmp	.+10     	; 0x73c <joystick_dir+0xa2>
        else if (pos.y_percent > 0)
            return UP;
        else return DOWN;
     732:	83 e0       	ldi	r24, 0x03	; 3
     734:	03 c0       	rjmp	.+6      	; 0x73c <joystick_dir+0xa2>
    }
    
    else if (pos.y_percent > 0 + margin) return UP;
     736:	82 e0       	ldi	r24, 0x02	; 2
     738:	01 c0       	rjmp	.+2      	; 0x73c <joystick_dir+0xa2>
    else if (pos.y_percent < 0 - margin) return DOWN;
    
    else return NEUTRAL;
     73a:	84 e0       	ldi	r24, 0x04	; 4
}
     73c:	28 96       	adiw	r28, 0x08	; 8
     73e:	0f b6       	in	r0, 0x3f	; 63
     740:	f8 94       	cli
     742:	de bf       	out	0x3e, r29	; 62
     744:	0f be       	out	0x3f, r0	; 63
     746:	cd bf       	out	0x3d, r28	; 61
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
     74c:	08 95       	ret

0000074e <joystick_anal>:

anal_pos joystick_anal() {
     74e:	2f 92       	push	r2
     750:	3f 92       	push	r3
     752:	4f 92       	push	r4
     754:	5f 92       	push	r5
     756:	6f 92       	push	r6
     758:	7f 92       	push	r7
     75a:	8f 92       	push	r8
     75c:	9f 92       	push	r9
     75e:	af 92       	push	r10
     760:	bf 92       	push	r11
     762:	cf 92       	push	r12
     764:	df 92       	push	r13
     766:	ef 92       	push	r14
     768:	ff 92       	push	r15
     76a:	0f 93       	push	r16
     76c:	1f 93       	push	r17
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
     772:	cd b7       	in	r28, 0x3d	; 61
     774:	de b7       	in	r29, 0x3e	; 62
     776:	60 97       	sbiw	r28, 0x10	; 16
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	f8 94       	cli
     77c:	de bf       	out	0x3e, r29	; 62
     77e:	0f be       	out	0x3f, r0	; 63
     780:	cd bf       	out	0x3d, r28	; 61
    
    anal_pos var;
    
    var.y_percent = 100*(adc_read(1)-y_volt_ref)/y_volt_ref;
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	0e 94 4a 01 	call	0x294	; 0x294 <adc_read>
     78a:	1c 01       	movw	r2, r24
     78c:	80 90 10 01 	lds	r8, 0x0110
     790:	90 90 11 01 	lds	r9, 0x0111
     794:	a0 90 12 01 	lds	r10, 0x0112
     798:	b0 90 13 01 	lds	r11, 0x0113
    var.x_percent = 100*(adc_read(2)-x_volt_ref)/x_volt_ref;
     79c:	82 e0       	ldi	r24, 0x02	; 2
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	0e 94 4a 01 	call	0x294	; 0x294 <adc_read>
     7a4:	8c 01       	movw	r16, r24
     7a6:	40 90 14 01 	lds	r4, 0x0114
     7aa:	50 90 15 01 	lds	r5, 0x0115
     7ae:	60 90 16 01 	lds	r6, 0x0116
     7b2:	70 90 17 01 	lds	r7, 0x0117
    
    
    var.y_percent_joystick2 = 100*(adc_read(3)-y_volt_ref_joystick2)/y_volt_ref_joystick2;
     7b6:	83 e0       	ldi	r24, 0x03	; 3
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	0e 94 4a 01 	call	0x294	; 0x294 <adc_read>
     7be:	9e 87       	std	Y+14, r25	; 0x0e
     7c0:	8d 87       	std	Y+13, r24	; 0x0d
     7c2:	80 91 08 01 	lds	r24, 0x0108
     7c6:	90 91 09 01 	lds	r25, 0x0109
     7ca:	a0 91 0a 01 	lds	r26, 0x010A
     7ce:	b0 91 0b 01 	lds	r27, 0x010B
     7d2:	89 87       	std	Y+9, r24	; 0x09
     7d4:	9a 87       	std	Y+10, r25	; 0x0a
     7d6:	ab 87       	std	Y+11, r26	; 0x0b
     7d8:	bc 87       	std	Y+12, r27	; 0x0c
    var.x_percent_joystick2 = 100*(adc_read(4)-x_volt_ref_joystick2)/x_volt_ref_joystick2;
     7da:	84 e0       	ldi	r24, 0x04	; 4
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	0e 94 4a 01 	call	0x294	; 0x294 <adc_read>
     7e2:	98 8b       	std	Y+16, r25	; 0x10
     7e4:	8f 87       	std	Y+15, r24	; 0x0f
     7e6:	c0 90 0c 01 	lds	r12, 0x010C
     7ea:	d0 90 0d 01 	lds	r13, 0x010D
     7ee:	e0 90 0e 01 	lds	r14, 0x010E
     7f2:	f0 90 0f 01 	lds	r15, 0x010F
     7f6:	af e4       	ldi	r26, 0x4F	; 79
     7f8:	b3 ec       	ldi	r27, 0xC3	; 195
     7fa:	11 97       	sbiw	r26, 0x01	; 1
     7fc:	f1 f7       	brne	.-4      	; 0x7fa <joystick_anal+0xac>
     7fe:	00 c0       	rjmp	.+0      	; 0x800 <joystick_anal+0xb2>
     800:	00 00       	nop
anal_pos joystick_anal() {
    
    anal_pos var;
    
    var.y_percent = 100*(adc_read(1)-y_volt_ref)/y_volt_ref;
    var.x_percent = 100*(adc_read(2)-x_volt_ref)/x_volt_ref;
     802:	b8 01       	movw	r22, r16
     804:	88 27       	eor	r24, r24
     806:	77 fd       	sbrc	r23, 7
     808:	80 95       	com	r24
     80a:	98 2f       	mov	r25, r24
     80c:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <__floatsisf>
     810:	a3 01       	movw	r20, r6
     812:	92 01       	movw	r18, r4
     814:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <__subsf3>
     818:	20 e0       	ldi	r18, 0x00	; 0
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	48 ec       	ldi	r20, 0xC8	; 200
     81e:	52 e4       	ldi	r21, 0x42	; 66
     820:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__mulsf3>
     824:	a3 01       	movw	r20, r6
     826:	92 01       	movw	r18, r4
     828:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__divsf3>
     82c:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__fixsfsi>
     830:	16 2f       	mov	r17, r22
     832:	86 2f       	mov	r24, r22
     834:	97 2f       	mov	r25, r23
     836:	9a 83       	std	Y+2, r25	; 0x02
     838:	89 83       	std	Y+1, r24	; 0x01

anal_pos joystick_anal() {
    
    anal_pos var;
    
    var.y_percent = 100*(adc_read(1)-y_volt_ref)/y_volt_ref;
     83a:	b1 01       	movw	r22, r2
     83c:	88 27       	eor	r24, r24
     83e:	77 fd       	sbrc	r23, 7
     840:	80 95       	com	r24
     842:	98 2f       	mov	r25, r24
     844:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <__floatsisf>
     848:	a5 01       	movw	r20, r10
     84a:	94 01       	movw	r18, r8
     84c:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <__subsf3>
     850:	20 e0       	ldi	r18, 0x00	; 0
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	48 ec       	ldi	r20, 0xC8	; 200
     856:	52 e4       	ldi	r21, 0x42	; 66
     858:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__mulsf3>
     85c:	a5 01       	movw	r20, r10
     85e:	94 01       	movw	r18, r8
     860:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__divsf3>
     864:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__fixsfsi>
     868:	06 2f       	mov	r16, r22
     86a:	86 2f       	mov	r24, r22
     86c:	97 2f       	mov	r25, r23
     86e:	9c 83       	std	Y+4, r25	; 0x04
     870:	8b 83       	std	Y+3, r24	; 0x03
    var.x_percent = 100*(adc_read(2)-x_volt_ref)/x_volt_ref;
    
    
    var.y_percent_joystick2 = 100*(adc_read(3)-y_volt_ref_joystick2)/y_volt_ref_joystick2;
    var.x_percent_joystick2 = 100*(adc_read(4)-x_volt_ref_joystick2)/x_volt_ref_joystick2;
     872:	2f 85       	ldd	r18, Y+15	; 0x0f
     874:	38 89       	ldd	r19, Y+16	; 0x10
     876:	b9 01       	movw	r22, r18
     878:	88 27       	eor	r24, r24
     87a:	77 fd       	sbrc	r23, 7
     87c:	80 95       	com	r24
     87e:	98 2f       	mov	r25, r24
     880:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <__floatsisf>
     884:	a7 01       	movw	r20, r14
     886:	96 01       	movw	r18, r12
     888:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <__subsf3>
     88c:	20 e0       	ldi	r18, 0x00	; 0
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	48 ec       	ldi	r20, 0xC8	; 200
     892:	52 e4       	ldi	r21, 0x42	; 66
     894:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__mulsf3>
     898:	a7 01       	movw	r20, r14
     89a:	96 01       	movw	r18, r12
     89c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__divsf3>
     8a0:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__fixsfsi>
     8a4:	f6 2e       	mov	r15, r22
     8a6:	86 2f       	mov	r24, r22
     8a8:	97 2f       	mov	r25, r23
     8aa:	9e 83       	std	Y+6, r25	; 0x06
     8ac:	8d 83       	std	Y+5, r24	; 0x05
    
    var.y_percent = 100*(adc_read(1)-y_volt_ref)/y_volt_ref;
    var.x_percent = 100*(adc_read(2)-x_volt_ref)/x_volt_ref;
    
    
    var.y_percent_joystick2 = 100*(adc_read(3)-y_volt_ref_joystick2)/y_volt_ref_joystick2;
     8ae:	ad 85       	ldd	r26, Y+13	; 0x0d
     8b0:	be 85       	ldd	r27, Y+14	; 0x0e
     8b2:	bd 01       	movw	r22, r26
     8b4:	88 27       	eor	r24, r24
     8b6:	77 fd       	sbrc	r23, 7
     8b8:	80 95       	com	r24
     8ba:	98 2f       	mov	r25, r24
     8bc:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <__floatsisf>
     8c0:	29 85       	ldd	r18, Y+9	; 0x09
     8c2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8c4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8c6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8c8:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <__subsf3>
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	48 ec       	ldi	r20, 0xC8	; 200
     8d2:	52 e4       	ldi	r21, 0x42	; 66
     8d4:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__mulsf3>
     8d8:	29 85       	ldd	r18, Y+9	; 0x09
     8da:	3a 85       	ldd	r19, Y+10	; 0x0a
     8dc:	4b 85       	ldd	r20, Y+11	; 0x0b
     8de:	5c 85       	ldd	r21, Y+12	; 0x0c
     8e0:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__divsf3>
     8e4:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__fixsfsi>
     8e8:	86 2f       	mov	r24, r22
     8ea:	26 2f       	mov	r18, r22
     8ec:	37 2f       	mov	r19, r23
     8ee:	38 87       	std	Y+8, r19	; 0x08
     8f0:	2f 83       	std	Y+7, r18	; 0x07
    var.x_percent_joystick2 = 100*(adc_read(4)-x_volt_ref_joystick2)/x_volt_ref_joystick2;
    
    _delay_ms(200); //Noedvendig????????
    
    
    return var;
     8f2:	21 2f       	mov	r18, r17
     8f4:	3a 81       	ldd	r19, Y+2	; 0x02
     8f6:	40 2f       	mov	r20, r16
     8f8:	5c 81       	ldd	r21, Y+4	; 0x04
     8fa:	6f 2d       	mov	r22, r15
     8fc:	7e 81       	ldd	r23, Y+6	; 0x06
}
     8fe:	98 85       	ldd	r25, Y+8	; 0x08
     900:	60 96       	adiw	r28, 0x10	; 16
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	f8 94       	cli
     906:	de bf       	out	0x3e, r29	; 62
     908:	0f be       	out	0x3f, r0	; 63
     90a:	cd bf       	out	0x3d, r28	; 61
     90c:	df 91       	pop	r29
     90e:	cf 91       	pop	r28
     910:	1f 91       	pop	r17
     912:	0f 91       	pop	r16
     914:	ff 90       	pop	r15
     916:	ef 90       	pop	r14
     918:	df 90       	pop	r13
     91a:	cf 90       	pop	r12
     91c:	bf 90       	pop	r11
     91e:	af 90       	pop	r10
     920:	9f 90       	pop	r9
     922:	8f 90       	pop	r8
     924:	7f 90       	pop	r7
     926:	6f 90       	pop	r6
     928:	5f 90       	pop	r5
     92a:	4f 90       	pop	r4
     92c:	3f 90       	pop	r3
     92e:	2f 90       	pop	r2
     930:	08 95       	ret

00000932 <joy_button_right>:

int joy_button_right(){
    return PINB & (1<<1) ;
     932:	86 b3       	in	r24, 0x16	; 22
     934:	82 70       	andi	r24, 0x02	; 2
}
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	08 95       	ret

0000093a <joy_button_left>:

int joy_button_left(){
    return PINB & (1<<2);
     93a:	86 b3       	in	r24, 0x16	; 22
     93c:	84 70       	andi	r24, 0x04	; 4
}
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	08 95       	ret

00000942 <joy_button2_right>:

int joy_button2_right(){
    return PINB & (1<<0) ;
     942:	86 b3       	in	r24, 0x16	; 22
}
     944:	81 70       	andi	r24, 0x01	; 1
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	08 95       	ret

0000094a <joystick_send_to_arduino>:
*/
int joystick_button() {
    return PINB & (1<<3);
}

int joystick_send_to_arduino(can_message_t * message) {
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	cd b7       	in	r28, 0x3d	; 61
     954:	de b7       	in	r29, 0x3e	; 62
     956:	28 97       	sbiw	r28, 0x08	; 8
     958:	0f b6       	in	r0, 0x3f	; 63
     95a:	f8 94       	cli
     95c:	de bf       	out	0x3e, r29	; 62
     95e:	0f be       	out	0x3f, r0	; 63
     960:	cd bf       	out	0x3d, r28	; 61
     962:	8c 01       	movw	r16, r24
    
    anal_pos pos = joystick_anal();
     964:	0e 94 a7 03 	call	0x74e	; 0x74e <joystick_anal>
     968:	6d 83       	std	Y+5, r22	; 0x05
     96a:	8f 83       	std	Y+7, r24	; 0x07
    
    if (message->id == onePlayer) {
     96c:	f8 01       	movw	r30, r16
     96e:	80 81       	ld	r24, Z
     970:	91 81       	ldd	r25, Z+1	; 0x01
     972:	82 30       	cpi	r24, 0x02	; 2
     974:	91 05       	cpc	r25, r1
     976:	29 f4       	brne	.+10     	; 0x982 <joystick_send_to_arduino+0x38>
        message->data[0] = pos.x_percent;
     978:	23 83       	std	Z+3, r18	; 0x03
        message->data[1] = pos.y_percent;
     97a:	44 83       	std	Z+4, r20	; 0x04
        message->length = 2;
     97c:	82 e0       	ldi	r24, 0x02	; 2
     97e:	82 83       	std	Z+2, r24	; 0x02
     980:	0b c0       	rjmp	.+22     	; 0x998 <joystick_send_to_arduino+0x4e>
    }
    
    else if (message->id == twoPlayer) {
     982:	03 97       	sbiw	r24, 0x03	; 3
     984:	49 f4       	brne	.+18     	; 0x998 <joystick_send_to_arduino+0x4e>
        message->data[0] = pos.x_percent;
     986:	f8 01       	movw	r30, r16
     988:	23 83       	std	Z+3, r18	; 0x03
        message->data[1] = pos.y_percent;
     98a:	44 83       	std	Z+4, r20	; 0x04
        message->data[2] = pos.x_percent_joystick2;
     98c:	8d 81       	ldd	r24, Y+5	; 0x05
     98e:	85 83       	std	Z+5, r24	; 0x05
        message->data[3] = pos.y_percent_joystick2;
     990:	8f 81       	ldd	r24, Y+7	; 0x07
     992:	86 83       	std	Z+6, r24	; 0x06
        message->length = 4;
     994:	84 e0       	ldi	r24, 0x04	; 4
     996:	82 83       	std	Z+2, r24	; 0x02
    }
    
    can_message_send(message);
     998:	c8 01       	movw	r24, r16
     99a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <can_message_send>
    
}
     99e:	28 96       	adiw	r28, 0x08	; 8
     9a0:	0f b6       	in	r0, 0x3f	; 63
     9a2:	f8 94       	cli
     9a4:	de bf       	out	0x3e, r29	; 62
     9a6:	0f be       	out	0x3f, r0	; 63
     9a8:	cd bf       	out	0x3d, r28	; 61
     9aa:	df 91       	pop	r29
     9ac:	cf 91       	pop	r28
     9ae:	1f 91       	pop	r17
     9b0:	0f 91       	pop	r16
     9b2:	08 95       	ret

000009b4 <main>:
int arr[3] = {};

int main(void)
{
	//Initialiserer:
	USART_Init ( MYUBRR );
     9b4:	8f e1       	ldi	r24, 0x1F	; 31
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <USART_Init>
	sram_Init();
     9bc:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <sram_Init>
	adc_init();
     9c0:	0e 94 45 01 	call	0x28a	; 0x28a <adc_init>
	oled_init();
     9c4:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <oled_init>
	joystick_init();
     9c8:	0e 94 75 02 	call	0x4ea	; 0x4ea <joystick_init>
	oled_meny_init();
     9cc:	0e 94 57 07 	call	0xeae	; 0xeae <oled_meny_init>
	can_Init_Normal();
     9d0:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <can_Init_Normal>
	
	printf("CANSTAT is 0x%x\n\r", mcp2515_read(MCP_CANSTAT));
     9d4:	8e e0       	ldi	r24, 0x0E	; 14
     9d6:	0e 94 57 05 	call	0xaae	; 0xaae <mcp2515_read>
     9da:	1f 92       	push	r1
     9dc:	8f 93       	push	r24
     9de:	82 e3       	ldi	r24, 0x32	; 50
     9e0:	91 e0       	ldi	r25, 0x01	; 1
     9e2:	9f 93       	push	r25
     9e4:	8f 93       	push	r24
     9e6:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <printf>
     9ea:	0f 90       	pop	r0
     9ec:	0f 90       	pop	r0
     9ee:	0f 90       	pop	r0
     9f0:	0f 90       	pop	r0
		PORTE &= ~(1 << PE2);
		
		oled_meny(&playingGame, &id);
		
		if (playingGame) {
			message.id = id;
     9f2:	cb e2       	ldi	r28, 0x2B	; 43
     9f4:	d3 e0       	ldi	r29, 0x03	; 3
     9f6:	0c 2f       	mov	r16, r28
     9f8:	1d 2f       	mov	r17, r29
	
	
	while(1)
	{
		// Sjekker om hoyreknapp er trykket paa
		if (joy_button_right() == 2)
     9fa:	0e 94 99 04 	call	0x932	; 0x932 <joy_button_right>
     9fe:	02 97       	sbiw	r24, 0x02	; 2
     a00:	11 f4       	brne	.+4      	; 0xa06 <main+0x52>
		PORTB &= ~(1 << PB3);
     a02:	c3 98       	cbi	0x18, 3	; 24
     a04:	06 c0       	rjmp	.+12     	; 0xa12 <main+0x5e>
		else if (joy_button2_right() > 0)
     a06:	0e 94 a1 04 	call	0x942	; 0x942 <joy_button2_right>
     a0a:	18 16       	cp	r1, r24
     a0c:	19 06       	cpc	r1, r25
     a0e:	0c f4       	brge	.+2      	; 0xa12 <main+0x5e>
		PORTE &= ~(1 << PE2);
     a10:	3a 98       	cbi	0x07, 2	; 7
		
		oled_meny(&playingGame, &id);
     a12:	68 e1       	ldi	r22, 0x18	; 24
     a14:	73 e0       	ldi	r23, 0x03	; 3
     a16:	8a e1       	ldi	r24, 0x1A	; 26
     a18:	93 e0       	ldi	r25, 0x03	; 3
     a1a:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <oled_meny>
		
		if (playingGame) {
     a1e:	20 91 1a 03 	lds	r18, 0x031A
     a22:	30 91 1b 03 	lds	r19, 0x031B
     a26:	23 2b       	or	r18, r19
     a28:	51 f0       	breq	.+20     	; 0xa3e <main+0x8a>
			message.id = id;
     a2a:	20 91 18 03 	lds	r18, 0x0318
     a2e:	30 91 19 03 	lds	r19, 0x0319
     a32:	39 83       	std	Y+1, r19	; 0x01
     a34:	28 83       	st	Y, r18
			joystick_send_to_arduino(&message);
     a36:	80 2f       	mov	r24, r16
     a38:	91 2f       	mov	r25, r17
     a3a:	0e 94 a5 04 	call	0x94a	; 0x94a <joystick_send_to_arduino>
		}
		
		
		PORTB |= (1 << PB3);
     a3e:	c3 9a       	sbi	0x18, 3	; 24
		PORTE |= (1 << PE2);
     a40:	3a 9a       	sbi	0x07, 2	; 7
		
		if (mcp2515_read(MCP_CANINTF)&0x03 != 0x00) {
     a42:	8c e2       	ldi	r24, 0x2C	; 44
     a44:	0e 94 57 05 	call	0xaae	; 0xaae <mcp2515_read>
     a48:	80 ff       	sbrs	r24, 0
     a4a:	d7 cf       	rjmp	.-82     	; 0x9fa <main+0x46>
			
			can_data_receive(&receive_message);
     a4c:	86 e3       	ldi	r24, 0x36	; 54
     a4e:	93 e0       	ldi	r25, 0x03	; 3
     a50:	0e 94 9d 01 	call	0x33a	; 0x33a <can_data_receive>
			
			if(receive_message.id == scoreId){
     a54:	20 91 36 03 	lds	r18, 0x0336
     a58:	30 91 37 03 	lds	r19, 0x0337
     a5c:	21 30       	cpi	r18, 0x01	; 1
     a5e:	31 05       	cpc	r19, r1
     a60:	39 f4       	brne	.+14     	; 0xa70 <main+0xbc>
				receive_score(&receive_message, &playingGame);
     a62:	6a e1       	ldi	r22, 0x1A	; 26
     a64:	73 e0       	ldi	r23, 0x03	; 3
     a66:	86 e3       	ldi	r24, 0x36	; 54
     a68:	93 e0       	ldi	r25, 0x03	; 3
     a6a:	0e 94 36 02 	call	0x46c	; 0x46c <receive_score>
     a6e:	c5 cf       	rjmp	.-118    	; 0x9fa <main+0x46>
			}
			
			else if (receive_message.id == SCORE_SEND_ID) {
     a70:	26 30       	cpi	r18, 0x06	; 6
     a72:	31 05       	cpc	r19, r1
     a74:	59 f4       	brne	.+22     	; 0xa8c <main+0xd8>
				recieveHighScore(arr,&receive_message);
     a76:	66 e3       	ldi	r22, 0x36	; 54
     a78:	73 e0       	ldi	r23, 0x03	; 3
     a7a:	82 e1       	ldi	r24, 0x12	; 18
     a7c:	93 e0       	ldi	r25, 0x03	; 3
     a7e:	0e 94 aa 0a 	call	0x1554	; 0x1554 <recieveHighScore>
				printHighScore(arr);
     a82:	82 e1       	ldi	r24, 0x12	; 18
     a84:	93 e0       	ldi	r25, 0x03	; 3
     a86:	0e 94 1e 0a 	call	0x143c	; 0x143c <printHighScore>
     a8a:	b7 cf       	rjmp	.-146    	; 0x9fa <main+0x46>
			}
			
			else if(receive_message.id == END_TWO_PLAYER_GAME){
     a8c:	28 30       	cpi	r18, 0x08	; 8
     a8e:	31 05       	cpc	r19, r1
     a90:	39 f4       	brne	.+14     	; 0xaa0 <main+0xec>
				stopGame(&playingGame);
     a92:	8a e1       	ldi	r24, 0x1A	; 26
     a94:	93 e0       	ldi	r25, 0x03	; 3
     a96:	0e 94 82 06 	call	0xd04	; 0xd04 <stopGame>
				endTwoPlayerGame();
     a9a:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <endTwoPlayerGame>
     a9e:	ad cf       	rjmp	.-166    	; 0x9fa <main+0x46>
			}
			else if(receive_message.id == musicStop){
     aa0:	2a 30       	cpi	r18, 0x0A	; 10
     aa2:	31 05       	cpc	r19, r1
     aa4:	09 f0       	breq	.+2      	; 0xaa8 <main+0xf4>
     aa6:	a9 cf       	rjmp	.-174    	; 0x9fa <main+0x46>
				oled_meny_print();
     aa8:	0e 94 a7 06 	call	0xd4e	; 0xd4e <oled_meny_print>
     aac:	a6 cf       	rjmp	.-180    	; 0x9fa <main+0x46>

00000aae <mcp2515_read>:
    }
    
    return 0;
}

char mcp2515_read(uint8_t adress){
     aae:	cf 93       	push	r28
     ab0:	c8 2f       	mov	r28, r24
    PORTB &= ~(1 << 4);
     ab2:	c4 98       	cbi	0x18, 4	; 24
    
    SPI_Send(MCP_READ);
     ab4:	83 e0       	ldi	r24, 0x03	; 3
     ab6:	0e 94 ef 0a 	call	0x15de	; 0x15de <SPI_Send>
    SPI_Send(adress);
     aba:	8c 2f       	mov	r24, r28
     abc:	0e 94 ef 0a 	call	0x15de	; 0x15de <SPI_Send>
    char temp = SPI_read();
     ac0:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <SPI_read>
    PORTB |= (1 << 4);
     ac4:	c4 9a       	sbi	0x18, 4	; 24
    
    return temp;
}
     ac6:	cf 91       	pop	r28
     ac8:	08 95       	ret

00000aca <mcp2515_write>:

void mcp2515_write(uint8_t adress, uint8_t val){
     aca:	cf 93       	push	r28
     acc:	df 93       	push	r29
     ace:	d8 2f       	mov	r29, r24
     ad0:	c6 2f       	mov	r28, r22
    
    PORTB &= ~(1 << 4);
     ad2:	c4 98       	cbi	0x18, 4	; 24
    
    SPI_Send(MCP_WRITE);
     ad4:	82 e0       	ldi	r24, 0x02	; 2
     ad6:	0e 94 ef 0a 	call	0x15de	; 0x15de <SPI_Send>
    SPI_Send(adress);
     ada:	8d 2f       	mov	r24, r29
     adc:	0e 94 ef 0a 	call	0x15de	; 0x15de <SPI_Send>
    SPI_Send(val);
     ae0:	8c 2f       	mov	r24, r28
     ae2:	0e 94 ef 0a 	call	0x15de	; 0x15de <SPI_Send>
    
    PORTB |= (1 << 4);
     ae6:	c4 9a       	sbi	0x18, 4	; 24
}
     ae8:	df 91       	pop	r29
     aea:	cf 91       	pop	r28
     aec:	08 95       	ret

00000aee <mcp2515_bit_modify>:
    SPI_Send(MCP_RTS_ALL | (1<<buffer));
    
    PORTB |= (1 << 4);
}

void mcp2515_bit_modify(uint8_t adress, uint8_t mask, uint8_t data){
     aee:	1f 93       	push	r17
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
     af4:	18 2f       	mov	r17, r24
     af6:	d6 2f       	mov	r29, r22
     af8:	c4 2f       	mov	r28, r20
    
    PORTB &= ~(1 << 4);
     afa:	c4 98       	cbi	0x18, 4	; 24
    
    SPI_Send(MCP_BITMOD);
     afc:	85 e0       	ldi	r24, 0x05	; 5
     afe:	0e 94 ef 0a 	call	0x15de	; 0x15de <SPI_Send>
    SPI_Send(adress);
     b02:	81 2f       	mov	r24, r17
     b04:	0e 94 ef 0a 	call	0x15de	; 0x15de <SPI_Send>
    SPI_Send(mask);
     b08:	8d 2f       	mov	r24, r29
     b0a:	0e 94 ef 0a 	call	0x15de	; 0x15de <SPI_Send>
    SPI_Send(data);
     b0e:	8c 2f       	mov	r24, r28
     b10:	0e 94 ef 0a 	call	0x15de	; 0x15de <SPI_Send>
    
    PORTB |= (1 << 4);
     b14:	c4 9a       	sbi	0x18, 4	; 24
}
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
     b1a:	1f 91       	pop	r17
     b1c:	08 95       	ret

00000b1e <mcp2515_reset>:

void mcp2515_reset(){
    
    PORTB &= ~(1 << 4);
     b1e:	c4 98       	cbi	0x18, 4	; 24
    
    SPI_Send(MCP_RESET);
     b20:	80 ec       	ldi	r24, 0xC0	; 192
     b22:	0e 94 ef 0a 	call	0x15de	; 0x15de <SPI_Send>
    
    PORTB |= (1 << 4);
     b26:	c4 9a       	sbi	0x18, 4	; 24
     b28:	08 95       	ret

00000b2a <mcp2515_init>:
#include <math.h>
#include "SPI.h"

char mcp2515_init(){
    
    SPI_Init_Master();
     b2a:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <SPI_Init_Master>
    mcp2515_reset();
     b2e:	0e 94 8f 05 	call	0xb1e	; 0xb1e <mcp2515_reset>
    
    if((mcp2515_read(MCP_CANSTAT) & MODE_MASK) != MODE_CONFIG) {
     b32:	8e e0       	ldi	r24, 0x0E	; 14
     b34:	0e 94 57 05 	call	0xaae	; 0xaae <mcp2515_read>
     b38:	80 7e       	andi	r24, 0xE0	; 224
     b3a:	80 38       	cpi	r24, 0x80	; 128
     b3c:	31 f0       	breq	.+12     	; 0xb4a <mcp2515_init+0x20>
        printf("MCP2515 is NOT in configuration mode after reset!\n");
     b3e:	84 e4       	ldi	r24, 0x44	; 68
     b40:	91 e0       	ldi	r25, 0x01	; 1
     b42:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <puts>
        
        return 1;
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	08 95       	ret
    }
    
    return 0;
     b4a:	80 e0       	ldi	r24, 0x00	; 0
}
     b4c:	08 95       	ret

00000b4e <write_dString_P>:

void write_d(unsigned char a) {
    *ext_oled_d = a;
}

void write_dString_P(unsigned char a) {
     b4e:	28 2f       	mov	r18, r24
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	20 52       	subi	r18, 0x20	; 32
     b54:	31 09       	sbc	r19, r1
     b56:	c9 01       	movw	r24, r18
     b58:	88 0f       	add	r24, r24
     b5a:	99 1f       	adc	r25, r25
     b5c:	88 0f       	add	r24, r24
     b5e:	99 1f       	adc	r25, r25
     b60:	28 0f       	add	r18, r24
     b62:	39 1f       	adc	r19, r25
     b64:	20 59       	subi	r18, 0x90	; 144
     b66:	3f 4f       	sbci	r19, 0xFF	; 255
    for (int i = 0; i < 5; i++) {
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	90 e0       	ldi	r25, 0x00	; 0
        write_d(pgm_read_word(&myfont[a-32][i]));
     b6c:	f9 01       	movw	r30, r18
     b6e:	45 91       	lpm	r20, Z+
     b70:	54 91       	lpm	r21, Z
void write_c(unsigned char a){
    *ext_oled_c = a;
}

void write_d(unsigned char a) {
    *ext_oled_d = a;
     b72:	e0 91 1c 01 	lds	r30, 0x011C
     b76:	f0 91 1d 01 	lds	r31, 0x011D
     b7a:	40 83       	st	Z, r20
}

void write_dString_P(unsigned char a) {
    for (int i = 0; i < 5; i++) {
     b7c:	01 96       	adiw	r24, 0x01	; 1
     b7e:	2f 5f       	subi	r18, 0xFF	; 255
     b80:	3f 4f       	sbci	r19, 0xFF	; 255
     b82:	85 30       	cpi	r24, 0x05	; 5
     b84:	91 05       	cpc	r25, r1
     b86:	91 f7       	brne	.-28     	; 0xb6c <write_dString_P+0x1e>
        write_d(pgm_read_word(&myfont[a-32][i]));
    }
}
     b88:	08 95       	ret

00000b8a <oled_set_pos_left>:
    
    oled_clear_screen();
}

void write_c(unsigned char a){
    *ext_oled_c = a;
     b8a:	e0 91 1e 01 	lds	r30, 0x011E
     b8e:	f0 91 1f 01 	lds	r31, 0x011F
     b92:	10 82       	st	Z, r1
     b94:	e0 91 1e 01 	lds	r30, 0x011E
     b98:	f0 91 1f 01 	lds	r31, 0x011F
     b9c:	80 e1       	ldi	r24, 0x10	; 16
     b9e:	80 83       	st	Z, r24
     ba0:	08 95       	ret

00000ba2 <oled_set_line>:
    write_c(0x00);
    write_c(0x10);
}

void oled_set_line(uint8_t line) {
    write_c(0xB0 + line);
     ba2:	80 55       	subi	r24, 0x50	; 80
    
    oled_clear_screen();
}

void write_c(unsigned char a){
    *ext_oled_c = a;
     ba4:	e0 91 1e 01 	lds	r30, 0x011E
     ba8:	f0 91 1f 01 	lds	r31, 0x011F
     bac:	80 83       	st	Z, r24
    write_c(0x10);
}

void oled_set_line(uint8_t line) {
    write_c(0xB0 + line);
    oled_set_pos_left();
     bae:	0e 94 c5 05 	call	0xb8a	; 0xb8a <oled_set_pos_left>
     bb2:	08 95       	ret

00000bb4 <oled_clear_screen>:
}

void oled_clear_screen(void) {
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
    for(uint8_t row = 0; row < 8; row ++) {
     bb8:	c0 e0       	ldi	r28, 0x00	; 0
        oled_set_line(row);
        for (uint8_t col = 0; col < 128; col++) {
     bba:	d0 e0       	ldi	r29, 0x00	; 0
    oled_set_pos_left();
}

void oled_clear_screen(void) {
    for(uint8_t row = 0; row < 8; row ++) {
        oled_set_line(row);
     bbc:	8c 2f       	mov	r24, r28
     bbe:	0e 94 d1 05 	call	0xba2	; 0xba2 <oled_set_line>
        for (uint8_t col = 0; col < 128; col++) {
     bc2:	9d 2f       	mov	r25, r29
void write_c(unsigned char a){
    *ext_oled_c = a;
}

void write_d(unsigned char a) {
    *ext_oled_d = a;
     bc4:	e0 91 1c 01 	lds	r30, 0x011C
     bc8:	f0 91 1d 01 	lds	r31, 0x011D
     bcc:	10 82       	st	Z, r1
}

void oled_clear_screen(void) {
    for(uint8_t row = 0; row < 8; row ++) {
        oled_set_line(row);
        for (uint8_t col = 0; col < 128; col++) {
     bce:	9f 5f       	subi	r25, 0xFF	; 255
     bd0:	90 38       	cpi	r25, 0x80	; 128
     bd2:	c1 f7       	brne	.-16     	; 0xbc4 <oled_clear_screen+0x10>
    write_c(0xB0 + line);
    oled_set_pos_left();
}

void oled_clear_screen(void) {
    for(uint8_t row = 0; row < 8; row ++) {
     bd4:	cf 5f       	subi	r28, 0xFF	; 255
     bd6:	c8 30       	cpi	r28, 0x08	; 8
     bd8:	89 f7       	brne	.-30     	; 0xbbc <oled_clear_screen+0x8>
        oled_set_line(row);
        for (uint8_t col = 0; col < 128; col++) {
            write_d(0x00);
        }
    }
    oled_set_line(0);
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	0e 94 d1 05 	call	0xba2	; 0xba2 <oled_set_line>
}
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	08 95       	ret

00000be6 <oled_init>:
    
    oled_clear_screen();
}

void write_c(unsigned char a){
    *ext_oled_c = a;
     be6:	e0 91 1e 01 	lds	r30, 0x011E
     bea:	f0 91 1f 01 	lds	r31, 0x011F
     bee:	8e ea       	ldi	r24, 0xAE	; 174
     bf0:	80 83       	st	Z, r24
     bf2:	e0 91 1e 01 	lds	r30, 0x011E
     bf6:	f0 91 1f 01 	lds	r31, 0x011F
     bfa:	81 ea       	ldi	r24, 0xA1	; 161
     bfc:	80 83       	st	Z, r24
     bfe:	e0 91 1e 01 	lds	r30, 0x011E
     c02:	f0 91 1f 01 	lds	r31, 0x011F
     c06:	8a ed       	ldi	r24, 0xDA	; 218
     c08:	80 83       	st	Z, r24
     c0a:	e0 91 1e 01 	lds	r30, 0x011E
     c0e:	f0 91 1f 01 	lds	r31, 0x011F
     c12:	82 e1       	ldi	r24, 0x12	; 18
     c14:	80 83       	st	Z, r24
     c16:	e0 91 1e 01 	lds	r30, 0x011E
     c1a:	f0 91 1f 01 	lds	r31, 0x011F
     c1e:	88 ec       	ldi	r24, 0xC8	; 200
     c20:	80 83       	st	Z, r24
     c22:	e0 91 1e 01 	lds	r30, 0x011E
     c26:	f0 91 1f 01 	lds	r31, 0x011F
     c2a:	88 ea       	ldi	r24, 0xA8	; 168
     c2c:	80 83       	st	Z, r24
     c2e:	e0 91 1e 01 	lds	r30, 0x011E
     c32:	f0 91 1f 01 	lds	r31, 0x011F
     c36:	8f e3       	ldi	r24, 0x3F	; 63
     c38:	80 83       	st	Z, r24
     c3a:	e0 91 1e 01 	lds	r30, 0x011E
     c3e:	f0 91 1f 01 	lds	r31, 0x011F
     c42:	85 ed       	ldi	r24, 0xD5	; 213
     c44:	80 83       	st	Z, r24
     c46:	e0 91 1e 01 	lds	r30, 0x011E
     c4a:	f0 91 1f 01 	lds	r31, 0x011F
     c4e:	80 e8       	ldi	r24, 0x80	; 128
     c50:	80 83       	st	Z, r24
     c52:	e0 91 1e 01 	lds	r30, 0x011E
     c56:	f0 91 1f 01 	lds	r31, 0x011F
     c5a:	81 e8       	ldi	r24, 0x81	; 129
     c5c:	80 83       	st	Z, r24
     c5e:	e0 91 1e 01 	lds	r30, 0x011E
     c62:	f0 91 1f 01 	lds	r31, 0x011F
     c66:	80 e5       	ldi	r24, 0x50	; 80
     c68:	80 83       	st	Z, r24
     c6a:	e0 91 1e 01 	lds	r30, 0x011E
     c6e:	f0 91 1f 01 	lds	r31, 0x011F
     c72:	89 ed       	ldi	r24, 0xD9	; 217
     c74:	80 83       	st	Z, r24
     c76:	e0 91 1e 01 	lds	r30, 0x011E
     c7a:	f0 91 1f 01 	lds	r31, 0x011F
     c7e:	81 e2       	ldi	r24, 0x21	; 33
     c80:	80 83       	st	Z, r24
     c82:	e0 91 1e 01 	lds	r30, 0x011E
     c86:	f0 91 1f 01 	lds	r31, 0x011F
     c8a:	80 e2       	ldi	r24, 0x20	; 32
     c8c:	80 83       	st	Z, r24
     c8e:	e0 91 1e 01 	lds	r30, 0x011E
     c92:	f0 91 1f 01 	lds	r31, 0x011F
     c96:	82 e0       	ldi	r24, 0x02	; 2
     c98:	80 83       	st	Z, r24
     c9a:	e0 91 1e 01 	lds	r30, 0x011E
     c9e:	f0 91 1f 01 	lds	r31, 0x011F
     ca2:	8b ed       	ldi	r24, 0xDB	; 219
     ca4:	80 83       	st	Z, r24
     ca6:	e0 91 1e 01 	lds	r30, 0x011E
     caa:	f0 91 1f 01 	lds	r31, 0x011F
     cae:	80 e3       	ldi	r24, 0x30	; 48
     cb0:	80 83       	st	Z, r24
     cb2:	e0 91 1e 01 	lds	r30, 0x011E
     cb6:	f0 91 1f 01 	lds	r31, 0x011F
     cba:	8d ea       	ldi	r24, 0xAD	; 173
     cbc:	80 83       	st	Z, r24
     cbe:	e0 91 1e 01 	lds	r30, 0x011E
     cc2:	f0 91 1f 01 	lds	r31, 0x011F
     cc6:	10 82       	st	Z, r1
     cc8:	e0 91 1e 01 	lds	r30, 0x011E
     ccc:	f0 91 1f 01 	lds	r31, 0x011F
     cd0:	84 ea       	ldi	r24, 0xA4	; 164
     cd2:	80 83       	st	Z, r24
     cd4:	e0 91 1e 01 	lds	r30, 0x011E
     cd8:	f0 91 1f 01 	lds	r31, 0x011F
     cdc:	86 ea       	ldi	r24, 0xA6	; 166
     cde:	80 83       	st	Z, r24
     ce0:	e0 91 1e 01 	lds	r30, 0x011E
     ce4:	f0 91 1f 01 	lds	r31, 0x011F
     ce8:	8f ea       	ldi	r24, 0xAF	; 175
     cea:	80 83       	st	Z, r24
    write_c(0x00);
    write_c(0xa4); // out follows RAM content
    write_c(0xa6); // set normal display
    write_c(0xaf); // display on
    
    oled_set_line(0);
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	0e 94 d1 05 	call	0xba2	; 0xba2 <oled_set_line>
    
    oled_clear_screen();
}

void write_c(unsigned char a){
    *ext_oled_c = a;
     cf2:	e0 91 1e 01 	lds	r30, 0x011E
     cf6:	f0 91 1f 01 	lds	r31, 0x011F
     cfa:	80 e4       	ldi	r24, 0x40	; 64
     cfc:	80 83       	st	Z, r24
    write_c(0xaf); // display on
    
    oled_set_line(0);
    write_c(0x40); // set start line to 0
    
    oled_clear_screen();
     cfe:	0e 94 da 05 	call	0xbb4	; 0xbb4 <oled_clear_screen>
     d02:	08 95       	ret

00000d04 <stopGame>:
    
}

void stopGame(int * playingGame){
    
    *playingGame = 0;
     d04:	fc 01       	movw	r30, r24
     d06:	11 82       	std	Z+1, r1	; 0x01
     d08:	10 82       	st	Z, r1
    submenu2 = 0;
     d0a:	10 92 1d 03 	sts	0x031D, r1
     d0e:	10 92 1c 03 	sts	0x031C, r1
    submenu1 = 0;
     d12:	10 92 1f 03 	sts	0x031F, r1
     d16:	10 92 1e 03 	sts	0x031E, r1
    current_line = 1;
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	90 93 19 01 	sts	0x0119, r25
     d22:	80 93 18 01 	sts	0x0118, r24
    previous_line = 1;
     d26:	90 93 1b 01 	sts	0x011B, r25
     d2a:	80 93 1a 01 	sts	0x011A, r24
     d2e:	08 95       	ret

00000d30 <oled_print_string>:
    
}

void oled_print_string(char *data) {
     d30:	cf 93       	push	r28
     d32:	df 93       	push	r29
     d34:	ec 01       	movw	r28, r24
    
    while (*data != '\0') {
     d36:	88 81       	ld	r24, Y
     d38:	88 23       	and	r24, r24
     d3a:	31 f0       	breq	.+12     	; 0xd48 <oled_print_string+0x18>
     d3c:	21 96       	adiw	r28, 0x01	; 1
        write_dString_P(*data);
     d3e:	0e 94 a7 05 	call	0xb4e	; 0xb4e <write_dString_P>
    
}

void oled_print_string(char *data) {
    
    while (*data != '\0') {
     d42:	89 91       	ld	r24, Y+
     d44:	81 11       	cpse	r24, r1
     d46:	fb cf       	rjmp	.-10     	; 0xd3e <oled_print_string+0xe>
        write_dString_P(*data);
        data++;
        
    }
}
     d48:	df 91       	pop	r29
     d4a:	cf 91       	pop	r28
     d4c:	08 95       	ret

00000d4e <oled_meny_print>:
        }
    }
    oled_set_line(0);
}

void oled_meny_print(void) {
     d4e:	0f 93       	push	r16
     d50:	1f 93       	push	r17
     d52:	cf 93       	push	r28
     d54:	df 93       	push	r29
    
    oled_clear_screen();
     d56:	0e 94 da 05 	call	0xbb4	; 0xbb4 <oled_clear_screen>
    
    if (submenu1 == 0 && submenu2 == 0){
     d5a:	80 91 1e 03 	lds	r24, 0x031E
     d5e:	90 91 1f 03 	lds	r25, 0x031F
     d62:	89 2b       	or	r24, r25
     d64:	b9 f5       	brne	.+110    	; 0xdd4 <oled_meny_print+0x86>
     d66:	80 91 1c 03 	lds	r24, 0x031C
     d6a:	90 91 1d 03 	lds	r25, 0x031D
     d6e:	89 2b       	or	r24, r25
     d70:	09 f0       	breq	.+2      	; 0xd74 <oled_meny_print+0x26>
     d72:	7e c0       	rjmp	.+252    	; 0xe70 <oled_meny_print+0x122>
     d74:	00 e2       	ldi	r16, 0x20	; 32
     d76:	11 e0       	ldi	r17, 0x01	; 1
     d78:	c0 e0       	ldi	r28, 0x00	; 0
     d7a:	d0 e0       	ldi	r29, 0x00	; 0
        for(int i = 0; i < 3; i++) {
            oled_set_line(2*i);
     d7c:	8c 2f       	mov	r24, r28
     d7e:	88 0f       	add	r24, r24
     d80:	0e 94 d1 05 	call	0xba2	; 0xba2 <oled_set_line>
            
            if (current_line == (i+1))
     d84:	21 96       	adiw	r28, 0x01	; 1
     d86:	80 91 18 01 	lds	r24, 0x0118
     d8a:	90 91 19 01 	lds	r25, 0x0119
     d8e:	c8 17       	cp	r28, r24
     d90:	d9 07       	cpc	r29, r25
     d92:	29 f4       	brne	.+10     	; 0xd9e <oled_meny_print+0x50>
                oled_print_string(">");
     d94:	86 e7       	ldi	r24, 0x76	; 118
     d96:	91 e0       	ldi	r25, 0x01	; 1
     d98:	0e 94 98 06 	call	0xd30	; 0xd30 <oled_print_string>
     d9c:	04 c0       	rjmp	.+8      	; 0xda6 <oled_meny_print+0x58>
            else
                oled_print_string(" ");
     d9e:	84 e3       	ldi	r24, 0x34	; 52
     da0:	92 e0       	ldi	r25, 0x02	; 2
     da2:	0e 94 98 06 	call	0xd30	; 0xd30 <oled_print_string>
            
            if (!(submenu1 || submenu2)) {
     da6:	80 91 1e 03 	lds	r24, 0x031E
     daa:	90 91 1f 03 	lds	r25, 0x031F
     dae:	89 2b       	or	r24, r25
     db0:	59 f4       	brne	.+22     	; 0xdc8 <oled_meny_print+0x7a>
     db2:	80 91 1c 03 	lds	r24, 0x031C
     db6:	90 91 1d 03 	lds	r25, 0x031D
     dba:	89 2b       	or	r24, r25
     dbc:	29 f4       	brne	.+10     	; 0xdc8 <oled_meny_print+0x7a>
                oled_print_string(MenutItemPointers[i]);
     dbe:	f8 01       	movw	r30, r16
     dc0:	80 81       	ld	r24, Z
     dc2:	91 81       	ldd	r25, Z+1	; 0x01
     dc4:	0e 94 98 06 	call	0xd30	; 0xd30 <oled_print_string>
     dc8:	0e 5f       	subi	r16, 0xFE	; 254
     dca:	1f 4f       	sbci	r17, 0xFF	; 255
void oled_meny_print(void) {
    
    oled_clear_screen();
    
    if (submenu1 == 0 && submenu2 == 0){
        for(int i = 0; i < 3; i++) {
     dcc:	c3 30       	cpi	r28, 0x03	; 3
     dce:	d1 05       	cpc	r29, r1
     dd0:	a9 f6       	brne	.-86     	; 0xd7c <oled_meny_print+0x2e>
     dd2:	68 c0       	rjmp	.+208    	; 0xea4 <oled_meny_print+0x156>
                oled_print_string(MenutItemPointers[i]);
            }
        }
    }
    
    else if (submenu1 && !submenu2) {
     dd4:	80 91 1c 03 	lds	r24, 0x031C
     dd8:	90 91 1d 03 	lds	r25, 0x031D
     ddc:	89 2b       	or	r24, r25
     dde:	09 f0       	breq	.+2      	; 0xde2 <oled_meny_print+0x94>
     de0:	47 c0       	rjmp	.+142    	; 0xe70 <oled_meny_print+0x122>
        
        oled_set_line(0);
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	0e 94 d1 05 	call	0xba2	; 0xba2 <oled_set_line>
        oled_print_string("    Game Mode");
     de8:	88 e7       	ldi	r24, 0x78	; 120
     dea:	91 e0       	ldi	r25, 0x01	; 1
     dec:	0e 94 98 06 	call	0xd30	; 0xd30 <oled_print_string>
        oled_set_line(2);
     df0:	82 e0       	ldi	r24, 0x02	; 2
     df2:	0e 94 d1 05 	call	0xba2	; 0xba2 <oled_set_line>
        oled_print_string("  One Player Ping Pong");
     df6:	86 e8       	ldi	r24, 0x86	; 134
     df8:	91 e0       	ldi	r25, 0x01	; 1
     dfa:	0e 94 98 06 	call	0xd30	; 0xd30 <oled_print_string>
        oled_set_line(4);
     dfe:	84 e0       	ldi	r24, 0x04	; 4
     e00:	0e 94 d1 05 	call	0xba2	; 0xba2 <oled_set_line>
        oled_print_string("  2 P Penalty Shootout");
     e04:	8d e9       	ldi	r24, 0x9D	; 157
     e06:	91 e0       	ldi	r25, 0x01	; 1
     e08:	0e 94 98 06 	call	0xd30	; 0xd30 <oled_print_string>
        oled_set_line(6);
     e0c:	86 e0       	ldi	r24, 0x06	; 6
     e0e:	0e 94 d1 05 	call	0xba2	; 0xba2 <oled_set_line>
        oled_print_string("  View High Scores");
     e12:	84 eb       	ldi	r24, 0xB4	; 180
     e14:	91 e0       	ldi	r25, 0x01	; 1
     e16:	0e 94 98 06 	call	0xd30	; 0xd30 <oled_print_string>
        
        for(int i = 1; i < 4; i++) {
     e1a:	c1 e0       	ldi	r28, 0x01	; 1
     e1c:	d0 e0       	ldi	r29, 0x00	; 0
            oled_set_line(2*i);
            printf("Currentline: %d\n",current_line);
     e1e:	07 ec       	ldi	r16, 0xC7	; 199
     e20:	11 e0       	ldi	r17, 0x01	; 1
        oled_print_string("  2 P Penalty Shootout");
        oled_set_line(6);
        oled_print_string("  View High Scores");
        
        for(int i = 1; i < 4; i++) {
            oled_set_line(2*i);
     e22:	8c 2f       	mov	r24, r28
     e24:	88 0f       	add	r24, r24
     e26:	0e 94 d1 05 	call	0xba2	; 0xba2 <oled_set_line>
            printf("Currentline: %d\n",current_line);
     e2a:	80 91 19 01 	lds	r24, 0x0119
     e2e:	8f 93       	push	r24
     e30:	80 91 18 01 	lds	r24, 0x0118
     e34:	8f 93       	push	r24
     e36:	1f 93       	push	r17
     e38:	0f 93       	push	r16
     e3a:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <printf>
            
            if (current_line == (i))
     e3e:	0f 90       	pop	r0
     e40:	0f 90       	pop	r0
     e42:	0f 90       	pop	r0
     e44:	0f 90       	pop	r0
     e46:	80 91 18 01 	lds	r24, 0x0118
     e4a:	90 91 19 01 	lds	r25, 0x0119
     e4e:	8c 17       	cp	r24, r28
     e50:	9d 07       	cpc	r25, r29
     e52:	29 f4       	brne	.+10     	; 0xe5e <oled_meny_print+0x110>
                oled_print_string(">");
     e54:	86 e7       	ldi	r24, 0x76	; 118
     e56:	91 e0       	ldi	r25, 0x01	; 1
     e58:	0e 94 98 06 	call	0xd30	; 0xd30 <oled_print_string>
     e5c:	04 c0       	rjmp	.+8      	; 0xe66 <oled_meny_print+0x118>
            else
                oled_print_string(" ");
     e5e:	84 e3       	ldi	r24, 0x34	; 52
     e60:	92 e0       	ldi	r25, 0x02	; 2
     e62:	0e 94 98 06 	call	0xd30	; 0xd30 <oled_print_string>
        oled_set_line(4);
        oled_print_string("  2 P Penalty Shootout");
        oled_set_line(6);
        oled_print_string("  View High Scores");
        
        for(int i = 1; i < 4; i++) {
     e66:	21 96       	adiw	r28, 0x01	; 1
     e68:	c4 30       	cpi	r28, 0x04	; 4
     e6a:	d1 05       	cpc	r29, r1
     e6c:	d1 f6       	brne	.-76     	; 0xe22 <oled_meny_print+0xd4>
     e6e:	1a c0       	rjmp	.+52     	; 0xea4 <oled_meny_print+0x156>
        
    }
    
    else if (submenu2) {
        
        if (current_line == 1) {
     e70:	80 91 18 01 	lds	r24, 0x0118
     e74:	90 91 19 01 	lds	r25, 0x0119
     e78:	81 30       	cpi	r24, 0x01	; 1
     e7a:	91 05       	cpc	r25, r1
     e7c:	51 f4       	brne	.+20     	; 0xe92 <oled_meny_print+0x144>
            oled_clear_screen();
     e7e:	0e 94 da 05 	call	0xbb4	; 0xbb4 <oled_clear_screen>
            oled_set_line(0);
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	0e 94 d1 05 	call	0xba2	; 0xba2 <oled_set_line>
            oled_print_string("      Playing Game...");
     e88:	88 ed       	ldi	r24, 0xD8	; 216
     e8a:	91 e0       	ldi	r25, 0x01	; 1
     e8c:	0e 94 98 06 	call	0xd30	; 0xd30 <oled_print_string>
     e90:	09 c0       	rjmp	.+18     	; 0xea4 <oled_meny_print+0x156>
        }
        
        else if (current_line == 2) {
     e92:	02 97       	sbiw	r24, 0x02	; 2
     e94:	39 f4       	brne	.+14     	; 0xea4 <oled_meny_print+0x156>
            oled_set_line(0);
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	0e 94 d1 05 	call	0xba2	; 0xba2 <oled_set_line>
            oled_print_string("Playing Game...");
     e9c:	8e ed       	ldi	r24, 0xDE	; 222
     e9e:	91 e0       	ldi	r25, 0x01	; 1
     ea0:	0e 94 98 06 	call	0xd30	; 0xd30 <oled_print_string>
    }
    
    else
        oled_print_string(MenutItemPointers[current_line+2]);
    
}
     ea4:	df 91       	pop	r29
     ea6:	cf 91       	pop	r28
     ea8:	1f 91       	pop	r17
     eaa:	0f 91       	pop	r16
     eac:	08 95       	ret

00000eae <oled_meny_init>:


void oled_meny_init(void) {
    oled_meny_print();
     eae:	0e 94 a7 06 	call	0xd4e	; 0xd4e <oled_meny_print>
    
    oled_set_pos_left();
     eb2:	0e 94 c5 05 	call	0xb8a	; 0xb8a <oled_set_pos_left>
    oled_set_line(0);
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	0e 94 d1 05 	call	0xba2	; 0xba2 <oled_set_line>
    oled_print_string(">");
     ebc:	86 e7       	ldi	r24, 0x76	; 118
     ebe:	91 e0       	ldi	r25, 0x01	; 1
     ec0:	0e 94 98 06 	call	0xd30	; 0xd30 <oled_print_string>
     ec4:	08 95       	ret

00000ec6 <write_dnumber>:
        data++;
        
    }
}

void write_dnumber(unsigned char a) {
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	20 52       	subi	r18, 0x20	; 32
     ecc:	31 09       	sbc	r19, r1
     ece:	c9 01       	movw	r24, r18
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	28 0f       	add	r18, r24
     eda:	39 1f       	adc	r19, r25
     edc:	20 59       	subi	r18, 0x90	; 144
     ede:	3f 4f       	sbci	r19, 0xFF	; 255
    for (int i = 0; i < 5; i++) {
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	90 e0       	ldi	r25, 0x00	; 0
        write_d(pgm_read_word(&myfont[a-32][i]));
     ee4:	f9 01       	movw	r30, r18
     ee6:	45 91       	lpm	r20, Z+
     ee8:	54 91       	lpm	r21, Z
void write_c(unsigned char a){
    *ext_oled_c = a;
}

void write_d(unsigned char a) {
    *ext_oled_d = a;
     eea:	e0 91 1c 01 	lds	r30, 0x011C
     eee:	f0 91 1d 01 	lds	r31, 0x011D
     ef2:	40 83       	st	Z, r20
        
    }
}

void write_dnumber(unsigned char a) {
    for (int i = 0; i < 5; i++) {
     ef4:	01 96       	adiw	r24, 0x01	; 1
     ef6:	2f 5f       	subi	r18, 0xFF	; 255
     ef8:	3f 4f       	sbci	r19, 0xFF	; 255
     efa:	85 30       	cpi	r24, 0x05	; 5
     efc:	91 05       	cpc	r25, r1
     efe:	91 f7       	brne	.-28     	; 0xee4 <write_dnumber+0x1e>
        write_d(pgm_read_word(&myfont[a-32][i]));
    }
}
     f00:	08 95       	ret

00000f02 <oled_print_number>:

void oled_print_number(char *data) {
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	ec 01       	movw	r28, r24
    
    while (*data != '\0') {
     f08:	88 81       	ld	r24, Y
     f0a:	88 23       	and	r24, r24
     f0c:	31 f0       	breq	.+12     	; 0xf1a <oled_print_number+0x18>
     f0e:	21 96       	adiw	r28, 0x01	; 1
        write_dnumber(*data);
     f10:	0e 94 63 07 	call	0xec6	; 0xec6 <write_dnumber>
    }
}

void oled_print_number(char *data) {
    
    while (*data != '\0') {
     f14:	89 91       	ld	r24, Y+
     f16:	81 11       	cpse	r24, r1
     f18:	fb cf       	rjmp	.-10     	; 0xf10 <oled_print_number+0xe>
        write_dnumber(*data);
        data++;
        
    }
}
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	08 95       	ret

00000f20 <print_Sram_test>:

void print_Sram_test(){
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
     f28:	c6 54       	subi	r28, 0x46	; 70
     f2a:	d1 09       	sbc	r29, r1
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	f8 94       	cli
     f30:	de bf       	out	0x3e, r29	; 62
     f32:	0f be       	out	0x3f, r0	; 63
     f34:	cd bf       	out	0x3d, r28	; 61
    int errors[2];
    char werrors [33];
    char rerrors [33];
    
    oled_clear_screen();
     f36:	0e 94 da 05 	call	0xbb4	; 0xbb4 <oled_clear_screen>
    oled_set_line(0);
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	0e 94 d1 05 	call	0xba2	; 0xba2 <oled_set_line>
    oled_print_string("Running sram test");
     f40:	8e ee       	ldi	r24, 0xEE	; 238
     f42:	91 e0       	ldi	r25, 0x01	; 1
     f44:	0e 94 98 06 	call	0xd30	; 0xd30 <oled_print_string>
    SRAM_test_return_errors(errors);
     f48:	ce 01       	movw	r24, r28
     f4a:	01 96       	adiw	r24, 0x01	; 1
     f4c:	0e 94 31 0b 	call	0x1662	; 0x1662 <SRAM_test_return_errors>
     f50:	2f ef       	ldi	r18, 0xFF	; 255
     f52:	88 e0       	ldi	r24, 0x08	; 8
     f54:	9d e3       	ldi	r25, 0x3D	; 61
     f56:	21 50       	subi	r18, 0x01	; 1
     f58:	80 40       	sbci	r24, 0x00	; 0
     f5a:	90 40       	sbci	r25, 0x00	; 0
     f5c:	e1 f7       	brne	.-8      	; 0xf56 <print_Sram_test+0x36>
     f5e:	00 c0       	rjmp	.+0      	; 0xf60 <print_Sram_test+0x40>
     f60:	00 00       	nop
    _delay_ms(20000);
    
    itoa(errors[0], werrors,10); // KONVERTERER FRA INT TIL STRING
     f62:	4a e0       	ldi	r20, 0x0A	; 10
     f64:	50 e0       	ldi	r21, 0x00	; 0
     f66:	be 01       	movw	r22, r28
     f68:	6b 5f       	subi	r22, 0xFB	; 251
     f6a:	7f 4f       	sbci	r23, 0xFF	; 255
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	9a 81       	ldd	r25, Y+2	; 0x02
     f70:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <itoa>
    itoa(errors[1],rerrors,10);
     f74:	4a e0       	ldi	r20, 0x0A	; 10
     f76:	50 e0       	ldi	r21, 0x00	; 0
     f78:	be 01       	movw	r22, r28
     f7a:	6a 5d       	subi	r22, 0xDA	; 218
     f7c:	7f 4f       	sbci	r23, 0xFF	; 255
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	9c 81       	ldd	r25, Y+4	; 0x04
     f82:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <itoa>
    
    oled_set_line(2);
     f86:	82 e0       	ldi	r24, 0x02	; 2
     f88:	0e 94 d1 05 	call	0xba2	; 0xba2 <oled_set_line>
    oled_print_string("  Write errors: ");
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	92 e0       	ldi	r25, 0x02	; 2
     f90:	0e 94 98 06 	call	0xd30	; 0xd30 <oled_print_string>
    oled_print_number(werrors);
     f94:	ce 01       	movw	r24, r28
     f96:	05 96       	adiw	r24, 0x05	; 5
     f98:	0e 94 81 07 	call	0xf02	; 0xf02 <oled_print_number>
    oled_set_line(5);
     f9c:	85 e0       	ldi	r24, 0x05	; 5
     f9e:	0e 94 d1 05 	call	0xba2	; 0xba2 <oled_set_line>
    oled_print_string("  Read errors: ");
     fa2:	81 e1       	ldi	r24, 0x11	; 17
     fa4:	92 e0       	ldi	r25, 0x02	; 2
     fa6:	0e 94 98 06 	call	0xd30	; 0xd30 <oled_print_string>
    oled_print_number(rerrors);
     faa:	ce 01       	movw	r24, r28
     fac:	86 96       	adiw	r24, 0x26	; 38
     fae:	0e 94 81 07 	call	0xf02	; 0xf02 <oled_print_number>
    SRAM_test();
     fb2:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <SRAM_test>
    while(joy_button_left() == 0);
     fb6:	0e 94 9d 04 	call	0x93a	; 0x93a <joy_button_left>
     fba:	89 2b       	or	r24, r25
     fbc:	e1 f3       	breq	.-8      	; 0xfb6 <print_Sram_test+0x96>
    oled_meny_print();
     fbe:	0e 94 a7 06 	call	0xd4e	; 0xd4e <oled_meny_print>
}
     fc2:	ca 5b       	subi	r28, 0xBA	; 186
     fc4:	df 4f       	sbci	r29, 0xFF	; 255
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	f8 94       	cli
     fca:	de bf       	out	0x3e, r29	; 62
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	cd bf       	out	0x3d, r28	; 61
     fd0:	df 91       	pop	r29
     fd2:	cf 91       	pop	r28
     fd4:	08 95       	ret

00000fd6 <oled_meny>:
    oled_print_string(">");
    
}


void oled_meny(int * playingGame, uint16_t * id) {
     fd6:	cf 92       	push	r12
     fd8:	df 92       	push	r13
     fda:	ef 92       	push	r14
     fdc:	ff 92       	push	r15
     fde:	0f 93       	push	r16
     fe0:	1f 93       	push	r17
     fe2:	cf 93       	push	r28
     fe4:	df 93       	push	r29
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	c0 57       	subi	r28, 0x70	; 112
     fec:	d1 09       	sbc	r29, r1
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	f8 94       	cli
     ff2:	de bf       	out	0x3e, r29	; 62
     ff4:	0f be       	out	0x3f, r0	; 63
     ff6:	cd bf       	out	0x3d, r28	; 61
     ff8:	8c 01       	movw	r16, r24
     ffa:	7b 01       	movw	r14, r22
    
    if(submenu1 || submenu2) { // SJEKKER OM VI GAAR UT AV SUBMENUEN
     ffc:	80 91 1e 03 	lds	r24, 0x031E
    1000:	90 91 1f 03 	lds	r25, 0x031F
    1004:	89 2b       	or	r24, r25
    1006:	31 f4       	brne	.+12     	; 0x1014 <oled_meny+0x3e>
    1008:	80 91 1c 03 	lds	r24, 0x031C
    100c:	90 91 1d 03 	lds	r25, 0x031D
    1010:	89 2b       	or	r24, r25
    1012:	11 f1       	breq	.+68     	; 0x1058 <oled_meny+0x82>
        if(joy_button_left()) {
    1014:	0e 94 9d 04 	call	0x93a	; 0x93a <joy_button_left>
    1018:	89 2b       	or	r24, r25
    101a:	f1 f0       	breq	.+60     	; 0x1058 <oled_meny+0x82>
            if (submenu2) {
    101c:	80 91 1c 03 	lds	r24, 0x031C
    1020:	90 91 1d 03 	lds	r25, 0x031D
    1024:	89 2b       	or	r24, r25
    1026:	41 f0       	breq	.+16     	; 0x1038 <oled_meny+0x62>
                submenu2 = 0;
    1028:	10 92 1d 03 	sts	0x031D, r1
    102c:	10 92 1c 03 	sts	0x031C, r1
                *playingGame = 0;
    1030:	f8 01       	movw	r30, r16
    1032:	11 82       	std	Z+1, r1	; 0x01
    1034:	10 82       	st	Z, r1
    1036:	04 c0       	rjmp	.+8      	; 0x1040 <oled_meny+0x6a>
            }
            else {
                submenu1 = 0;
    1038:	10 92 1f 03 	sts	0x031F, r1
    103c:	10 92 1e 03 	sts	0x031E, r1
            }
            
            current_line = 1;
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	90 93 19 01 	sts	0x0119, r25
    1048:	80 93 18 01 	sts	0x0118, r24
            previous_line = 1;
    104c:	90 93 1b 01 	sts	0x011B, r25
    1050:	80 93 1a 01 	sts	0x011A, r24
            oled_meny_print();
    1054:	0e 94 a7 06 	call	0xd4e	; 0xd4e <oled_meny_print>
        }
    }
    
    
    if (!(*playingGame)) {
    1058:	f8 01       	movw	r30, r16
    105a:	80 81       	ld	r24, Z
    105c:	91 81       	ldd	r25, Z+1	; 0x01
    105e:	89 2b       	or	r24, r25
    1060:	09 f0       	breq	.+2      	; 0x1064 <oled_meny+0x8e>
    1062:	dc c1       	rjmp	.+952    	; 0x141c <oled_meny+0x446>
        
        
        if(joystick_dir(joystick_anal()) == 3 && current_line != 3){
    1064:	0e 94 a7 03 	call	0x74e	; 0x74e <joystick_anal>
    1068:	aa 96       	adiw	r28, 0x2a	; 42
    106a:	2f af       	std	Y+63, r18	; 0x3f
    106c:	aa 97       	sbiw	r28, 0x2a	; 42
    106e:	ab 96       	adiw	r28, 0x2b	; 43
    1070:	3f af       	std	Y+63, r19	; 0x3f
    1072:	ab 97       	sbiw	r28, 0x2b	; 43
    1074:	ac 96       	adiw	r28, 0x2c	; 44
    1076:	4f af       	std	Y+63, r20	; 0x3f
    1078:	ac 97       	sbiw	r28, 0x2c	; 44
    107a:	ad 96       	adiw	r28, 0x2d	; 45
    107c:	5f af       	std	Y+63, r21	; 0x3f
    107e:	ad 97       	sbiw	r28, 0x2d	; 45
    1080:	ae 96       	adiw	r28, 0x2e	; 46
    1082:	6f af       	std	Y+63, r22	; 0x3f
    1084:	ae 97       	sbiw	r28, 0x2e	; 46
    1086:	af 96       	adiw	r28, 0x2f	; 47
    1088:	7f af       	std	Y+63, r23	; 0x3f
    108a:	af 97       	sbiw	r28, 0x2f	; 47
    108c:	e0 96       	adiw	r28, 0x30	; 48
    108e:	8f af       	std	Y+63, r24	; 0x3f
    1090:	e0 97       	sbiw	r28, 0x30	; 48
    1092:	e1 96       	adiw	r28, 0x31	; 49
    1094:	9f af       	std	Y+63, r25	; 0x3f
    1096:	e1 97       	sbiw	r28, 0x31	; 49
    1098:	0e 94 4d 03 	call	0x69a	; 0x69a <joystick_dir>
    109c:	83 30       	cpi	r24, 0x03	; 3
    109e:	89 f5       	brne	.+98     	; 0x1102 <oled_meny+0x12c>
    10a0:	80 91 18 01 	lds	r24, 0x0118
    10a4:	90 91 19 01 	lds	r25, 0x0119
    10a8:	83 30       	cpi	r24, 0x03	; 3
    10aa:	91 05       	cpc	r25, r1
    10ac:	51 f1       	breq	.+84     	; 0x1102 <oled_meny+0x12c>
            previous_line = current_line;
    10ae:	90 93 1b 01 	sts	0x011B, r25
    10b2:	80 93 1a 01 	sts	0x011A, r24
            current_line++;
    10b6:	01 96       	adiw	r24, 0x01	; 1
    10b8:	90 93 19 01 	sts	0x0119, r25
    10bc:	80 93 18 01 	sts	0x0118, r24
            oled_meny_print();
    10c0:	0e 94 a7 06 	call	0xd4e	; 0xd4e <oled_meny_print>
            while (joystick_dir(joystick_anal()) != NEUTRAL);
    10c4:	0e 94 a7 03 	call	0x74e	; 0x74e <joystick_anal>
    10c8:	a2 96       	adiw	r28, 0x22	; 34
    10ca:	2f af       	std	Y+63, r18	; 0x3f
    10cc:	a2 97       	sbiw	r28, 0x22	; 34
    10ce:	a3 96       	adiw	r28, 0x23	; 35
    10d0:	3f af       	std	Y+63, r19	; 0x3f
    10d2:	a3 97       	sbiw	r28, 0x23	; 35
    10d4:	a4 96       	adiw	r28, 0x24	; 36
    10d6:	4f af       	std	Y+63, r20	; 0x3f
    10d8:	a4 97       	sbiw	r28, 0x24	; 36
    10da:	a5 96       	adiw	r28, 0x25	; 37
    10dc:	5f af       	std	Y+63, r21	; 0x3f
    10de:	a5 97       	sbiw	r28, 0x25	; 37
    10e0:	a6 96       	adiw	r28, 0x26	; 38
    10e2:	6f af       	std	Y+63, r22	; 0x3f
    10e4:	a6 97       	sbiw	r28, 0x26	; 38
    10e6:	a7 96       	adiw	r28, 0x27	; 39
    10e8:	7f af       	std	Y+63, r23	; 0x3f
    10ea:	a7 97       	sbiw	r28, 0x27	; 39
    10ec:	a8 96       	adiw	r28, 0x28	; 40
    10ee:	8f af       	std	Y+63, r24	; 0x3f
    10f0:	a8 97       	sbiw	r28, 0x28	; 40
    10f2:	a9 96       	adiw	r28, 0x29	; 41
    10f4:	9f af       	std	Y+63, r25	; 0x3f
    10f6:	a9 97       	sbiw	r28, 0x29	; 41
    10f8:	0e 94 4d 03 	call	0x69a	; 0x69a <joystick_dir>
    10fc:	84 30       	cpi	r24, 0x04	; 4
    10fe:	11 f7       	brne	.-60     	; 0x10c4 <oled_meny+0xee>
    1100:	da c0       	rjmp	.+436    	; 0x12b6 <oled_meny+0x2e0>
        }
        
        else if (joystick_dir(joystick_anal()) == 2 && current_line != 1){
    1102:	0e 94 a7 03 	call	0x74e	; 0x74e <joystick_anal>
    1106:	6a 96       	adiw	r28, 0x1a	; 26
    1108:	2f af       	std	Y+63, r18	; 0x3f
    110a:	6a 97       	sbiw	r28, 0x1a	; 26
    110c:	6b 96       	adiw	r28, 0x1b	; 27
    110e:	3f af       	std	Y+63, r19	; 0x3f
    1110:	6b 97       	sbiw	r28, 0x1b	; 27
    1112:	6c 96       	adiw	r28, 0x1c	; 28
    1114:	4f af       	std	Y+63, r20	; 0x3f
    1116:	6c 97       	sbiw	r28, 0x1c	; 28
    1118:	6d 96       	adiw	r28, 0x1d	; 29
    111a:	5f af       	std	Y+63, r21	; 0x3f
    111c:	6d 97       	sbiw	r28, 0x1d	; 29
    111e:	6e 96       	adiw	r28, 0x1e	; 30
    1120:	6f af       	std	Y+63, r22	; 0x3f
    1122:	6e 97       	sbiw	r28, 0x1e	; 30
    1124:	6f 96       	adiw	r28, 0x1f	; 31
    1126:	7f af       	std	Y+63, r23	; 0x3f
    1128:	6f 97       	sbiw	r28, 0x1f	; 31
    112a:	a0 96       	adiw	r28, 0x20	; 32
    112c:	8f af       	std	Y+63, r24	; 0x3f
    112e:	a0 97       	sbiw	r28, 0x20	; 32
    1130:	a1 96       	adiw	r28, 0x21	; 33
    1132:	9f af       	std	Y+63, r25	; 0x3f
    1134:	a1 97       	sbiw	r28, 0x21	; 33
    1136:	0e 94 4d 03 	call	0x69a	; 0x69a <joystick_dir>
    113a:	82 30       	cpi	r24, 0x02	; 2
    113c:	89 f5       	brne	.+98     	; 0x11a0 <oled_meny+0x1ca>
    113e:	80 91 18 01 	lds	r24, 0x0118
    1142:	90 91 19 01 	lds	r25, 0x0119
    1146:	81 30       	cpi	r24, 0x01	; 1
    1148:	91 05       	cpc	r25, r1
    114a:	51 f1       	breq	.+84     	; 0x11a0 <oled_meny+0x1ca>
            previous_line = current_line;
    114c:	90 93 1b 01 	sts	0x011B, r25
    1150:	80 93 1a 01 	sts	0x011A, r24
            current_line--;
    1154:	01 97       	sbiw	r24, 0x01	; 1
    1156:	90 93 19 01 	sts	0x0119, r25
    115a:	80 93 18 01 	sts	0x0118, r24
            oled_meny_print();
    115e:	0e 94 a7 06 	call	0xd4e	; 0xd4e <oled_meny_print>
            while (joystick_dir(joystick_anal()) != NEUTRAL);
    1162:	0e 94 a7 03 	call	0x74e	; 0x74e <joystick_anal>
    1166:	62 96       	adiw	r28, 0x12	; 18
    1168:	2f af       	std	Y+63, r18	; 0x3f
    116a:	62 97       	sbiw	r28, 0x12	; 18
    116c:	63 96       	adiw	r28, 0x13	; 19
    116e:	3f af       	std	Y+63, r19	; 0x3f
    1170:	63 97       	sbiw	r28, 0x13	; 19
    1172:	64 96       	adiw	r28, 0x14	; 20
    1174:	4f af       	std	Y+63, r20	; 0x3f
    1176:	64 97       	sbiw	r28, 0x14	; 20
    1178:	65 96       	adiw	r28, 0x15	; 21
    117a:	5f af       	std	Y+63, r21	; 0x3f
    117c:	65 97       	sbiw	r28, 0x15	; 21
    117e:	66 96       	adiw	r28, 0x16	; 22
    1180:	6f af       	std	Y+63, r22	; 0x3f
    1182:	66 97       	sbiw	r28, 0x16	; 22
    1184:	67 96       	adiw	r28, 0x17	; 23
    1186:	7f af       	std	Y+63, r23	; 0x3f
    1188:	67 97       	sbiw	r28, 0x17	; 23
    118a:	68 96       	adiw	r28, 0x18	; 24
    118c:	8f af       	std	Y+63, r24	; 0x3f
    118e:	68 97       	sbiw	r28, 0x18	; 24
    1190:	69 96       	adiw	r28, 0x19	; 25
    1192:	9f af       	std	Y+63, r25	; 0x3f
    1194:	69 97       	sbiw	r28, 0x19	; 25
    1196:	0e 94 4d 03 	call	0x69a	; 0x69a <joystick_dir>
    119a:	84 30       	cpi	r24, 0x04	; 4
    119c:	11 f7       	brne	.-60     	; 0x1162 <oled_meny+0x18c>
    119e:	8b c0       	rjmp	.+278    	; 0x12b6 <oled_meny+0x2e0>
            
        }
        else if (joystick_dir(joystick_anal()) == 2 && current_line == 1){
    11a0:	0e 94 a7 03 	call	0x74e	; 0x74e <joystick_anal>
    11a4:	2a 96       	adiw	r28, 0x0a	; 10
    11a6:	2f af       	std	Y+63, r18	; 0x3f
    11a8:	2a 97       	sbiw	r28, 0x0a	; 10
    11aa:	2b 96       	adiw	r28, 0x0b	; 11
    11ac:	3f af       	std	Y+63, r19	; 0x3f
    11ae:	2b 97       	sbiw	r28, 0x0b	; 11
    11b0:	2c 96       	adiw	r28, 0x0c	; 12
    11b2:	4f af       	std	Y+63, r20	; 0x3f
    11b4:	2c 97       	sbiw	r28, 0x0c	; 12
    11b6:	2d 96       	adiw	r28, 0x0d	; 13
    11b8:	5f af       	std	Y+63, r21	; 0x3f
    11ba:	2d 97       	sbiw	r28, 0x0d	; 13
    11bc:	2e 96       	adiw	r28, 0x0e	; 14
    11be:	6f af       	std	Y+63, r22	; 0x3f
    11c0:	2e 97       	sbiw	r28, 0x0e	; 14
    11c2:	2f 96       	adiw	r28, 0x0f	; 15
    11c4:	7f af       	std	Y+63, r23	; 0x3f
    11c6:	2f 97       	sbiw	r28, 0x0f	; 15
    11c8:	60 96       	adiw	r28, 0x10	; 16
    11ca:	8f af       	std	Y+63, r24	; 0x3f
    11cc:	60 97       	sbiw	r28, 0x10	; 16
    11ce:	61 96       	adiw	r28, 0x11	; 17
    11d0:	9f af       	std	Y+63, r25	; 0x3f
    11d2:	61 97       	sbiw	r28, 0x11	; 17
    11d4:	0e 94 4d 03 	call	0x69a	; 0x69a <joystick_dir>
    11d8:	82 30       	cpi	r24, 0x02	; 2
    11da:	d9 f5       	brne	.+118    	; 0x1252 <oled_meny+0x27c>
    11dc:	80 91 18 01 	lds	r24, 0x0118
    11e0:	90 91 19 01 	lds	r25, 0x0119
    11e4:	01 97       	sbiw	r24, 0x01	; 1
    11e6:	a9 f5       	brne	.+106    	; 0x1252 <oled_meny+0x27c>
            previous_line = current_line;
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	90 93 1b 01 	sts	0x011B, r25
    11f0:	80 93 1a 01 	sts	0x011A, r24
            current_line = 3;
    11f4:	83 e0       	ldi	r24, 0x03	; 3
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	90 93 19 01 	sts	0x0119, r25
    11fc:	80 93 18 01 	sts	0x0118, r24
            oled_meny_print();
    1200:	0e 94 a7 06 	call	0xd4e	; 0xd4e <oled_meny_print>
            while (joystick_dir(joystick_anal()) != NEUTRAL);
    1204:	0e 94 a7 03 	call	0x74e	; 0x74e <joystick_anal>
    1208:	22 96       	adiw	r28, 0x02	; 2
    120a:	2f af       	std	Y+63, r18	; 0x3f
    120c:	22 97       	sbiw	r28, 0x02	; 2
    120e:	23 96       	adiw	r28, 0x03	; 3
    1210:	3f af       	std	Y+63, r19	; 0x3f
    1212:	23 97       	sbiw	r28, 0x03	; 3
    1214:	b4 2f       	mov	r27, r20
    1216:	24 96       	adiw	r28, 0x04	; 4
    1218:	4f af       	std	Y+63, r20	; 0x3f
    121a:	24 97       	sbiw	r28, 0x04	; 4
    121c:	a5 2f       	mov	r26, r21
    121e:	25 96       	adiw	r28, 0x05	; 5
    1220:	5f af       	std	Y+63, r21	; 0x3f
    1222:	25 97       	sbiw	r28, 0x05	; 5
    1224:	f6 2f       	mov	r31, r22
    1226:	26 96       	adiw	r28, 0x06	; 6
    1228:	6f af       	std	Y+63, r22	; 0x3f
    122a:	26 97       	sbiw	r28, 0x06	; 6
    122c:	e7 2f       	mov	r30, r23
    122e:	27 96       	adiw	r28, 0x07	; 7
    1230:	7f af       	std	Y+63, r23	; 0x3f
    1232:	27 97       	sbiw	r28, 0x07	; 7
    1234:	28 96       	adiw	r28, 0x08	; 8
    1236:	8f af       	std	Y+63, r24	; 0x3f
    1238:	28 97       	sbiw	r28, 0x08	; 8
    123a:	29 96       	adiw	r28, 0x09	; 9
    123c:	9f af       	std	Y+63, r25	; 0x3f
    123e:	29 97       	sbiw	r28, 0x09	; 9
    1240:	4b 2f       	mov	r20, r27
    1242:	5a 2f       	mov	r21, r26
    1244:	6f 2f       	mov	r22, r31
    1246:	7e 2f       	mov	r23, r30
    1248:	0e 94 4d 03 	call	0x69a	; 0x69a <joystick_dir>
    124c:	84 30       	cpi	r24, 0x04	; 4
    124e:	d1 f6       	brne	.-76     	; 0x1204 <oled_meny+0x22e>
    1250:	32 c0       	rjmp	.+100    	; 0x12b6 <oled_meny+0x2e0>
            
        }
        
        else if (joystick_dir(joystick_anal()) == 3 && current_line == 3){
    1252:	0e 94 a7 03 	call	0x74e	; 0x74e <joystick_anal>
    1256:	29 af       	std	Y+57, r18	; 0x39
    1258:	3a af       	std	Y+58, r19	; 0x3a
    125a:	4b af       	std	Y+59, r20	; 0x3b
    125c:	5c af       	std	Y+60, r21	; 0x3c
    125e:	6d af       	std	Y+61, r22	; 0x3d
    1260:	7e af       	std	Y+62, r23	; 0x3e
    1262:	8f af       	std	Y+63, r24	; 0x3f
    1264:	21 96       	adiw	r28, 0x01	; 1
    1266:	9f af       	std	Y+63, r25	; 0x3f
    1268:	21 97       	sbiw	r28, 0x01	; 1
    126a:	0e 94 4d 03 	call	0x69a	; 0x69a <joystick_dir>
    126e:	83 30       	cpi	r24, 0x03	; 3
    1270:	11 f5       	brne	.+68     	; 0x12b6 <oled_meny+0x2e0>
    1272:	80 91 18 01 	lds	r24, 0x0118
    1276:	90 91 19 01 	lds	r25, 0x0119
    127a:	03 97       	sbiw	r24, 0x03	; 3
    127c:	e1 f4       	brne	.+56     	; 0x12b6 <oled_meny+0x2e0>
            previous_line = current_line;
    127e:	83 e0       	ldi	r24, 0x03	; 3
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	90 93 1b 01 	sts	0x011B, r25
    1286:	80 93 1a 01 	sts	0x011A, r24
            current_line = 1;
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	90 93 19 01 	sts	0x0119, r25
    1292:	80 93 18 01 	sts	0x0118, r24
            oled_meny_print();
    1296:	0e 94 a7 06 	call	0xd4e	; 0xd4e <oled_meny_print>
            while (joystick_dir(joystick_anal()) != NEUTRAL);
    129a:	0e 94 a7 03 	call	0x74e	; 0x74e <joystick_anal>
    129e:	29 ab       	std	Y+49, r18	; 0x31
    12a0:	3a ab       	std	Y+50, r19	; 0x32
    12a2:	4b ab       	std	Y+51, r20	; 0x33
    12a4:	5c ab       	std	Y+52, r21	; 0x34
    12a6:	6d ab       	std	Y+53, r22	; 0x35
    12a8:	7e ab       	std	Y+54, r23	; 0x36
    12aa:	8f ab       	std	Y+55, r24	; 0x37
    12ac:	98 af       	std	Y+56, r25	; 0x38
    12ae:	0e 94 4d 03 	call	0x69a	; 0x69a <joystick_dir>
    12b2:	84 30       	cpi	r24, 0x04	; 4
    12b4:	91 f7       	brne	.-28     	; 0x129a <oled_meny+0x2c4>
        }
        
        if (joystick_dir(joystick_anal()) == RIGHT && current_line == 1 && !submenu1) {
    12b6:	0e 94 a7 03 	call	0x74e	; 0x74e <joystick_anal>
    12ba:	29 a7       	std	Y+41, r18	; 0x29
    12bc:	3a a7       	std	Y+42, r19	; 0x2a
    12be:	4b a7       	std	Y+43, r20	; 0x2b
    12c0:	5c a7       	std	Y+44, r21	; 0x2c
    12c2:	6d a7       	std	Y+45, r22	; 0x2d
    12c4:	7e a7       	std	Y+46, r23	; 0x2e
    12c6:	8f a7       	std	Y+47, r24	; 0x2f
    12c8:	98 ab       	std	Y+48, r25	; 0x30
    12ca:	0e 94 4d 03 	call	0x69a	; 0x69a <joystick_dir>
    12ce:	81 30       	cpi	r24, 0x01	; 1
    12d0:	e9 f4       	brne	.+58     	; 0x130c <oled_meny+0x336>
    12d2:	80 91 18 01 	lds	r24, 0x0118
    12d6:	90 91 19 01 	lds	r25, 0x0119
    12da:	01 97       	sbiw	r24, 0x01	; 1
    12dc:	b9 f4       	brne	.+46     	; 0x130c <oled_meny+0x336>
    12de:	80 91 1e 03 	lds	r24, 0x031E
    12e2:	90 91 1f 03 	lds	r25, 0x031F
    12e6:	89 2b       	or	r24, r25
    12e8:	89 f4       	brne	.+34     	; 0x130c <oled_meny+0x336>
            submenu1 = 1;
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	90 93 1f 03 	sts	0x031F, r25
    12f2:	80 93 1e 03 	sts	0x031E, r24
            oled_meny_print();
    12f6:	0e 94 a7 06 	call	0xd4e	; 0xd4e <oled_meny_print>
    12fa:	ff ed       	ldi	r31, 0xDF	; 223
    12fc:	23 e9       	ldi	r18, 0x93	; 147
    12fe:	84 e0       	ldi	r24, 0x04	; 4
    1300:	f1 50       	subi	r31, 0x01	; 1
    1302:	20 40       	sbci	r18, 0x00	; 0
    1304:	80 40       	sbci	r24, 0x00	; 0
    1306:	e1 f7       	brne	.-8      	; 0x1300 <oled_meny+0x32a>
    1308:	00 c0       	rjmp	.+0      	; 0x130a <oled_meny+0x334>
    130a:	00 00       	nop
            _delay_ms(1500); // For aa ikke komme rett inn i spill
        }
        
        if (joystick_dir(joystick_anal()) == RIGHT && current_line == 1 && submenu1) {
    130c:	0e 94 a7 03 	call	0x74e	; 0x74e <joystick_anal>
    1310:	0e 94 4d 03 	call	0x69a	; 0x69a <joystick_dir>
    1314:	81 30       	cpi	r24, 0x01	; 1
    1316:	e9 f4       	brne	.+58     	; 0x1352 <oled_meny+0x37c>
    1318:	80 91 18 01 	lds	r24, 0x0118
    131c:	90 91 19 01 	lds	r25, 0x0119
    1320:	01 97       	sbiw	r24, 0x01	; 1
    1322:	b9 f4       	brne	.+46     	; 0x1352 <oled_meny+0x37c>
    1324:	80 91 1e 03 	lds	r24, 0x031E
    1328:	90 91 1f 03 	lds	r25, 0x031F
    132c:	89 2b       	or	r24, r25
    132e:	89 f0       	breq	.+34     	; 0x1352 <oled_meny+0x37c>
            submenu2 = 1;
    1330:	cc 24       	eor	r12, r12
    1332:	c3 94       	inc	r12
    1334:	d1 2c       	mov	r13, r1
    1336:	d0 92 1d 03 	sts	0x031D, r13
    133a:	c0 92 1c 03 	sts	0x031C, r12
            oled_meny_print();
    133e:	0e 94 a7 06 	call	0xd4e	; 0xd4e <oled_meny_print>
            *playingGame = 1;
    1342:	f8 01       	movw	r30, r16
    1344:	d1 82       	std	Z+1, r13	; 0x01
    1346:	c0 82       	st	Z, r12
            *id = onePlayer;
    1348:	82 e0       	ldi	r24, 0x02	; 2
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	f7 01       	movw	r30, r14
    134e:	91 83       	std	Z+1, r25	; 0x01
    1350:	80 83       	st	Z, r24
        }
        
        if (joystick_dir(joystick_anal()) == RIGHT && current_line == 2 && submenu1) {
    1352:	0e 94 a7 03 	call	0x74e	; 0x74e <joystick_anal>
    1356:	0e 94 4d 03 	call	0x69a	; 0x69a <joystick_dir>
    135a:	81 30       	cpi	r24, 0x01	; 1
    135c:	e9 f4       	brne	.+58     	; 0x1398 <oled_meny+0x3c2>
    135e:	80 91 18 01 	lds	r24, 0x0118
    1362:	90 91 19 01 	lds	r25, 0x0119
    1366:	02 97       	sbiw	r24, 0x02	; 2
    1368:	b9 f4       	brne	.+46     	; 0x1398 <oled_meny+0x3c2>
    136a:	80 91 1e 03 	lds	r24, 0x031E
    136e:	90 91 1f 03 	lds	r25, 0x031F
    1372:	89 2b       	or	r24, r25
    1374:	89 f0       	breq	.+34     	; 0x1398 <oled_meny+0x3c2>
            submenu2 = 1;
    1376:	cc 24       	eor	r12, r12
    1378:	c3 94       	inc	r12
    137a:	d1 2c       	mov	r13, r1
    137c:	d0 92 1d 03 	sts	0x031D, r13
    1380:	c0 92 1c 03 	sts	0x031C, r12
            oled_meny_print();
    1384:	0e 94 a7 06 	call	0xd4e	; 0xd4e <oled_meny_print>
            *playingGame = 1;
    1388:	f8 01       	movw	r30, r16
    138a:	d1 82       	std	Z+1, r13	; 0x01
    138c:	c0 82       	st	Z, r12
            *id = twoPlayer;
    138e:	83 e0       	ldi	r24, 0x03	; 3
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	f7 01       	movw	r30, r14
    1394:	91 83       	std	Z+1, r25	; 0x01
    1396:	80 83       	st	Z, r24
        }
        
        if (joystick_dir(joystick_anal()) == RIGHT && current_line == 3 && submenu1) {
    1398:	0e 94 a7 03 	call	0x74e	; 0x74e <joystick_anal>
    139c:	0e 94 4d 03 	call	0x69a	; 0x69a <joystick_dir>
    13a0:	81 30       	cpi	r24, 0x01	; 1
    13a2:	a1 f4       	brne	.+40     	; 0x13cc <oled_meny+0x3f6>
    13a4:	80 91 18 01 	lds	r24, 0x0118
    13a8:	90 91 19 01 	lds	r25, 0x0119
    13ac:	03 97       	sbiw	r24, 0x03	; 3
    13ae:	71 f4       	brne	.+28     	; 0x13cc <oled_meny+0x3f6>
    13b0:	80 91 1e 03 	lds	r24, 0x031E
    13b4:	90 91 1f 03 	lds	r25, 0x031F
    13b8:	89 2b       	or	r24, r25
    13ba:	41 f0       	breq	.+16     	; 0x13cc <oled_meny+0x3f6>
            submenu2 = 1;
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	90 93 1d 03 	sts	0x031D, r25
    13c4:	80 93 1c 03 	sts	0x031C, r24
            requestHighScore();
    13c8:	0e 94 8e 0a 	call	0x151c	; 0x151c <requestHighScore>
        }
        
        if (joystick_dir(joystick_anal()) == RIGHT && current_line == 2 && !(submenu1)) {
    13cc:	0e 94 a7 03 	call	0x74e	; 0x74e <joystick_anal>
    13d0:	0e 94 4d 03 	call	0x69a	; 0x69a <joystick_dir>
    13d4:	81 30       	cpi	r24, 0x01	; 1
    13d6:	71 f4       	brne	.+28     	; 0x13f4 <oled_meny+0x41e>
    13d8:	80 91 18 01 	lds	r24, 0x0118
    13dc:	90 91 19 01 	lds	r25, 0x0119
    13e0:	02 97       	sbiw	r24, 0x02	; 2
    13e2:	41 f4       	brne	.+16     	; 0x13f4 <oled_meny+0x41e>
    13e4:	80 91 1e 03 	lds	r24, 0x031E
    13e8:	90 91 1f 03 	lds	r25, 0x031F
    13ec:	89 2b       	or	r24, r25
    13ee:	11 f4       	brne	.+4      	; 0x13f4 <oled_meny+0x41e>
            print_Sram_test();
    13f0:	0e 94 90 07 	call	0xf20	; 0xf20 <print_Sram_test>
        }
        
        if (joystick_dir(joystick_anal()) == RIGHT && current_line == 3 && !(submenu1)) {
    13f4:	0e 94 a7 03 	call	0x74e	; 0x74e <joystick_anal>
    13f8:	0e 94 4d 03 	call	0x69a	; 0x69a <joystick_dir>
    13fc:	81 30       	cpi	r24, 0x01	; 1
    13fe:	71 f4       	brne	.+28     	; 0x141c <oled_meny+0x446>
    1400:	80 91 18 01 	lds	r24, 0x0118
    1404:	90 91 19 01 	lds	r25, 0x0119
    1408:	03 97       	sbiw	r24, 0x03	; 3
    140a:	41 f4       	brne	.+16     	; 0x141c <oled_meny+0x446>
    140c:	80 91 1e 03 	lds	r24, 0x031E
    1410:	90 91 1f 03 	lds	r25, 0x031F
    1414:	89 2b       	or	r24, r25
    1416:	11 f4       	brne	.+4      	; 0x141c <oled_meny+0x446>
            playMusic();
    1418:	0e 94 c4 0a 	call	0x1588	; 0x1588 <playMusic>
        }
        
    }
    
}
    141c:	c0 59       	subi	r28, 0x90	; 144
    141e:	df 4f       	sbci	r29, 0xFF	; 255
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	f8 94       	cli
    1424:	de bf       	out	0x3e, r29	; 62
    1426:	0f be       	out	0x3f, r0	; 63
    1428:	cd bf       	out	0x3d, r28	; 61
    142a:	df 91       	pop	r29
    142c:	cf 91       	pop	r28
    142e:	1f 91       	pop	r17
    1430:	0f 91       	pop	r16
    1432:	ff 90       	pop	r15
    1434:	ef 90       	pop	r14
    1436:	df 90       	pop	r13
    1438:	cf 90       	pop	r12
    143a:	08 95       	ret

0000143c <printHighScore>:
    SRAM_test();
    while(joy_button_left() == 0);
    oled_meny_print();
}

void printHighScore(int* arr) {
    143c:	0f 93       	push	r16
    143e:	1f 93       	push	r17
    1440:	cf 93       	push	r28
    1442:	df 93       	push	r29
    1444:	cd b7       	in	r28, 0x3d	; 61
    1446:	de b7       	in	r29, 0x3e	; 62
    1448:	a1 97       	sbiw	r28, 0x21	; 33
    144a:	0f b6       	in	r0, 0x3f	; 63
    144c:	f8 94       	cli
    144e:	de bf       	out	0x3e, r29	; 62
    1450:	0f be       	out	0x3f, r0	; 63
    1452:	cd bf       	out	0x3d, r28	; 61
    1454:	8c 01       	movw	r16, r24
    
    oled_clear_screen();
    1456:	0e 94 da 05 	call	0xbb4	; 0xbb4 <oled_clear_screen>
    
    char scoreString [33];
    
    oled_set_line(0);
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	0e 94 d1 05 	call	0xba2	; 0xba2 <oled_set_line>
    oled_print_string("   HIGH SCORES: ");
    1460:	81 e2       	ldi	r24, 0x21	; 33
    1462:	92 e0       	ldi	r25, 0x02	; 2
    1464:	0e 94 98 06 	call	0xd30	; 0xd30 <oled_print_string>
    
    oled_set_line(2);
    1468:	82 e0       	ldi	r24, 0x02	; 2
    146a:	0e 94 d1 05 	call	0xba2	; 0xba2 <oled_set_line>
    oled_print_string("1. ");
    146e:	82 e3       	ldi	r24, 0x32	; 50
    1470:	92 e0       	ldi	r25, 0x02	; 2
    1472:	0e 94 98 06 	call	0xd30	; 0xd30 <oled_print_string>
    itoa(arr[0], scoreString,10);
    1476:	4a e0       	ldi	r20, 0x0A	; 10
    1478:	50 e0       	ldi	r21, 0x00	; 0
    147a:	be 01       	movw	r22, r28
    147c:	6f 5f       	subi	r22, 0xFF	; 255
    147e:	7f 4f       	sbci	r23, 0xFF	; 255
    1480:	f8 01       	movw	r30, r16
    1482:	80 81       	ld	r24, Z
    1484:	91 81       	ldd	r25, Z+1	; 0x01
    1486:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <itoa>
    oled_print_number(scoreString);
    148a:	ce 01       	movw	r24, r28
    148c:	01 96       	adiw	r24, 0x01	; 1
    148e:	0e 94 81 07 	call	0xf02	; 0xf02 <oled_print_number>
    
    oled_set_line(4);
    1492:	84 e0       	ldi	r24, 0x04	; 4
    1494:	0e 94 d1 05 	call	0xba2	; 0xba2 <oled_set_line>
    oled_print_string("2. ");
    1498:	86 e3       	ldi	r24, 0x36	; 54
    149a:	92 e0       	ldi	r25, 0x02	; 2
    149c:	0e 94 98 06 	call	0xd30	; 0xd30 <oled_print_string>
    itoa(arr[1], scoreString,10);
    14a0:	4a e0       	ldi	r20, 0x0A	; 10
    14a2:	50 e0       	ldi	r21, 0x00	; 0
    14a4:	be 01       	movw	r22, r28
    14a6:	6f 5f       	subi	r22, 0xFF	; 255
    14a8:	7f 4f       	sbci	r23, 0xFF	; 255
    14aa:	f8 01       	movw	r30, r16
    14ac:	82 81       	ldd	r24, Z+2	; 0x02
    14ae:	93 81       	ldd	r25, Z+3	; 0x03
    14b0:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <itoa>
    oled_print_string(scoreString); /// tall!!
    14b4:	ce 01       	movw	r24, r28
    14b6:	01 96       	adiw	r24, 0x01	; 1
    14b8:	0e 94 98 06 	call	0xd30	; 0xd30 <oled_print_string>
    
    oled_set_line(6);
    14bc:	86 e0       	ldi	r24, 0x06	; 6
    14be:	0e 94 d1 05 	call	0xba2	; 0xba2 <oled_set_line>
    oled_print_string("3. ");
    14c2:	8a e3       	ldi	r24, 0x3A	; 58
    14c4:	92 e0       	ldi	r25, 0x02	; 2
    14c6:	0e 94 98 06 	call	0xd30	; 0xd30 <oled_print_string>
    itoa(arr[2], scoreString,10);
    14ca:	4a e0       	ldi	r20, 0x0A	; 10
    14cc:	50 e0       	ldi	r21, 0x00	; 0
    14ce:	be 01       	movw	r22, r28
    14d0:	6f 5f       	subi	r22, 0xFF	; 255
    14d2:	7f 4f       	sbci	r23, 0xFF	; 255
    14d4:	f8 01       	movw	r30, r16
    14d6:	84 81       	ldd	r24, Z+4	; 0x04
    14d8:	95 81       	ldd	r25, Z+5	; 0x05
    14da:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <itoa>
    oled_print_string(scoreString); /// tall!!
    14de:	ce 01       	movw	r24, r28
    14e0:	01 96       	adiw	r24, 0x01	; 1
    14e2:	0e 94 98 06 	call	0xd30	; 0xd30 <oled_print_string>
    
}
    14e6:	a1 96       	adiw	r28, 0x21	; 33
    14e8:	0f b6       	in	r0, 0x3f	; 63
    14ea:	f8 94       	cli
    14ec:	de bf       	out	0x3e, r29	; 62
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	cd bf       	out	0x3d, r28	; 61
    14f2:	df 91       	pop	r29
    14f4:	cf 91       	pop	r28
    14f6:	1f 91       	pop	r17
    14f8:	0f 91       	pop	r16
    14fa:	08 95       	ret

000014fc <endTwoPlayerGame>:

void endTwoPlayerGame()
{
    oled_clear_screen();
    14fc:	0e 94 da 05 	call	0xbb4	; 0xbb4 <oled_clear_screen>
    oled_set_line(2);
    1500:	82 e0       	ldi	r24, 0x02	; 2
    1502:	0e 94 d1 05 	call	0xba2	; 0xba2 <oled_set_line>
    oled_print_string("YOU WON THE GAME!!");
    1506:	8e e3       	ldi	r24, 0x3E	; 62
    1508:	92 e0       	ldi	r25, 0x02	; 2
    150a:	0e 94 98 06 	call	0xd30	; 0xd30 <oled_print_string>
    while(!joy_button_left());
    150e:	0e 94 9d 04 	call	0x93a	; 0x93a <joy_button_left>
    1512:	89 2b       	or	r24, r25
    1514:	e1 f3       	breq	.-8      	; 0x150e <endTwoPlayerGame+0x12>
    
    oled_meny_print();
    1516:	0e 94 a7 06 	call	0xd4e	; 0xd4e <oled_meny_print>
    151a:	08 95       	ret

0000151c <requestHighScore>:
#include <avr/io.h>
#include "CAN.h"
#include "score.h"


void requestHighScore() {
    151c:	cf 93       	push	r28
    151e:	df 93       	push	r29
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
    1524:	2b 97       	sbiw	r28, 0x0b	; 11
    1526:	0f b6       	in	r0, 0x3f	; 63
    1528:	f8 94       	cli
    152a:	de bf       	out	0x3e, r29	; 62
    152c:	0f be       	out	0x3f, r0	; 63
    152e:	cd bf       	out	0x3d, r28	; 61
	can_message_t msg;
	
	msg.id = SCORE_REQUEST_ID;
    1530:	84 e0       	ldi	r24, 0x04	; 4
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	9a 83       	std	Y+2, r25	; 0x02
    1536:	89 83       	std	Y+1, r24	; 0x01
	msg.length = 0;
    1538:	1b 82       	std	Y+3, r1	; 0x03
	
	can_message_send(&msg);
    153a:	ce 01       	movw	r24, r28
    153c:	01 96       	adiw	r24, 0x01	; 1
    153e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <can_message_send>
}
    1542:	2b 96       	adiw	r28, 0x0b	; 11
    1544:	0f b6       	in	r0, 0x3f	; 63
    1546:	f8 94       	cli
    1548:	de bf       	out	0x3e, r29	; 62
    154a:	0f be       	out	0x3f, r0	; 63
    154c:	cd bf       	out	0x3d, r28	; 61
    154e:	df 91       	pop	r29
    1550:	cf 91       	pop	r28
    1552:	08 95       	ret

00001554 <recieveHighScore>:

void recieveHighScore(int * arr, can_message_t * msg) {
    1554:	fc 01       	movw	r30, r24
    1556:	db 01       	movw	r26, r22
    
    for (int i = 0; i < 3; i++) {
        arr[i] = msg->data[i];
    1558:	13 96       	adiw	r26, 0x03	; 3
    155a:	8c 91       	ld	r24, X
    155c:	13 97       	sbiw	r26, 0x03	; 3
    155e:	99 27       	eor	r25, r25
    1560:	87 fd       	sbrc	r24, 7
    1562:	90 95       	com	r25
    1564:	91 83       	std	Z+1, r25	; 0x01
    1566:	80 83       	st	Z, r24
    1568:	14 96       	adiw	r26, 0x04	; 4
    156a:	8c 91       	ld	r24, X
    156c:	14 97       	sbiw	r26, 0x04	; 4
    156e:	99 27       	eor	r25, r25
    1570:	87 fd       	sbrc	r24, 7
    1572:	90 95       	com	r25
    1574:	93 83       	std	Z+3, r25	; 0x03
    1576:	82 83       	std	Z+2, r24	; 0x02
    1578:	15 96       	adiw	r26, 0x05	; 5
    157a:	8c 91       	ld	r24, X
    157c:	99 27       	eor	r25, r25
    157e:	87 fd       	sbrc	r24, 7
    1580:	90 95       	com	r25
    1582:	95 83       	std	Z+5, r25	; 0x05
    1584:	84 83       	std	Z+4, r24	; 0x04
    1586:	08 95       	ret

00001588 <playMusic>:
    }
}


void playMusic() {
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
    1590:	2b 97       	sbiw	r28, 0x0b	; 11
    1592:	0f b6       	in	r0, 0x3f	; 63
    1594:	f8 94       	cli
    1596:	de bf       	out	0x3e, r29	; 62
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	cd bf       	out	0x3d, r28	; 61
	
	can_message_t startMusic;
	startMusic.id = PLAY_MUSIC_ID;
    159c:	89 e0       	ldi	r24, 0x09	; 9
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	9a 83       	std	Y+2, r25	; 0x02
    15a2:	89 83       	std	Y+1, r24	; 0x01
	can_message_send(&startMusic);
    15a4:	ce 01       	movw	r24, r28
    15a6:	01 96       	adiw	r24, 0x01	; 1
    15a8:	0e 94 64 01 	call	0x2c8	; 0x2c8 <can_message_send>
	oled_clear_screen();
    15ac:	0e 94 da 05 	call	0xbb4	; 0xbb4 <oled_clear_screen>
	oled_set_line(2);
    15b0:	82 e0       	ldi	r24, 0x02	; 2
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	0e 94 d1 05 	call	0xba2	; 0xba2 <oled_set_line>
	oled_print_string("PLAYING MUSIC!");
    15b8:	8b e9       	ldi	r24, 0x9B	; 155
    15ba:	92 e0       	ldi	r25, 0x02	; 2
    15bc:	0e 94 98 06 	call	0xd30	; 0xd30 <oled_print_string>
	
}
    15c0:	2b 96       	adiw	r28, 0x0b	; 11
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	f8 94       	cli
    15c6:	de bf       	out	0x3e, r29	; 62
    15c8:	0f be       	out	0x3f, r0	; 63
    15ca:	cd bf       	out	0x3d, r28	; 61
    15cc:	df 91       	pop	r29
    15ce:	cf 91       	pop	r28
    15d0:	08 95       	ret

000015d2 <SPI_Init_Master>:
}
	
void SPI_Init_Master(void)
{
	/* Set MOSI and SCK and SS as output, all others input */
	DDRB |= (1<<DDB5)|(1<<DDB7)|(1<<DDB4);
    15d2:	87 b3       	in	r24, 0x17	; 23
    15d4:	80 6b       	ori	r24, 0xB0	; 176
    15d6:	87 bb       	out	0x17, r24	; 23
    
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    15d8:	81 e5       	ldi	r24, 0x51	; 81
    15da:	8d b9       	out	0x0d, r24	; 13
    15dc:	08 95       	ret

000015de <SPI_Send>:


void SPI_Send(char cData)
{
	/* Start transmission */
	SPDR = cData;
    15de:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while ( !(SPSR & (1<<SPIF)) );
    15e0:	77 9b       	sbis	0x0e, 7	; 14
    15e2:	fe cf       	rjmp	.-4      	; 0x15e0 <SPI_Send+0x2>
}
    15e4:	08 95       	ret

000015e6 <SPI_read>:


char SPI_read(void)
{
	SPDR = 0x00;
    15e6:	1f b8       	out	0x0f, r1	; 15
	while( !(SPSR & (1<<SPIF)) );
    15e8:	77 9b       	sbis	0x0e, 7	; 14
    15ea:	fe cf       	rjmp	.-4      	; 0x15e8 <SPI_read+0x2>
    
	return SPDR;
    15ec:	8f b1       	in	r24, 0x0f	; 15
}
    15ee:	08 95       	ret

000015f0 <sram_Init>:

#include "sram.h"


void sram_Init(){
    MCUCR = (1<<SRE);
    15f0:	80 e8       	ldi	r24, 0x80	; 128
    15f2:	85 bf       	out	0x35, r24	; 53
    SFIOR = (1<<XMM2);
    15f4:	80 e2       	ldi	r24, 0x20	; 32
    15f6:	80 bf       	out	0x30, r24	; 48
    15f8:	08 95       	ret

000015fa <SRAM_test>:
    uint16_t i, werrors, rerrors;
    werrors = 0;
    rerrors = 0;
    char testvalue;
    
    printf("Starting SRAM test...\r\n");
    15fa:	8a ea       	ldi	r24, 0xAA	; 170
    15fc:	92 e0       	ldi	r25, 0x02	; 2
    15fe:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <puts>
    1602:	e0 e0       	ldi	r30, 0x00	; 0
    1604:	f8 e1       	ldi	r31, 0x18	; 24
{
    // Start address for the SRAM
    volatile char *ext_ram = (char *) 0x1800;
    
    uint16_t i, werrors, rerrors;
    werrors = 0;
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	2e 2f       	mov	r18, r30
    160c:	20 95       	com	r18
    
    printf("Starting SRAM test...\r\n");
    
    for (i = 0; i < 0x800; i++) {
        testvalue = ~(i % 256);
        ext_ram[i] = testvalue;
    160e:	20 83       	st	Z, r18
        if (ext_ram[i] != testvalue) {
    1610:	30 81       	ld	r19, Z
    1612:	32 13       	cpse	r19, r18
            werrors++;
    1614:	01 96       	adiw	r24, 0x01	; 1
    1616:	31 96       	adiw	r30, 0x01	; 1
    rerrors = 0;
    char testvalue;
    
    printf("Starting SRAM test...\r\n");
    
    for (i = 0; i < 0x800; i++) {
    1618:	e1 15       	cp	r30, r1
    161a:	20 e2       	ldi	r18, 0x20	; 32
    161c:	f2 07       	cpc	r31, r18
    161e:	a9 f7       	brne	.-22     	; 0x160a <SRAM_test+0x10>
    1620:	e0 e0       	ldi	r30, 0x00	; 0
    1622:	f8 e1       	ldi	r31, 0x18	; 24
    1624:	20 e0       	ldi	r18, 0x00	; 0
    1626:	30 e0       	ldi	r19, 0x00	; 0
        }
    }
    
    for (i = 0; i < 0x800; i++) {
        testvalue = ~(i % 256);
        if (ext_ram[i] != testvalue) {
    1628:	40 81       	ld	r20, Z
    162a:	5e 2f       	mov	r21, r30
    162c:	50 95       	com	r21
    162e:	54 17       	cp	r21, r20
    1630:	11 f0       	breq	.+4      	; 0x1636 <SRAM_test+0x3c>
            rerrors++;
    1632:	2f 5f       	subi	r18, 0xFF	; 255
    1634:	3f 4f       	sbci	r19, 0xFF	; 255
    1636:	31 96       	adiw	r30, 0x01	; 1
        if (ext_ram[i] != testvalue) {
            werrors++;
        }
    }
    
    for (i = 0; i < 0x800; i++) {
    1638:	e1 15       	cp	r30, r1
    163a:	40 e2       	ldi	r20, 0x20	; 32
    163c:	f4 07       	cpc	r31, r20
    163e:	a1 f7       	brne	.-24     	; 0x1628 <SRAM_test+0x2e>
        if (ext_ram[i] != testvalue) {
            rerrors++;
        }
    }
    
    printf("SRAM test completed with %d errors in write phase and %d errors in read phase\r\n", werrors, rerrors);
    1640:	3f 93       	push	r19
    1642:	2f 93       	push	r18
    1644:	9f 93       	push	r25
    1646:	8f 93       	push	r24
    1648:	81 ec       	ldi	r24, 0xC1	; 193
    164a:	92 e0       	ldi	r25, 0x02	; 2
    164c:	9f 93       	push	r25
    164e:	8f 93       	push	r24
    1650:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <printf>
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	0f 90       	pop	r0
    165a:	0f 90       	pop	r0
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	08 95       	ret

00001662 <SRAM_test_return_errors>:
}

void SRAM_test_return_errors(int errors[])
{
    1662:	e0 e0       	ldi	r30, 0x00	; 0
    1664:	f8 e1       	ldi	r31, 0x18	; 24
    // Start address for the SRAM
    volatile char *ext_ram = (char *) 0x1800;
    
    uint16_t i, werrors, rerrors;
    werrors = 0;
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	4e 2f       	mov	r20, r30
    166c:	40 95       	com	r20
    rerrors = 0;
    char testvalue;
    
    for (i = 0; i < 0x800; i++) {
        testvalue = ~(i % 256);
        ext_ram[i] = testvalue;
    166e:	40 83       	st	Z, r20
        if (ext_ram[i] != testvalue) {
    1670:	50 81       	ld	r21, Z
    1672:	54 17       	cp	r21, r20
    1674:	11 f0       	breq	.+4      	; 0x167a <SRAM_test_return_errors+0x18>
            werrors++;
    1676:	2f 5f       	subi	r18, 0xFF	; 255
    1678:	3f 4f       	sbci	r19, 0xFF	; 255
    167a:	31 96       	adiw	r30, 0x01	; 1
    uint16_t i, werrors, rerrors;
    werrors = 0;
    rerrors = 0;
    char testvalue;
    
    for (i = 0; i < 0x800; i++) {
    167c:	e1 15       	cp	r30, r1
    167e:	40 e2       	ldi	r20, 0x20	; 32
    1680:	f4 07       	cpc	r31, r20
    1682:	99 f7       	brne	.-26     	; 0x166a <SRAM_test_return_errors+0x8>
    1684:	e0 e0       	ldi	r30, 0x00	; 0
    1686:	f8 e1       	ldi	r31, 0x18	; 24
    1688:	40 e0       	ldi	r20, 0x00	; 0
    168a:	50 e0       	ldi	r21, 0x00	; 0
        }
    }
    
    for (i = 0; i < 0x800; i++) {
        testvalue = ~(i % 256);
        if (ext_ram[i] != testvalue) {
    168c:	60 81       	ld	r22, Z
    168e:	7e 2f       	mov	r23, r30
    1690:	70 95       	com	r23
    1692:	76 17       	cp	r23, r22
    1694:	11 f0       	breq	.+4      	; 0x169a <SRAM_test_return_errors+0x38>
            rerrors++;
    1696:	4f 5f       	subi	r20, 0xFF	; 255
    1698:	5f 4f       	sbci	r21, 0xFF	; 255
    169a:	31 96       	adiw	r30, 0x01	; 1
        if (ext_ram[i] != testvalue) {
            werrors++;
        }
    }
    
    for (i = 0; i < 0x800; i++) {
    169c:	e1 15       	cp	r30, r1
    169e:	60 e2       	ldi	r22, 0x20	; 32
    16a0:	f6 07       	cpc	r31, r22
    16a2:	a1 f7       	brne	.-24     	; 0x168c <SRAM_test_return_errors+0x2a>
        if (ext_ram[i] != testvalue) {
            rerrors++;
        }
    }
    
    errors[0] = werrors;
    16a4:	fc 01       	movw	r30, r24
    16a6:	31 83       	std	Z+1, r19	; 0x01
    16a8:	20 83       	st	Z, r18
    errors[1] = rerrors;
    16aa:	53 83       	std	Z+3, r21	; 0x03
    16ac:	42 83       	std	Z+2, r20	; 0x02
    16ae:	08 95       	ret

000016b0 <USART_Transmit>:
}

void USART_Transmit( unsigned char data )
{
	// Vent paa tom transmit buffer
	while ( !( UCSR0A & (1<<UDRE0)) );
    16b0:	5d 9b       	sbis	0x0b, 5	; 11
    16b2:	fe cf       	rjmp	.-4      	; 0x16b0 <USART_Transmit>
	
	// Putter data i bufferm, sender
	UDR0 = data;
    16b4:	8c b9       	out	0x0c, r24	; 12
    16b6:	08 95       	ret

000016b8 <USART_Receive>:
}

unsigned char USART_Receive( void )
{
	// Venter paa at data skal mottas
	while ( !(UCSR0A & (1<<RXC0)) );
    16b8:	5f 9b       	sbis	0x0b, 7	; 11
    16ba:	fe cf       	rjmp	.-4      	; 0x16b8 <USART_Receive>
	
	// Returnerer data
	return UDR0;
    16bc:	8c b1       	in	r24, 0x0c	; 12
}
    16be:	08 95       	ret

000016c0 <USART_Init>:

#include "usart.h"

void USART_Init(unsigned int ubrr){
	
	DDRD |= (1<<PD1);
    16c0:	89 9a       	sbi	0x11, 1	; 17
	//Setter Baud Rate:
	UBRR0H = (unsigned char)(ubrr>>8);
    16c2:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
    16c4:	89 b9       	out	0x09, r24	; 9
	
	//Slaar paa reciever og transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    16c6:	88 e1       	ldi	r24, 0x18	; 24
    16c8:	8a b9       	out	0x0a, r24	; 10
	
	//Setter frame format; 8data
	UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
    16ca:	86 e8       	ldi	r24, 0x86	; 134
    16cc:	80 bd       	out	0x20, r24	; 32
	fdevopen(USART_Transmit, USART_Receive);
    16ce:	6c e5       	ldi	r22, 0x5C	; 92
    16d0:	7b e0       	ldi	r23, 0x0B	; 11
    16d2:	88 e5       	ldi	r24, 0x58	; 88
    16d4:	9b e0       	ldi	r25, 0x0B	; 11
    16d6:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <fdevopen>
    16da:	08 95       	ret

000016dc <__subsf3>:
    16dc:	50 58       	subi	r21, 0x80	; 128

000016de <__addsf3>:
    16de:	bb 27       	eor	r27, r27
    16e0:	aa 27       	eor	r26, r26
    16e2:	0e d0       	rcall	.+28     	; 0x1700 <__addsf3x>
    16e4:	4d c1       	rjmp	.+666    	; 0x1980 <__fp_round>
    16e6:	3e d1       	rcall	.+636    	; 0x1964 <__fp_pscA>
    16e8:	30 f0       	brcs	.+12     	; 0x16f6 <__addsf3+0x18>
    16ea:	43 d1       	rcall	.+646    	; 0x1972 <__fp_pscB>
    16ec:	20 f0       	brcs	.+8      	; 0x16f6 <__addsf3+0x18>
    16ee:	31 f4       	brne	.+12     	; 0x16fc <__addsf3+0x1e>
    16f0:	9f 3f       	cpi	r25, 0xFF	; 255
    16f2:	11 f4       	brne	.+4      	; 0x16f8 <__addsf3+0x1a>
    16f4:	1e f4       	brtc	.+6      	; 0x16fc <__addsf3+0x1e>
    16f6:	33 c1       	rjmp	.+614    	; 0x195e <__fp_nan>
    16f8:	0e f4       	brtc	.+2      	; 0x16fc <__addsf3+0x1e>
    16fa:	e0 95       	com	r30
    16fc:	e7 fb       	bst	r30, 7
    16fe:	29 c1       	rjmp	.+594    	; 0x1952 <__fp_inf>

00001700 <__addsf3x>:
    1700:	e9 2f       	mov	r30, r25
    1702:	4f d1       	rcall	.+670    	; 0x19a2 <__fp_split3>
    1704:	80 f3       	brcs	.-32     	; 0x16e6 <__addsf3+0x8>
    1706:	ba 17       	cp	r27, r26
    1708:	62 07       	cpc	r22, r18
    170a:	73 07       	cpc	r23, r19
    170c:	84 07       	cpc	r24, r20
    170e:	95 07       	cpc	r25, r21
    1710:	18 f0       	brcs	.+6      	; 0x1718 <__addsf3x+0x18>
    1712:	71 f4       	brne	.+28     	; 0x1730 <__addsf3x+0x30>
    1714:	9e f5       	brtc	.+102    	; 0x177c <__addsf3x+0x7c>
    1716:	67 c1       	rjmp	.+718    	; 0x19e6 <__fp_zero>
    1718:	0e f4       	brtc	.+2      	; 0x171c <__addsf3x+0x1c>
    171a:	e0 95       	com	r30
    171c:	0b 2e       	mov	r0, r27
    171e:	ba 2f       	mov	r27, r26
    1720:	a0 2d       	mov	r26, r0
    1722:	0b 01       	movw	r0, r22
    1724:	b9 01       	movw	r22, r18
    1726:	90 01       	movw	r18, r0
    1728:	0c 01       	movw	r0, r24
    172a:	ca 01       	movw	r24, r20
    172c:	a0 01       	movw	r20, r0
    172e:	11 24       	eor	r1, r1
    1730:	ff 27       	eor	r31, r31
    1732:	59 1b       	sub	r21, r25
    1734:	99 f0       	breq	.+38     	; 0x175c <__addsf3x+0x5c>
    1736:	59 3f       	cpi	r21, 0xF9	; 249
    1738:	50 f4       	brcc	.+20     	; 0x174e <__addsf3x+0x4e>
    173a:	50 3e       	cpi	r21, 0xE0	; 224
    173c:	68 f1       	brcs	.+90     	; 0x1798 <__addsf3x+0x98>
    173e:	1a 16       	cp	r1, r26
    1740:	f0 40       	sbci	r31, 0x00	; 0
    1742:	a2 2f       	mov	r26, r18
    1744:	23 2f       	mov	r18, r19
    1746:	34 2f       	mov	r19, r20
    1748:	44 27       	eor	r20, r20
    174a:	58 5f       	subi	r21, 0xF8	; 248
    174c:	f3 cf       	rjmp	.-26     	; 0x1734 <__addsf3x+0x34>
    174e:	46 95       	lsr	r20
    1750:	37 95       	ror	r19
    1752:	27 95       	ror	r18
    1754:	a7 95       	ror	r26
    1756:	f0 40       	sbci	r31, 0x00	; 0
    1758:	53 95       	inc	r21
    175a:	c9 f7       	brne	.-14     	; 0x174e <__addsf3x+0x4e>
    175c:	7e f4       	brtc	.+30     	; 0x177c <__addsf3x+0x7c>
    175e:	1f 16       	cp	r1, r31
    1760:	ba 0b       	sbc	r27, r26
    1762:	62 0b       	sbc	r22, r18
    1764:	73 0b       	sbc	r23, r19
    1766:	84 0b       	sbc	r24, r20
    1768:	ba f0       	brmi	.+46     	; 0x1798 <__addsf3x+0x98>
    176a:	91 50       	subi	r25, 0x01	; 1
    176c:	a1 f0       	breq	.+40     	; 0x1796 <__addsf3x+0x96>
    176e:	ff 0f       	add	r31, r31
    1770:	bb 1f       	adc	r27, r27
    1772:	66 1f       	adc	r22, r22
    1774:	77 1f       	adc	r23, r23
    1776:	88 1f       	adc	r24, r24
    1778:	c2 f7       	brpl	.-16     	; 0x176a <__addsf3x+0x6a>
    177a:	0e c0       	rjmp	.+28     	; 0x1798 <__addsf3x+0x98>
    177c:	ba 0f       	add	r27, r26
    177e:	62 1f       	adc	r22, r18
    1780:	73 1f       	adc	r23, r19
    1782:	84 1f       	adc	r24, r20
    1784:	48 f4       	brcc	.+18     	; 0x1798 <__addsf3x+0x98>
    1786:	87 95       	ror	r24
    1788:	77 95       	ror	r23
    178a:	67 95       	ror	r22
    178c:	b7 95       	ror	r27
    178e:	f7 95       	ror	r31
    1790:	9e 3f       	cpi	r25, 0xFE	; 254
    1792:	08 f0       	brcs	.+2      	; 0x1796 <__addsf3x+0x96>
    1794:	b3 cf       	rjmp	.-154    	; 0x16fc <__addsf3+0x1e>
    1796:	93 95       	inc	r25
    1798:	88 0f       	add	r24, r24
    179a:	08 f0       	brcs	.+2      	; 0x179e <__addsf3x+0x9e>
    179c:	99 27       	eor	r25, r25
    179e:	ee 0f       	add	r30, r30
    17a0:	97 95       	ror	r25
    17a2:	87 95       	ror	r24
    17a4:	08 95       	ret

000017a6 <__divsf3>:
    17a6:	0c d0       	rcall	.+24     	; 0x17c0 <__divsf3x>
    17a8:	eb c0       	rjmp	.+470    	; 0x1980 <__fp_round>
    17aa:	e3 d0       	rcall	.+454    	; 0x1972 <__fp_pscB>
    17ac:	40 f0       	brcs	.+16     	; 0x17be <__divsf3+0x18>
    17ae:	da d0       	rcall	.+436    	; 0x1964 <__fp_pscA>
    17b0:	30 f0       	brcs	.+12     	; 0x17be <__divsf3+0x18>
    17b2:	21 f4       	brne	.+8      	; 0x17bc <__divsf3+0x16>
    17b4:	5f 3f       	cpi	r21, 0xFF	; 255
    17b6:	19 f0       	breq	.+6      	; 0x17be <__divsf3+0x18>
    17b8:	cc c0       	rjmp	.+408    	; 0x1952 <__fp_inf>
    17ba:	51 11       	cpse	r21, r1
    17bc:	15 c1       	rjmp	.+554    	; 0x19e8 <__fp_szero>
    17be:	cf c0       	rjmp	.+414    	; 0x195e <__fp_nan>

000017c0 <__divsf3x>:
    17c0:	f0 d0       	rcall	.+480    	; 0x19a2 <__fp_split3>
    17c2:	98 f3       	brcs	.-26     	; 0x17aa <__divsf3+0x4>

000017c4 <__divsf3_pse>:
    17c4:	99 23       	and	r25, r25
    17c6:	c9 f3       	breq	.-14     	; 0x17ba <__divsf3+0x14>
    17c8:	55 23       	and	r21, r21
    17ca:	b1 f3       	breq	.-20     	; 0x17b8 <__divsf3+0x12>
    17cc:	95 1b       	sub	r25, r21
    17ce:	55 0b       	sbc	r21, r21
    17d0:	bb 27       	eor	r27, r27
    17d2:	aa 27       	eor	r26, r26
    17d4:	62 17       	cp	r22, r18
    17d6:	73 07       	cpc	r23, r19
    17d8:	84 07       	cpc	r24, r20
    17da:	38 f0       	brcs	.+14     	; 0x17ea <__divsf3_pse+0x26>
    17dc:	9f 5f       	subi	r25, 0xFF	; 255
    17de:	5f 4f       	sbci	r21, 0xFF	; 255
    17e0:	22 0f       	add	r18, r18
    17e2:	33 1f       	adc	r19, r19
    17e4:	44 1f       	adc	r20, r20
    17e6:	aa 1f       	adc	r26, r26
    17e8:	a9 f3       	breq	.-22     	; 0x17d4 <__divsf3_pse+0x10>
    17ea:	33 d0       	rcall	.+102    	; 0x1852 <__divsf3_pse+0x8e>
    17ec:	0e 2e       	mov	r0, r30
    17ee:	3a f0       	brmi	.+14     	; 0x17fe <__divsf3_pse+0x3a>
    17f0:	e0 e8       	ldi	r30, 0x80	; 128
    17f2:	30 d0       	rcall	.+96     	; 0x1854 <__divsf3_pse+0x90>
    17f4:	91 50       	subi	r25, 0x01	; 1
    17f6:	50 40       	sbci	r21, 0x00	; 0
    17f8:	e6 95       	lsr	r30
    17fa:	00 1c       	adc	r0, r0
    17fc:	ca f7       	brpl	.-14     	; 0x17f0 <__divsf3_pse+0x2c>
    17fe:	29 d0       	rcall	.+82     	; 0x1852 <__divsf3_pse+0x8e>
    1800:	fe 2f       	mov	r31, r30
    1802:	27 d0       	rcall	.+78     	; 0x1852 <__divsf3_pse+0x8e>
    1804:	66 0f       	add	r22, r22
    1806:	77 1f       	adc	r23, r23
    1808:	88 1f       	adc	r24, r24
    180a:	bb 1f       	adc	r27, r27
    180c:	26 17       	cp	r18, r22
    180e:	37 07       	cpc	r19, r23
    1810:	48 07       	cpc	r20, r24
    1812:	ab 07       	cpc	r26, r27
    1814:	b0 e8       	ldi	r27, 0x80	; 128
    1816:	09 f0       	breq	.+2      	; 0x181a <__divsf3_pse+0x56>
    1818:	bb 0b       	sbc	r27, r27
    181a:	80 2d       	mov	r24, r0
    181c:	bf 01       	movw	r22, r30
    181e:	ff 27       	eor	r31, r31
    1820:	93 58       	subi	r25, 0x83	; 131
    1822:	5f 4f       	sbci	r21, 0xFF	; 255
    1824:	2a f0       	brmi	.+10     	; 0x1830 <__divsf3_pse+0x6c>
    1826:	9e 3f       	cpi	r25, 0xFE	; 254
    1828:	51 05       	cpc	r21, r1
    182a:	68 f0       	brcs	.+26     	; 0x1846 <__divsf3_pse+0x82>
    182c:	92 c0       	rjmp	.+292    	; 0x1952 <__fp_inf>
    182e:	dc c0       	rjmp	.+440    	; 0x19e8 <__fp_szero>
    1830:	5f 3f       	cpi	r21, 0xFF	; 255
    1832:	ec f3       	brlt	.-6      	; 0x182e <__divsf3_pse+0x6a>
    1834:	98 3e       	cpi	r25, 0xE8	; 232
    1836:	dc f3       	brlt	.-10     	; 0x182e <__divsf3_pse+0x6a>
    1838:	86 95       	lsr	r24
    183a:	77 95       	ror	r23
    183c:	67 95       	ror	r22
    183e:	b7 95       	ror	r27
    1840:	f7 95       	ror	r31
    1842:	9f 5f       	subi	r25, 0xFF	; 255
    1844:	c9 f7       	brne	.-14     	; 0x1838 <__divsf3_pse+0x74>
    1846:	88 0f       	add	r24, r24
    1848:	91 1d       	adc	r25, r1
    184a:	96 95       	lsr	r25
    184c:	87 95       	ror	r24
    184e:	97 f9       	bld	r25, 7
    1850:	08 95       	ret
    1852:	e1 e0       	ldi	r30, 0x01	; 1
    1854:	66 0f       	add	r22, r22
    1856:	77 1f       	adc	r23, r23
    1858:	88 1f       	adc	r24, r24
    185a:	bb 1f       	adc	r27, r27
    185c:	62 17       	cp	r22, r18
    185e:	73 07       	cpc	r23, r19
    1860:	84 07       	cpc	r24, r20
    1862:	ba 07       	cpc	r27, r26
    1864:	20 f0       	brcs	.+8      	; 0x186e <__divsf3_pse+0xaa>
    1866:	62 1b       	sub	r22, r18
    1868:	73 0b       	sbc	r23, r19
    186a:	84 0b       	sbc	r24, r20
    186c:	ba 0b       	sbc	r27, r26
    186e:	ee 1f       	adc	r30, r30
    1870:	88 f7       	brcc	.-30     	; 0x1854 <__divsf3_pse+0x90>
    1872:	e0 95       	com	r30
    1874:	08 95       	ret

00001876 <__fixsfsi>:
    1876:	04 d0       	rcall	.+8      	; 0x1880 <__fixunssfsi>
    1878:	68 94       	set
    187a:	b1 11       	cpse	r27, r1
    187c:	b5 c0       	rjmp	.+362    	; 0x19e8 <__fp_szero>
    187e:	08 95       	ret

00001880 <__fixunssfsi>:
    1880:	98 d0       	rcall	.+304    	; 0x19b2 <__fp_splitA>
    1882:	88 f0       	brcs	.+34     	; 0x18a6 <__fixunssfsi+0x26>
    1884:	9f 57       	subi	r25, 0x7F	; 127
    1886:	90 f0       	brcs	.+36     	; 0x18ac <__fixunssfsi+0x2c>
    1888:	b9 2f       	mov	r27, r25
    188a:	99 27       	eor	r25, r25
    188c:	b7 51       	subi	r27, 0x17	; 23
    188e:	a0 f0       	brcs	.+40     	; 0x18b8 <__fixunssfsi+0x38>
    1890:	d1 f0       	breq	.+52     	; 0x18c6 <__fixunssfsi+0x46>
    1892:	66 0f       	add	r22, r22
    1894:	77 1f       	adc	r23, r23
    1896:	88 1f       	adc	r24, r24
    1898:	99 1f       	adc	r25, r25
    189a:	1a f0       	brmi	.+6      	; 0x18a2 <__fixunssfsi+0x22>
    189c:	ba 95       	dec	r27
    189e:	c9 f7       	brne	.-14     	; 0x1892 <__fixunssfsi+0x12>
    18a0:	12 c0       	rjmp	.+36     	; 0x18c6 <__fixunssfsi+0x46>
    18a2:	b1 30       	cpi	r27, 0x01	; 1
    18a4:	81 f0       	breq	.+32     	; 0x18c6 <__fixunssfsi+0x46>
    18a6:	9f d0       	rcall	.+318    	; 0x19e6 <__fp_zero>
    18a8:	b1 e0       	ldi	r27, 0x01	; 1
    18aa:	08 95       	ret
    18ac:	9c c0       	rjmp	.+312    	; 0x19e6 <__fp_zero>
    18ae:	67 2f       	mov	r22, r23
    18b0:	78 2f       	mov	r23, r24
    18b2:	88 27       	eor	r24, r24
    18b4:	b8 5f       	subi	r27, 0xF8	; 248
    18b6:	39 f0       	breq	.+14     	; 0x18c6 <__fixunssfsi+0x46>
    18b8:	b9 3f       	cpi	r27, 0xF9	; 249
    18ba:	cc f3       	brlt	.-14     	; 0x18ae <__fixunssfsi+0x2e>
    18bc:	86 95       	lsr	r24
    18be:	77 95       	ror	r23
    18c0:	67 95       	ror	r22
    18c2:	b3 95       	inc	r27
    18c4:	d9 f7       	brne	.-10     	; 0x18bc <__fixunssfsi+0x3c>
    18c6:	3e f4       	brtc	.+14     	; 0x18d6 <__fixunssfsi+0x56>
    18c8:	90 95       	com	r25
    18ca:	80 95       	com	r24
    18cc:	70 95       	com	r23
    18ce:	61 95       	neg	r22
    18d0:	7f 4f       	sbci	r23, 0xFF	; 255
    18d2:	8f 4f       	sbci	r24, 0xFF	; 255
    18d4:	9f 4f       	sbci	r25, 0xFF	; 255
    18d6:	08 95       	ret

000018d8 <__floatunsisf>:
    18d8:	e8 94       	clt
    18da:	09 c0       	rjmp	.+18     	; 0x18ee <__floatsisf+0x12>

000018dc <__floatsisf>:
    18dc:	97 fb       	bst	r25, 7
    18de:	3e f4       	brtc	.+14     	; 0x18ee <__floatsisf+0x12>
    18e0:	90 95       	com	r25
    18e2:	80 95       	com	r24
    18e4:	70 95       	com	r23
    18e6:	61 95       	neg	r22
    18e8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ea:	8f 4f       	sbci	r24, 0xFF	; 255
    18ec:	9f 4f       	sbci	r25, 0xFF	; 255
    18ee:	99 23       	and	r25, r25
    18f0:	a9 f0       	breq	.+42     	; 0x191c <__floatsisf+0x40>
    18f2:	f9 2f       	mov	r31, r25
    18f4:	96 e9       	ldi	r25, 0x96	; 150
    18f6:	bb 27       	eor	r27, r27
    18f8:	93 95       	inc	r25
    18fa:	f6 95       	lsr	r31
    18fc:	87 95       	ror	r24
    18fe:	77 95       	ror	r23
    1900:	67 95       	ror	r22
    1902:	b7 95       	ror	r27
    1904:	f1 11       	cpse	r31, r1
    1906:	f8 cf       	rjmp	.-16     	; 0x18f8 <__floatsisf+0x1c>
    1908:	fa f4       	brpl	.+62     	; 0x1948 <__floatsisf+0x6c>
    190a:	bb 0f       	add	r27, r27
    190c:	11 f4       	brne	.+4      	; 0x1912 <__floatsisf+0x36>
    190e:	60 ff       	sbrs	r22, 0
    1910:	1b c0       	rjmp	.+54     	; 0x1948 <__floatsisf+0x6c>
    1912:	6f 5f       	subi	r22, 0xFF	; 255
    1914:	7f 4f       	sbci	r23, 0xFF	; 255
    1916:	8f 4f       	sbci	r24, 0xFF	; 255
    1918:	9f 4f       	sbci	r25, 0xFF	; 255
    191a:	16 c0       	rjmp	.+44     	; 0x1948 <__floatsisf+0x6c>
    191c:	88 23       	and	r24, r24
    191e:	11 f0       	breq	.+4      	; 0x1924 <__floatsisf+0x48>
    1920:	96 e9       	ldi	r25, 0x96	; 150
    1922:	11 c0       	rjmp	.+34     	; 0x1946 <__floatsisf+0x6a>
    1924:	77 23       	and	r23, r23
    1926:	21 f0       	breq	.+8      	; 0x1930 <__floatsisf+0x54>
    1928:	9e e8       	ldi	r25, 0x8E	; 142
    192a:	87 2f       	mov	r24, r23
    192c:	76 2f       	mov	r23, r22
    192e:	05 c0       	rjmp	.+10     	; 0x193a <__floatsisf+0x5e>
    1930:	66 23       	and	r22, r22
    1932:	71 f0       	breq	.+28     	; 0x1950 <__floatsisf+0x74>
    1934:	96 e8       	ldi	r25, 0x86	; 134
    1936:	86 2f       	mov	r24, r22
    1938:	70 e0       	ldi	r23, 0x00	; 0
    193a:	60 e0       	ldi	r22, 0x00	; 0
    193c:	2a f0       	brmi	.+10     	; 0x1948 <__floatsisf+0x6c>
    193e:	9a 95       	dec	r25
    1940:	66 0f       	add	r22, r22
    1942:	77 1f       	adc	r23, r23
    1944:	88 1f       	adc	r24, r24
    1946:	da f7       	brpl	.-10     	; 0x193e <__floatsisf+0x62>
    1948:	88 0f       	add	r24, r24
    194a:	96 95       	lsr	r25
    194c:	87 95       	ror	r24
    194e:	97 f9       	bld	r25, 7
    1950:	08 95       	ret

00001952 <__fp_inf>:
    1952:	97 f9       	bld	r25, 7
    1954:	9f 67       	ori	r25, 0x7F	; 127
    1956:	80 e8       	ldi	r24, 0x80	; 128
    1958:	70 e0       	ldi	r23, 0x00	; 0
    195a:	60 e0       	ldi	r22, 0x00	; 0
    195c:	08 95       	ret

0000195e <__fp_nan>:
    195e:	9f ef       	ldi	r25, 0xFF	; 255
    1960:	80 ec       	ldi	r24, 0xC0	; 192
    1962:	08 95       	ret

00001964 <__fp_pscA>:
    1964:	00 24       	eor	r0, r0
    1966:	0a 94       	dec	r0
    1968:	16 16       	cp	r1, r22
    196a:	17 06       	cpc	r1, r23
    196c:	18 06       	cpc	r1, r24
    196e:	09 06       	cpc	r0, r25
    1970:	08 95       	ret

00001972 <__fp_pscB>:
    1972:	00 24       	eor	r0, r0
    1974:	0a 94       	dec	r0
    1976:	12 16       	cp	r1, r18
    1978:	13 06       	cpc	r1, r19
    197a:	14 06       	cpc	r1, r20
    197c:	05 06       	cpc	r0, r21
    197e:	08 95       	ret

00001980 <__fp_round>:
    1980:	09 2e       	mov	r0, r25
    1982:	03 94       	inc	r0
    1984:	00 0c       	add	r0, r0
    1986:	11 f4       	brne	.+4      	; 0x198c <__fp_round+0xc>
    1988:	88 23       	and	r24, r24
    198a:	52 f0       	brmi	.+20     	; 0x19a0 <__fp_round+0x20>
    198c:	bb 0f       	add	r27, r27
    198e:	40 f4       	brcc	.+16     	; 0x19a0 <__fp_round+0x20>
    1990:	bf 2b       	or	r27, r31
    1992:	11 f4       	brne	.+4      	; 0x1998 <__fp_round+0x18>
    1994:	60 ff       	sbrs	r22, 0
    1996:	04 c0       	rjmp	.+8      	; 0x19a0 <__fp_round+0x20>
    1998:	6f 5f       	subi	r22, 0xFF	; 255
    199a:	7f 4f       	sbci	r23, 0xFF	; 255
    199c:	8f 4f       	sbci	r24, 0xFF	; 255
    199e:	9f 4f       	sbci	r25, 0xFF	; 255
    19a0:	08 95       	ret

000019a2 <__fp_split3>:
    19a2:	57 fd       	sbrc	r21, 7
    19a4:	90 58       	subi	r25, 0x80	; 128
    19a6:	44 0f       	add	r20, r20
    19a8:	55 1f       	adc	r21, r21
    19aa:	59 f0       	breq	.+22     	; 0x19c2 <__fp_splitA+0x10>
    19ac:	5f 3f       	cpi	r21, 0xFF	; 255
    19ae:	71 f0       	breq	.+28     	; 0x19cc <__fp_splitA+0x1a>
    19b0:	47 95       	ror	r20

000019b2 <__fp_splitA>:
    19b2:	88 0f       	add	r24, r24
    19b4:	97 fb       	bst	r25, 7
    19b6:	99 1f       	adc	r25, r25
    19b8:	61 f0       	breq	.+24     	; 0x19d2 <__fp_splitA+0x20>
    19ba:	9f 3f       	cpi	r25, 0xFF	; 255
    19bc:	79 f0       	breq	.+30     	; 0x19dc <__fp_splitA+0x2a>
    19be:	87 95       	ror	r24
    19c0:	08 95       	ret
    19c2:	12 16       	cp	r1, r18
    19c4:	13 06       	cpc	r1, r19
    19c6:	14 06       	cpc	r1, r20
    19c8:	55 1f       	adc	r21, r21
    19ca:	f2 cf       	rjmp	.-28     	; 0x19b0 <__fp_split3+0xe>
    19cc:	46 95       	lsr	r20
    19ce:	f1 df       	rcall	.-30     	; 0x19b2 <__fp_splitA>
    19d0:	08 c0       	rjmp	.+16     	; 0x19e2 <__fp_splitA+0x30>
    19d2:	16 16       	cp	r1, r22
    19d4:	17 06       	cpc	r1, r23
    19d6:	18 06       	cpc	r1, r24
    19d8:	99 1f       	adc	r25, r25
    19da:	f1 cf       	rjmp	.-30     	; 0x19be <__fp_splitA+0xc>
    19dc:	86 95       	lsr	r24
    19de:	71 05       	cpc	r23, r1
    19e0:	61 05       	cpc	r22, r1
    19e2:	08 94       	sec
    19e4:	08 95       	ret

000019e6 <__fp_zero>:
    19e6:	e8 94       	clt

000019e8 <__fp_szero>:
    19e8:	bb 27       	eor	r27, r27
    19ea:	66 27       	eor	r22, r22
    19ec:	77 27       	eor	r23, r23
    19ee:	cb 01       	movw	r24, r22
    19f0:	97 f9       	bld	r25, 7
    19f2:	08 95       	ret

000019f4 <__mulsf3>:
    19f4:	0b d0       	rcall	.+22     	; 0x1a0c <__mulsf3x>
    19f6:	c4 cf       	rjmp	.-120    	; 0x1980 <__fp_round>
    19f8:	b5 df       	rcall	.-150    	; 0x1964 <__fp_pscA>
    19fa:	28 f0       	brcs	.+10     	; 0x1a06 <__mulsf3+0x12>
    19fc:	ba df       	rcall	.-140    	; 0x1972 <__fp_pscB>
    19fe:	18 f0       	brcs	.+6      	; 0x1a06 <__mulsf3+0x12>
    1a00:	95 23       	and	r25, r21
    1a02:	09 f0       	breq	.+2      	; 0x1a06 <__mulsf3+0x12>
    1a04:	a6 cf       	rjmp	.-180    	; 0x1952 <__fp_inf>
    1a06:	ab cf       	rjmp	.-170    	; 0x195e <__fp_nan>
    1a08:	11 24       	eor	r1, r1
    1a0a:	ee cf       	rjmp	.-36     	; 0x19e8 <__fp_szero>

00001a0c <__mulsf3x>:
    1a0c:	ca df       	rcall	.-108    	; 0x19a2 <__fp_split3>
    1a0e:	a0 f3       	brcs	.-24     	; 0x19f8 <__mulsf3+0x4>

00001a10 <__mulsf3_pse>:
    1a10:	95 9f       	mul	r25, r21
    1a12:	d1 f3       	breq	.-12     	; 0x1a08 <__mulsf3+0x14>
    1a14:	95 0f       	add	r25, r21
    1a16:	50 e0       	ldi	r21, 0x00	; 0
    1a18:	55 1f       	adc	r21, r21
    1a1a:	62 9f       	mul	r22, r18
    1a1c:	f0 01       	movw	r30, r0
    1a1e:	72 9f       	mul	r23, r18
    1a20:	bb 27       	eor	r27, r27
    1a22:	f0 0d       	add	r31, r0
    1a24:	b1 1d       	adc	r27, r1
    1a26:	63 9f       	mul	r22, r19
    1a28:	aa 27       	eor	r26, r26
    1a2a:	f0 0d       	add	r31, r0
    1a2c:	b1 1d       	adc	r27, r1
    1a2e:	aa 1f       	adc	r26, r26
    1a30:	64 9f       	mul	r22, r20
    1a32:	66 27       	eor	r22, r22
    1a34:	b0 0d       	add	r27, r0
    1a36:	a1 1d       	adc	r26, r1
    1a38:	66 1f       	adc	r22, r22
    1a3a:	82 9f       	mul	r24, r18
    1a3c:	22 27       	eor	r18, r18
    1a3e:	b0 0d       	add	r27, r0
    1a40:	a1 1d       	adc	r26, r1
    1a42:	62 1f       	adc	r22, r18
    1a44:	73 9f       	mul	r23, r19
    1a46:	b0 0d       	add	r27, r0
    1a48:	a1 1d       	adc	r26, r1
    1a4a:	62 1f       	adc	r22, r18
    1a4c:	83 9f       	mul	r24, r19
    1a4e:	a0 0d       	add	r26, r0
    1a50:	61 1d       	adc	r22, r1
    1a52:	22 1f       	adc	r18, r18
    1a54:	74 9f       	mul	r23, r20
    1a56:	33 27       	eor	r19, r19
    1a58:	a0 0d       	add	r26, r0
    1a5a:	61 1d       	adc	r22, r1
    1a5c:	23 1f       	adc	r18, r19
    1a5e:	84 9f       	mul	r24, r20
    1a60:	60 0d       	add	r22, r0
    1a62:	21 1d       	adc	r18, r1
    1a64:	82 2f       	mov	r24, r18
    1a66:	76 2f       	mov	r23, r22
    1a68:	6a 2f       	mov	r22, r26
    1a6a:	11 24       	eor	r1, r1
    1a6c:	9f 57       	subi	r25, 0x7F	; 127
    1a6e:	50 40       	sbci	r21, 0x00	; 0
    1a70:	8a f0       	brmi	.+34     	; 0x1a94 <__mulsf3_pse+0x84>
    1a72:	e1 f0       	breq	.+56     	; 0x1aac <__mulsf3_pse+0x9c>
    1a74:	88 23       	and	r24, r24
    1a76:	4a f0       	brmi	.+18     	; 0x1a8a <__mulsf3_pse+0x7a>
    1a78:	ee 0f       	add	r30, r30
    1a7a:	ff 1f       	adc	r31, r31
    1a7c:	bb 1f       	adc	r27, r27
    1a7e:	66 1f       	adc	r22, r22
    1a80:	77 1f       	adc	r23, r23
    1a82:	88 1f       	adc	r24, r24
    1a84:	91 50       	subi	r25, 0x01	; 1
    1a86:	50 40       	sbci	r21, 0x00	; 0
    1a88:	a9 f7       	brne	.-22     	; 0x1a74 <__mulsf3_pse+0x64>
    1a8a:	9e 3f       	cpi	r25, 0xFE	; 254
    1a8c:	51 05       	cpc	r21, r1
    1a8e:	70 f0       	brcs	.+28     	; 0x1aac <__mulsf3_pse+0x9c>
    1a90:	60 cf       	rjmp	.-320    	; 0x1952 <__fp_inf>
    1a92:	aa cf       	rjmp	.-172    	; 0x19e8 <__fp_szero>
    1a94:	5f 3f       	cpi	r21, 0xFF	; 255
    1a96:	ec f3       	brlt	.-6      	; 0x1a92 <__mulsf3_pse+0x82>
    1a98:	98 3e       	cpi	r25, 0xE8	; 232
    1a9a:	dc f3       	brlt	.-10     	; 0x1a92 <__mulsf3_pse+0x82>
    1a9c:	86 95       	lsr	r24
    1a9e:	77 95       	ror	r23
    1aa0:	67 95       	ror	r22
    1aa2:	b7 95       	ror	r27
    1aa4:	f7 95       	ror	r31
    1aa6:	e7 95       	ror	r30
    1aa8:	9f 5f       	subi	r25, 0xFF	; 255
    1aaa:	c1 f7       	brne	.-16     	; 0x1a9c <__mulsf3_pse+0x8c>
    1aac:	fe 2b       	or	r31, r30
    1aae:	88 0f       	add	r24, r24
    1ab0:	91 1d       	adc	r25, r1
    1ab2:	96 95       	lsr	r25
    1ab4:	87 95       	ror	r24
    1ab6:	97 f9       	bld	r25, 7
    1ab8:	08 95       	ret

00001aba <itoa>:
    1aba:	45 32       	cpi	r20, 0x25	; 37
    1abc:	51 05       	cpc	r21, r1
    1abe:	20 f4       	brcc	.+8      	; 0x1ac8 <itoa+0xe>
    1ac0:	42 30       	cpi	r20, 0x02	; 2
    1ac2:	10 f0       	brcs	.+4      	; 0x1ac8 <itoa+0xe>
    1ac4:	0c 94 68 0d 	jmp	0x1ad0	; 0x1ad0 <__itoa_ncheck>
    1ac8:	fb 01       	movw	r30, r22
    1aca:	10 82       	st	Z, r1
    1acc:	cb 01       	movw	r24, r22
    1ace:	08 95       	ret

00001ad0 <__itoa_ncheck>:
    1ad0:	bb 27       	eor	r27, r27
    1ad2:	4a 30       	cpi	r20, 0x0A	; 10
    1ad4:	31 f4       	brne	.+12     	; 0x1ae2 <__itoa_ncheck+0x12>
    1ad6:	99 23       	and	r25, r25
    1ad8:	22 f4       	brpl	.+8      	; 0x1ae2 <__itoa_ncheck+0x12>
    1ada:	bd e2       	ldi	r27, 0x2D	; 45
    1adc:	90 95       	com	r25
    1ade:	81 95       	neg	r24
    1ae0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae2:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__utoa_common>

00001ae6 <__utoa_ncheck>:
    1ae6:	bb 27       	eor	r27, r27

00001ae8 <__utoa_common>:
    1ae8:	fb 01       	movw	r30, r22
    1aea:	55 27       	eor	r21, r21
    1aec:	aa 27       	eor	r26, r26
    1aee:	88 0f       	add	r24, r24
    1af0:	99 1f       	adc	r25, r25
    1af2:	aa 1f       	adc	r26, r26
    1af4:	a4 17       	cp	r26, r20
    1af6:	10 f0       	brcs	.+4      	; 0x1afc <__utoa_common+0x14>
    1af8:	a4 1b       	sub	r26, r20
    1afa:	83 95       	inc	r24
    1afc:	50 51       	subi	r21, 0x10	; 16
    1afe:	b9 f7       	brne	.-18     	; 0x1aee <__utoa_common+0x6>
    1b00:	a0 5d       	subi	r26, 0xD0	; 208
    1b02:	aa 33       	cpi	r26, 0x3A	; 58
    1b04:	08 f0       	brcs	.+2      	; 0x1b08 <__utoa_common+0x20>
    1b06:	a9 5d       	subi	r26, 0xD9	; 217
    1b08:	a1 93       	st	Z+, r26
    1b0a:	00 97       	sbiw	r24, 0x00	; 0
    1b0c:	79 f7       	brne	.-34     	; 0x1aec <__utoa_common+0x4>
    1b0e:	b1 11       	cpse	r27, r1
    1b10:	b1 93       	st	Z+, r27
    1b12:	11 92       	st	Z+, r1
    1b14:	cb 01       	movw	r24, r22
    1b16:	0c 94 4b 11 	jmp	0x2296	; 0x2296 <strrev>

00001b1a <fdevopen>:
    1b1a:	0f 93       	push	r16
    1b1c:	1f 93       	push	r17
    1b1e:	cf 93       	push	r28
    1b20:	df 93       	push	r29
    1b22:	ec 01       	movw	r28, r24
    1b24:	8b 01       	movw	r16, r22
    1b26:	00 97       	sbiw	r24, 0x00	; 0
    1b28:	31 f4       	brne	.+12     	; 0x1b36 <fdevopen+0x1c>
    1b2a:	61 15       	cp	r22, r1
    1b2c:	71 05       	cpc	r23, r1
    1b2e:	19 f4       	brne	.+6      	; 0x1b36 <fdevopen+0x1c>
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	38 c0       	rjmp	.+112    	; 0x1ba6 <fdevopen+0x8c>
    1b36:	6e e0       	ldi	r22, 0x0E	; 14
    1b38:	70 e0       	ldi	r23, 0x00	; 0
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <calloc>
    1b42:	fc 01       	movw	r30, r24
    1b44:	00 97       	sbiw	r24, 0x00	; 0
    1b46:	a1 f3       	breq	.-24     	; 0x1b30 <fdevopen+0x16>
    1b48:	80 e8       	ldi	r24, 0x80	; 128
    1b4a:	83 83       	std	Z+3, r24	; 0x03
    1b4c:	01 15       	cp	r16, r1
    1b4e:	11 05       	cpc	r17, r1
    1b50:	71 f0       	breq	.+28     	; 0x1b6e <fdevopen+0x54>
    1b52:	13 87       	std	Z+11, r17	; 0x0b
    1b54:	02 87       	std	Z+10, r16	; 0x0a
    1b56:	81 e8       	ldi	r24, 0x81	; 129
    1b58:	83 83       	std	Z+3, r24	; 0x03
    1b5a:	80 91 41 03 	lds	r24, 0x0341
    1b5e:	90 91 42 03 	lds	r25, 0x0342
    1b62:	89 2b       	or	r24, r25
    1b64:	21 f4       	brne	.+8      	; 0x1b6e <fdevopen+0x54>
    1b66:	f0 93 42 03 	sts	0x0342, r31
    1b6a:	e0 93 41 03 	sts	0x0341, r30
    1b6e:	20 97       	sbiw	r28, 0x00	; 0
    1b70:	c9 f0       	breq	.+50     	; 0x1ba4 <fdevopen+0x8a>
    1b72:	d1 87       	std	Z+9, r29	; 0x09
    1b74:	c0 87       	std	Z+8, r28	; 0x08
    1b76:	83 81       	ldd	r24, Z+3	; 0x03
    1b78:	82 60       	ori	r24, 0x02	; 2
    1b7a:	83 83       	std	Z+3, r24	; 0x03
    1b7c:	80 91 43 03 	lds	r24, 0x0343
    1b80:	90 91 44 03 	lds	r25, 0x0344
    1b84:	89 2b       	or	r24, r25
    1b86:	71 f4       	brne	.+28     	; 0x1ba4 <fdevopen+0x8a>
    1b88:	f0 93 44 03 	sts	0x0344, r31
    1b8c:	e0 93 43 03 	sts	0x0343, r30
    1b90:	80 91 45 03 	lds	r24, 0x0345
    1b94:	90 91 46 03 	lds	r25, 0x0346
    1b98:	89 2b       	or	r24, r25
    1b9a:	21 f4       	brne	.+8      	; 0x1ba4 <fdevopen+0x8a>
    1b9c:	f0 93 46 03 	sts	0x0346, r31
    1ba0:	e0 93 45 03 	sts	0x0345, r30
    1ba4:	cf 01       	movw	r24, r30
    1ba6:	df 91       	pop	r29
    1ba8:	cf 91       	pop	r28
    1baa:	1f 91       	pop	r17
    1bac:	0f 91       	pop	r16
    1bae:	08 95       	ret

00001bb0 <printf>:
    1bb0:	a0 e0       	ldi	r26, 0x00	; 0
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	ee ed       	ldi	r30, 0xDE	; 222
    1bb6:	fd e0       	ldi	r31, 0x0D	; 13
    1bb8:	0c 94 fb 11 	jmp	0x23f6	; 0x23f6 <__prologue_saves__+0x20>
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	35 96       	adiw	r30, 0x05	; 5
    1bc0:	61 91       	ld	r22, Z+
    1bc2:	71 91       	ld	r23, Z+
    1bc4:	af 01       	movw	r20, r30
    1bc6:	80 91 43 03 	lds	r24, 0x0343
    1bca:	90 91 44 03 	lds	r25, 0x0344
    1bce:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <vfprintf>
    1bd2:	e2 e0       	ldi	r30, 0x02	; 2
    1bd4:	0c 94 17 12 	jmp	0x242e	; 0x242e <__epilogue_restores__+0x20>

00001bd8 <puts>:
    1bd8:	0f 93       	push	r16
    1bda:	1f 93       	push	r17
    1bdc:	cf 93       	push	r28
    1bde:	df 93       	push	r29
    1be0:	e0 91 43 03 	lds	r30, 0x0343
    1be4:	f0 91 44 03 	lds	r31, 0x0344
    1be8:	23 81       	ldd	r18, Z+3	; 0x03
    1bea:	21 ff       	sbrs	r18, 1
    1bec:	1b c0       	rjmp	.+54     	; 0x1c24 <puts+0x4c>
    1bee:	ec 01       	movw	r28, r24
    1bf0:	00 e0       	ldi	r16, 0x00	; 0
    1bf2:	10 e0       	ldi	r17, 0x00	; 0
    1bf4:	89 91       	ld	r24, Y+
    1bf6:	60 91 43 03 	lds	r22, 0x0343
    1bfa:	70 91 44 03 	lds	r23, 0x0344
    1bfe:	db 01       	movw	r26, r22
    1c00:	18 96       	adiw	r26, 0x08	; 8
    1c02:	ed 91       	ld	r30, X+
    1c04:	fc 91       	ld	r31, X
    1c06:	19 97       	sbiw	r26, 0x09	; 9
    1c08:	88 23       	and	r24, r24
    1c0a:	31 f0       	breq	.+12     	; 0x1c18 <puts+0x40>
    1c0c:	09 95       	icall
    1c0e:	89 2b       	or	r24, r25
    1c10:	89 f3       	breq	.-30     	; 0x1bf4 <puts+0x1c>
    1c12:	0f ef       	ldi	r16, 0xFF	; 255
    1c14:	1f ef       	ldi	r17, 0xFF	; 255
    1c16:	ee cf       	rjmp	.-36     	; 0x1bf4 <puts+0x1c>
    1c18:	8a e0       	ldi	r24, 0x0A	; 10
    1c1a:	09 95       	icall
    1c1c:	89 2b       	or	r24, r25
    1c1e:	11 f4       	brne	.+4      	; 0x1c24 <puts+0x4c>
    1c20:	c8 01       	movw	r24, r16
    1c22:	02 c0       	rjmp	.+4      	; 0x1c28 <puts+0x50>
    1c24:	8f ef       	ldi	r24, 0xFF	; 255
    1c26:	9f ef       	ldi	r25, 0xFF	; 255
    1c28:	df 91       	pop	r29
    1c2a:	cf 91       	pop	r28
    1c2c:	1f 91       	pop	r17
    1c2e:	0f 91       	pop	r16
    1c30:	08 95       	ret

00001c32 <vfprintf>:
    1c32:	ac e0       	ldi	r26, 0x0C	; 12
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	ef e1       	ldi	r30, 0x1F	; 31
    1c38:	fe e0       	ldi	r31, 0x0E	; 14
    1c3a:	0c 94 eb 11 	jmp	0x23d6	; 0x23d6 <__prologue_saves__>
    1c3e:	7c 01       	movw	r14, r24
    1c40:	6b 01       	movw	r12, r22
    1c42:	8a 01       	movw	r16, r20
    1c44:	fc 01       	movw	r30, r24
    1c46:	17 82       	std	Z+7, r1	; 0x07
    1c48:	16 82       	std	Z+6, r1	; 0x06
    1c4a:	83 81       	ldd	r24, Z+3	; 0x03
    1c4c:	81 ff       	sbrs	r24, 1
    1c4e:	bd c1       	rjmp	.+890    	; 0x1fca <vfprintf+0x398>
    1c50:	ce 01       	movw	r24, r28
    1c52:	01 96       	adiw	r24, 0x01	; 1
    1c54:	4c 01       	movw	r8, r24
    1c56:	f7 01       	movw	r30, r14
    1c58:	93 81       	ldd	r25, Z+3	; 0x03
    1c5a:	f6 01       	movw	r30, r12
    1c5c:	93 fd       	sbrc	r25, 3
    1c5e:	85 91       	lpm	r24, Z+
    1c60:	93 ff       	sbrs	r25, 3
    1c62:	81 91       	ld	r24, Z+
    1c64:	6f 01       	movw	r12, r30
    1c66:	88 23       	and	r24, r24
    1c68:	09 f4       	brne	.+2      	; 0x1c6c <vfprintf+0x3a>
    1c6a:	ab c1       	rjmp	.+854    	; 0x1fc2 <vfprintf+0x390>
    1c6c:	85 32       	cpi	r24, 0x25	; 37
    1c6e:	39 f4       	brne	.+14     	; 0x1c7e <vfprintf+0x4c>
    1c70:	93 fd       	sbrc	r25, 3
    1c72:	85 91       	lpm	r24, Z+
    1c74:	93 ff       	sbrs	r25, 3
    1c76:	81 91       	ld	r24, Z+
    1c78:	6f 01       	movw	r12, r30
    1c7a:	85 32       	cpi	r24, 0x25	; 37
    1c7c:	29 f4       	brne	.+10     	; 0x1c88 <vfprintf+0x56>
    1c7e:	b7 01       	movw	r22, r14
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <fputc>
    1c86:	e7 cf       	rjmp	.-50     	; 0x1c56 <vfprintf+0x24>
    1c88:	51 2c       	mov	r5, r1
    1c8a:	31 2c       	mov	r3, r1
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
    1c8e:	20 32       	cpi	r18, 0x20	; 32
    1c90:	a0 f4       	brcc	.+40     	; 0x1cba <vfprintf+0x88>
    1c92:	8b 32       	cpi	r24, 0x2B	; 43
    1c94:	69 f0       	breq	.+26     	; 0x1cb0 <vfprintf+0x7e>
    1c96:	30 f4       	brcc	.+12     	; 0x1ca4 <vfprintf+0x72>
    1c98:	80 32       	cpi	r24, 0x20	; 32
    1c9a:	59 f0       	breq	.+22     	; 0x1cb2 <vfprintf+0x80>
    1c9c:	83 32       	cpi	r24, 0x23	; 35
    1c9e:	69 f4       	brne	.+26     	; 0x1cba <vfprintf+0x88>
    1ca0:	20 61       	ori	r18, 0x10	; 16
    1ca2:	2c c0       	rjmp	.+88     	; 0x1cfc <vfprintf+0xca>
    1ca4:	8d 32       	cpi	r24, 0x2D	; 45
    1ca6:	39 f0       	breq	.+14     	; 0x1cb6 <vfprintf+0x84>
    1ca8:	80 33       	cpi	r24, 0x30	; 48
    1caa:	39 f4       	brne	.+14     	; 0x1cba <vfprintf+0x88>
    1cac:	21 60       	ori	r18, 0x01	; 1
    1cae:	26 c0       	rjmp	.+76     	; 0x1cfc <vfprintf+0xca>
    1cb0:	22 60       	ori	r18, 0x02	; 2
    1cb2:	24 60       	ori	r18, 0x04	; 4
    1cb4:	23 c0       	rjmp	.+70     	; 0x1cfc <vfprintf+0xca>
    1cb6:	28 60       	ori	r18, 0x08	; 8
    1cb8:	21 c0       	rjmp	.+66     	; 0x1cfc <vfprintf+0xca>
    1cba:	27 fd       	sbrc	r18, 7
    1cbc:	27 c0       	rjmp	.+78     	; 0x1d0c <vfprintf+0xda>
    1cbe:	30 ed       	ldi	r19, 0xD0	; 208
    1cc0:	38 0f       	add	r19, r24
    1cc2:	3a 30       	cpi	r19, 0x0A	; 10
    1cc4:	78 f4       	brcc	.+30     	; 0x1ce4 <vfprintf+0xb2>
    1cc6:	26 ff       	sbrs	r18, 6
    1cc8:	06 c0       	rjmp	.+12     	; 0x1cd6 <vfprintf+0xa4>
    1cca:	fa e0       	ldi	r31, 0x0A	; 10
    1ccc:	5f 9e       	mul	r5, r31
    1cce:	30 0d       	add	r19, r0
    1cd0:	11 24       	eor	r1, r1
    1cd2:	53 2e       	mov	r5, r19
    1cd4:	13 c0       	rjmp	.+38     	; 0x1cfc <vfprintf+0xca>
    1cd6:	8a e0       	ldi	r24, 0x0A	; 10
    1cd8:	38 9e       	mul	r3, r24
    1cda:	30 0d       	add	r19, r0
    1cdc:	11 24       	eor	r1, r1
    1cde:	33 2e       	mov	r3, r19
    1ce0:	20 62       	ori	r18, 0x20	; 32
    1ce2:	0c c0       	rjmp	.+24     	; 0x1cfc <vfprintf+0xca>
    1ce4:	8e 32       	cpi	r24, 0x2E	; 46
    1ce6:	21 f4       	brne	.+8      	; 0x1cf0 <vfprintf+0xbe>
    1ce8:	26 fd       	sbrc	r18, 6
    1cea:	6b c1       	rjmp	.+726    	; 0x1fc2 <vfprintf+0x390>
    1cec:	20 64       	ori	r18, 0x40	; 64
    1cee:	06 c0       	rjmp	.+12     	; 0x1cfc <vfprintf+0xca>
    1cf0:	8c 36       	cpi	r24, 0x6C	; 108
    1cf2:	11 f4       	brne	.+4      	; 0x1cf8 <vfprintf+0xc6>
    1cf4:	20 68       	ori	r18, 0x80	; 128
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <vfprintf+0xca>
    1cf8:	88 36       	cpi	r24, 0x68	; 104
    1cfa:	41 f4       	brne	.+16     	; 0x1d0c <vfprintf+0xda>
    1cfc:	f6 01       	movw	r30, r12
    1cfe:	93 fd       	sbrc	r25, 3
    1d00:	85 91       	lpm	r24, Z+
    1d02:	93 ff       	sbrs	r25, 3
    1d04:	81 91       	ld	r24, Z+
    1d06:	6f 01       	movw	r12, r30
    1d08:	81 11       	cpse	r24, r1
    1d0a:	c1 cf       	rjmp	.-126    	; 0x1c8e <vfprintf+0x5c>
    1d0c:	98 2f       	mov	r25, r24
    1d0e:	9f 7d       	andi	r25, 0xDF	; 223
    1d10:	95 54       	subi	r25, 0x45	; 69
    1d12:	93 30       	cpi	r25, 0x03	; 3
    1d14:	28 f4       	brcc	.+10     	; 0x1d20 <vfprintf+0xee>
    1d16:	0c 5f       	subi	r16, 0xFC	; 252
    1d18:	1f 4f       	sbci	r17, 0xFF	; 255
    1d1a:	ff e3       	ldi	r31, 0x3F	; 63
    1d1c:	f9 83       	std	Y+1, r31	; 0x01
    1d1e:	0d c0       	rjmp	.+26     	; 0x1d3a <vfprintf+0x108>
    1d20:	83 36       	cpi	r24, 0x63	; 99
    1d22:	31 f0       	breq	.+12     	; 0x1d30 <vfprintf+0xfe>
    1d24:	83 37       	cpi	r24, 0x73	; 115
    1d26:	71 f0       	breq	.+28     	; 0x1d44 <vfprintf+0x112>
    1d28:	83 35       	cpi	r24, 0x53	; 83
    1d2a:	09 f0       	breq	.+2      	; 0x1d2e <vfprintf+0xfc>
    1d2c:	5b c0       	rjmp	.+182    	; 0x1de4 <vfprintf+0x1b2>
    1d2e:	22 c0       	rjmp	.+68     	; 0x1d74 <vfprintf+0x142>
    1d30:	f8 01       	movw	r30, r16
    1d32:	80 81       	ld	r24, Z
    1d34:	89 83       	std	Y+1, r24	; 0x01
    1d36:	0e 5f       	subi	r16, 0xFE	; 254
    1d38:	1f 4f       	sbci	r17, 0xFF	; 255
    1d3a:	44 24       	eor	r4, r4
    1d3c:	43 94       	inc	r4
    1d3e:	51 2c       	mov	r5, r1
    1d40:	54 01       	movw	r10, r8
    1d42:	15 c0       	rjmp	.+42     	; 0x1d6e <vfprintf+0x13c>
    1d44:	38 01       	movw	r6, r16
    1d46:	f2 e0       	ldi	r31, 0x02	; 2
    1d48:	6f 0e       	add	r6, r31
    1d4a:	71 1c       	adc	r7, r1
    1d4c:	f8 01       	movw	r30, r16
    1d4e:	a0 80       	ld	r10, Z
    1d50:	b1 80       	ldd	r11, Z+1	; 0x01
    1d52:	26 ff       	sbrs	r18, 6
    1d54:	03 c0       	rjmp	.+6      	; 0x1d5c <vfprintf+0x12a>
    1d56:	65 2d       	mov	r22, r5
    1d58:	70 e0       	ldi	r23, 0x00	; 0
    1d5a:	02 c0       	rjmp	.+4      	; 0x1d60 <vfprintf+0x12e>
    1d5c:	6f ef       	ldi	r22, 0xFF	; 255
    1d5e:	7f ef       	ldi	r23, 0xFF	; 255
    1d60:	c5 01       	movw	r24, r10
    1d62:	2c 87       	std	Y+12, r18	; 0x0c
    1d64:	0e 94 40 11 	call	0x2280	; 0x2280 <strnlen>
    1d68:	2c 01       	movw	r4, r24
    1d6a:	83 01       	movw	r16, r6
    1d6c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d6e:	2f 77       	andi	r18, 0x7F	; 127
    1d70:	22 2e       	mov	r2, r18
    1d72:	17 c0       	rjmp	.+46     	; 0x1da2 <vfprintf+0x170>
    1d74:	38 01       	movw	r6, r16
    1d76:	f2 e0       	ldi	r31, 0x02	; 2
    1d78:	6f 0e       	add	r6, r31
    1d7a:	71 1c       	adc	r7, r1
    1d7c:	f8 01       	movw	r30, r16
    1d7e:	a0 80       	ld	r10, Z
    1d80:	b1 80       	ldd	r11, Z+1	; 0x01
    1d82:	26 ff       	sbrs	r18, 6
    1d84:	03 c0       	rjmp	.+6      	; 0x1d8c <vfprintf+0x15a>
    1d86:	65 2d       	mov	r22, r5
    1d88:	70 e0       	ldi	r23, 0x00	; 0
    1d8a:	02 c0       	rjmp	.+4      	; 0x1d90 <vfprintf+0x15e>
    1d8c:	6f ef       	ldi	r22, 0xFF	; 255
    1d8e:	7f ef       	ldi	r23, 0xFF	; 255
    1d90:	c5 01       	movw	r24, r10
    1d92:	2c 87       	std	Y+12, r18	; 0x0c
    1d94:	0e 94 2e 11 	call	0x225c	; 0x225c <strnlen_P>
    1d98:	2c 01       	movw	r4, r24
    1d9a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d9c:	20 68       	ori	r18, 0x80	; 128
    1d9e:	22 2e       	mov	r2, r18
    1da0:	83 01       	movw	r16, r6
    1da2:	23 fc       	sbrc	r2, 3
    1da4:	1b c0       	rjmp	.+54     	; 0x1ddc <vfprintf+0x1aa>
    1da6:	83 2d       	mov	r24, r3
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	48 16       	cp	r4, r24
    1dac:	59 06       	cpc	r5, r25
    1dae:	b0 f4       	brcc	.+44     	; 0x1ddc <vfprintf+0x1aa>
    1db0:	b7 01       	movw	r22, r14
    1db2:	80 e2       	ldi	r24, 0x20	; 32
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <fputc>
    1dba:	3a 94       	dec	r3
    1dbc:	f4 cf       	rjmp	.-24     	; 0x1da6 <vfprintf+0x174>
    1dbe:	f5 01       	movw	r30, r10
    1dc0:	27 fc       	sbrc	r2, 7
    1dc2:	85 91       	lpm	r24, Z+
    1dc4:	27 fe       	sbrs	r2, 7
    1dc6:	81 91       	ld	r24, Z+
    1dc8:	5f 01       	movw	r10, r30
    1dca:	b7 01       	movw	r22, r14
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <fputc>
    1dd2:	31 10       	cpse	r3, r1
    1dd4:	3a 94       	dec	r3
    1dd6:	f1 e0       	ldi	r31, 0x01	; 1
    1dd8:	4f 1a       	sub	r4, r31
    1dda:	51 08       	sbc	r5, r1
    1ddc:	41 14       	cp	r4, r1
    1dde:	51 04       	cpc	r5, r1
    1de0:	71 f7       	brne	.-36     	; 0x1dbe <vfprintf+0x18c>
    1de2:	e5 c0       	rjmp	.+458    	; 0x1fae <vfprintf+0x37c>
    1de4:	84 36       	cpi	r24, 0x64	; 100
    1de6:	11 f0       	breq	.+4      	; 0x1dec <vfprintf+0x1ba>
    1de8:	89 36       	cpi	r24, 0x69	; 105
    1dea:	39 f5       	brne	.+78     	; 0x1e3a <vfprintf+0x208>
    1dec:	f8 01       	movw	r30, r16
    1dee:	27 ff       	sbrs	r18, 7
    1df0:	07 c0       	rjmp	.+14     	; 0x1e00 <vfprintf+0x1ce>
    1df2:	60 81       	ld	r22, Z
    1df4:	71 81       	ldd	r23, Z+1	; 0x01
    1df6:	82 81       	ldd	r24, Z+2	; 0x02
    1df8:	93 81       	ldd	r25, Z+3	; 0x03
    1dfa:	0c 5f       	subi	r16, 0xFC	; 252
    1dfc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dfe:	08 c0       	rjmp	.+16     	; 0x1e10 <vfprintf+0x1de>
    1e00:	60 81       	ld	r22, Z
    1e02:	71 81       	ldd	r23, Z+1	; 0x01
    1e04:	88 27       	eor	r24, r24
    1e06:	77 fd       	sbrc	r23, 7
    1e08:	80 95       	com	r24
    1e0a:	98 2f       	mov	r25, r24
    1e0c:	0e 5f       	subi	r16, 0xFE	; 254
    1e0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e10:	2f 76       	andi	r18, 0x6F	; 111
    1e12:	b2 2e       	mov	r11, r18
    1e14:	97 ff       	sbrs	r25, 7
    1e16:	09 c0       	rjmp	.+18     	; 0x1e2a <vfprintf+0x1f8>
    1e18:	90 95       	com	r25
    1e1a:	80 95       	com	r24
    1e1c:	70 95       	com	r23
    1e1e:	61 95       	neg	r22
    1e20:	7f 4f       	sbci	r23, 0xFF	; 255
    1e22:	8f 4f       	sbci	r24, 0xFF	; 255
    1e24:	9f 4f       	sbci	r25, 0xFF	; 255
    1e26:	20 68       	ori	r18, 0x80	; 128
    1e28:	b2 2e       	mov	r11, r18
    1e2a:	2a e0       	ldi	r18, 0x0A	; 10
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	a4 01       	movw	r20, r8
    1e30:	0e 94 8d 11 	call	0x231a	; 0x231a <__ultoa_invert>
    1e34:	a8 2e       	mov	r10, r24
    1e36:	a8 18       	sub	r10, r8
    1e38:	44 c0       	rjmp	.+136    	; 0x1ec2 <vfprintf+0x290>
    1e3a:	85 37       	cpi	r24, 0x75	; 117
    1e3c:	29 f4       	brne	.+10     	; 0x1e48 <vfprintf+0x216>
    1e3e:	2f 7e       	andi	r18, 0xEF	; 239
    1e40:	b2 2e       	mov	r11, r18
    1e42:	2a e0       	ldi	r18, 0x0A	; 10
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	25 c0       	rjmp	.+74     	; 0x1e92 <vfprintf+0x260>
    1e48:	f2 2f       	mov	r31, r18
    1e4a:	f9 7f       	andi	r31, 0xF9	; 249
    1e4c:	bf 2e       	mov	r11, r31
    1e4e:	8f 36       	cpi	r24, 0x6F	; 111
    1e50:	c1 f0       	breq	.+48     	; 0x1e82 <vfprintf+0x250>
    1e52:	18 f4       	brcc	.+6      	; 0x1e5a <vfprintf+0x228>
    1e54:	88 35       	cpi	r24, 0x58	; 88
    1e56:	79 f0       	breq	.+30     	; 0x1e76 <vfprintf+0x244>
    1e58:	b4 c0       	rjmp	.+360    	; 0x1fc2 <vfprintf+0x390>
    1e5a:	80 37       	cpi	r24, 0x70	; 112
    1e5c:	19 f0       	breq	.+6      	; 0x1e64 <vfprintf+0x232>
    1e5e:	88 37       	cpi	r24, 0x78	; 120
    1e60:	21 f0       	breq	.+8      	; 0x1e6a <vfprintf+0x238>
    1e62:	af c0       	rjmp	.+350    	; 0x1fc2 <vfprintf+0x390>
    1e64:	2f 2f       	mov	r18, r31
    1e66:	20 61       	ori	r18, 0x10	; 16
    1e68:	b2 2e       	mov	r11, r18
    1e6a:	b4 fe       	sbrs	r11, 4
    1e6c:	0d c0       	rjmp	.+26     	; 0x1e88 <vfprintf+0x256>
    1e6e:	8b 2d       	mov	r24, r11
    1e70:	84 60       	ori	r24, 0x04	; 4
    1e72:	b8 2e       	mov	r11, r24
    1e74:	09 c0       	rjmp	.+18     	; 0x1e88 <vfprintf+0x256>
    1e76:	24 ff       	sbrs	r18, 4
    1e78:	0a c0       	rjmp	.+20     	; 0x1e8e <vfprintf+0x25c>
    1e7a:	9f 2f       	mov	r25, r31
    1e7c:	96 60       	ori	r25, 0x06	; 6
    1e7e:	b9 2e       	mov	r11, r25
    1e80:	06 c0       	rjmp	.+12     	; 0x1e8e <vfprintf+0x25c>
    1e82:	28 e0       	ldi	r18, 0x08	; 8
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	05 c0       	rjmp	.+10     	; 0x1e92 <vfprintf+0x260>
    1e88:	20 e1       	ldi	r18, 0x10	; 16
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	02 c0       	rjmp	.+4      	; 0x1e92 <vfprintf+0x260>
    1e8e:	20 e1       	ldi	r18, 0x10	; 16
    1e90:	32 e0       	ldi	r19, 0x02	; 2
    1e92:	f8 01       	movw	r30, r16
    1e94:	b7 fe       	sbrs	r11, 7
    1e96:	07 c0       	rjmp	.+14     	; 0x1ea6 <vfprintf+0x274>
    1e98:	60 81       	ld	r22, Z
    1e9a:	71 81       	ldd	r23, Z+1	; 0x01
    1e9c:	82 81       	ldd	r24, Z+2	; 0x02
    1e9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ea0:	0c 5f       	subi	r16, 0xFC	; 252
    1ea2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea4:	06 c0       	rjmp	.+12     	; 0x1eb2 <vfprintf+0x280>
    1ea6:	60 81       	ld	r22, Z
    1ea8:	71 81       	ldd	r23, Z+1	; 0x01
    1eaa:	80 e0       	ldi	r24, 0x00	; 0
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	0e 5f       	subi	r16, 0xFE	; 254
    1eb0:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb2:	a4 01       	movw	r20, r8
    1eb4:	0e 94 8d 11 	call	0x231a	; 0x231a <__ultoa_invert>
    1eb8:	a8 2e       	mov	r10, r24
    1eba:	a8 18       	sub	r10, r8
    1ebc:	fb 2d       	mov	r31, r11
    1ebe:	ff 77       	andi	r31, 0x7F	; 127
    1ec0:	bf 2e       	mov	r11, r31
    1ec2:	b6 fe       	sbrs	r11, 6
    1ec4:	0b c0       	rjmp	.+22     	; 0x1edc <vfprintf+0x2aa>
    1ec6:	2b 2d       	mov	r18, r11
    1ec8:	2e 7f       	andi	r18, 0xFE	; 254
    1eca:	a5 14       	cp	r10, r5
    1ecc:	50 f4       	brcc	.+20     	; 0x1ee2 <vfprintf+0x2b0>
    1ece:	b4 fe       	sbrs	r11, 4
    1ed0:	0a c0       	rjmp	.+20     	; 0x1ee6 <vfprintf+0x2b4>
    1ed2:	b2 fc       	sbrc	r11, 2
    1ed4:	08 c0       	rjmp	.+16     	; 0x1ee6 <vfprintf+0x2b4>
    1ed6:	2b 2d       	mov	r18, r11
    1ed8:	2e 7e       	andi	r18, 0xEE	; 238
    1eda:	05 c0       	rjmp	.+10     	; 0x1ee6 <vfprintf+0x2b4>
    1edc:	7a 2c       	mov	r7, r10
    1ede:	2b 2d       	mov	r18, r11
    1ee0:	03 c0       	rjmp	.+6      	; 0x1ee8 <vfprintf+0x2b6>
    1ee2:	7a 2c       	mov	r7, r10
    1ee4:	01 c0       	rjmp	.+2      	; 0x1ee8 <vfprintf+0x2b6>
    1ee6:	75 2c       	mov	r7, r5
    1ee8:	24 ff       	sbrs	r18, 4
    1eea:	0d c0       	rjmp	.+26     	; 0x1f06 <vfprintf+0x2d4>
    1eec:	fe 01       	movw	r30, r28
    1eee:	ea 0d       	add	r30, r10
    1ef0:	f1 1d       	adc	r31, r1
    1ef2:	80 81       	ld	r24, Z
    1ef4:	80 33       	cpi	r24, 0x30	; 48
    1ef6:	11 f4       	brne	.+4      	; 0x1efc <vfprintf+0x2ca>
    1ef8:	29 7e       	andi	r18, 0xE9	; 233
    1efa:	09 c0       	rjmp	.+18     	; 0x1f0e <vfprintf+0x2dc>
    1efc:	22 ff       	sbrs	r18, 2
    1efe:	06 c0       	rjmp	.+12     	; 0x1f0c <vfprintf+0x2da>
    1f00:	73 94       	inc	r7
    1f02:	73 94       	inc	r7
    1f04:	04 c0       	rjmp	.+8      	; 0x1f0e <vfprintf+0x2dc>
    1f06:	82 2f       	mov	r24, r18
    1f08:	86 78       	andi	r24, 0x86	; 134
    1f0a:	09 f0       	breq	.+2      	; 0x1f0e <vfprintf+0x2dc>
    1f0c:	73 94       	inc	r7
    1f0e:	23 fd       	sbrc	r18, 3
    1f10:	13 c0       	rjmp	.+38     	; 0x1f38 <vfprintf+0x306>
    1f12:	20 ff       	sbrs	r18, 0
    1f14:	06 c0       	rjmp	.+12     	; 0x1f22 <vfprintf+0x2f0>
    1f16:	5a 2c       	mov	r5, r10
    1f18:	73 14       	cp	r7, r3
    1f1a:	18 f4       	brcc	.+6      	; 0x1f22 <vfprintf+0x2f0>
    1f1c:	53 0c       	add	r5, r3
    1f1e:	57 18       	sub	r5, r7
    1f20:	73 2c       	mov	r7, r3
    1f22:	73 14       	cp	r7, r3
    1f24:	68 f4       	brcc	.+26     	; 0x1f40 <vfprintf+0x30e>
    1f26:	b7 01       	movw	r22, r14
    1f28:	80 e2       	ldi	r24, 0x20	; 32
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	2c 87       	std	Y+12, r18	; 0x0c
    1f2e:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <fputc>
    1f32:	73 94       	inc	r7
    1f34:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f36:	f5 cf       	rjmp	.-22     	; 0x1f22 <vfprintf+0x2f0>
    1f38:	73 14       	cp	r7, r3
    1f3a:	10 f4       	brcc	.+4      	; 0x1f40 <vfprintf+0x30e>
    1f3c:	37 18       	sub	r3, r7
    1f3e:	01 c0       	rjmp	.+2      	; 0x1f42 <vfprintf+0x310>
    1f40:	31 2c       	mov	r3, r1
    1f42:	24 ff       	sbrs	r18, 4
    1f44:	12 c0       	rjmp	.+36     	; 0x1f6a <vfprintf+0x338>
    1f46:	b7 01       	movw	r22, r14
    1f48:	80 e3       	ldi	r24, 0x30	; 48
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	2c 87       	std	Y+12, r18	; 0x0c
    1f4e:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <fputc>
    1f52:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f54:	22 ff       	sbrs	r18, 2
    1f56:	17 c0       	rjmp	.+46     	; 0x1f86 <vfprintf+0x354>
    1f58:	21 ff       	sbrs	r18, 1
    1f5a:	03 c0       	rjmp	.+6      	; 0x1f62 <vfprintf+0x330>
    1f5c:	88 e5       	ldi	r24, 0x58	; 88
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	02 c0       	rjmp	.+4      	; 0x1f66 <vfprintf+0x334>
    1f62:	88 e7       	ldi	r24, 0x78	; 120
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	b7 01       	movw	r22, r14
    1f68:	0c c0       	rjmp	.+24     	; 0x1f82 <vfprintf+0x350>
    1f6a:	82 2f       	mov	r24, r18
    1f6c:	86 78       	andi	r24, 0x86	; 134
    1f6e:	59 f0       	breq	.+22     	; 0x1f86 <vfprintf+0x354>
    1f70:	21 fd       	sbrc	r18, 1
    1f72:	02 c0       	rjmp	.+4      	; 0x1f78 <vfprintf+0x346>
    1f74:	80 e2       	ldi	r24, 0x20	; 32
    1f76:	01 c0       	rjmp	.+2      	; 0x1f7a <vfprintf+0x348>
    1f78:	8b e2       	ldi	r24, 0x2B	; 43
    1f7a:	27 fd       	sbrc	r18, 7
    1f7c:	8d e2       	ldi	r24, 0x2D	; 45
    1f7e:	b7 01       	movw	r22, r14
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <fputc>
    1f86:	a5 14       	cp	r10, r5
    1f88:	38 f4       	brcc	.+14     	; 0x1f98 <vfprintf+0x366>
    1f8a:	b7 01       	movw	r22, r14
    1f8c:	80 e3       	ldi	r24, 0x30	; 48
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <fputc>
    1f94:	5a 94       	dec	r5
    1f96:	f7 cf       	rjmp	.-18     	; 0x1f86 <vfprintf+0x354>
    1f98:	aa 94       	dec	r10
    1f9a:	f4 01       	movw	r30, r8
    1f9c:	ea 0d       	add	r30, r10
    1f9e:	f1 1d       	adc	r31, r1
    1fa0:	80 81       	ld	r24, Z
    1fa2:	b7 01       	movw	r22, r14
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <fputc>
    1faa:	a1 10       	cpse	r10, r1
    1fac:	f5 cf       	rjmp	.-22     	; 0x1f98 <vfprintf+0x366>
    1fae:	33 20       	and	r3, r3
    1fb0:	09 f4       	brne	.+2      	; 0x1fb4 <vfprintf+0x382>
    1fb2:	51 ce       	rjmp	.-862    	; 0x1c56 <vfprintf+0x24>
    1fb4:	b7 01       	movw	r22, r14
    1fb6:	80 e2       	ldi	r24, 0x20	; 32
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <fputc>
    1fbe:	3a 94       	dec	r3
    1fc0:	f6 cf       	rjmp	.-20     	; 0x1fae <vfprintf+0x37c>
    1fc2:	f7 01       	movw	r30, r14
    1fc4:	86 81       	ldd	r24, Z+6	; 0x06
    1fc6:	97 81       	ldd	r25, Z+7	; 0x07
    1fc8:	02 c0       	rjmp	.+4      	; 0x1fce <vfprintf+0x39c>
    1fca:	8f ef       	ldi	r24, 0xFF	; 255
    1fcc:	9f ef       	ldi	r25, 0xFF	; 255
    1fce:	2c 96       	adiw	r28, 0x0c	; 12
    1fd0:	e2 e1       	ldi	r30, 0x12	; 18
    1fd2:	0c 94 07 12 	jmp	0x240e	; 0x240e <__epilogue_restores__>

00001fd6 <calloc>:
    1fd6:	0f 93       	push	r16
    1fd8:	1f 93       	push	r17
    1fda:	cf 93       	push	r28
    1fdc:	df 93       	push	r29
    1fde:	86 9f       	mul	r24, r22
    1fe0:	80 01       	movw	r16, r0
    1fe2:	87 9f       	mul	r24, r23
    1fe4:	10 0d       	add	r17, r0
    1fe6:	96 9f       	mul	r25, r22
    1fe8:	10 0d       	add	r17, r0
    1fea:	11 24       	eor	r1, r1
    1fec:	c8 01       	movw	r24, r16
    1fee:	0e 94 07 10 	call	0x200e	; 0x200e <malloc>
    1ff2:	ec 01       	movw	r28, r24
    1ff4:	00 97       	sbiw	r24, 0x00	; 0
    1ff6:	29 f0       	breq	.+10     	; 0x2002 <calloc+0x2c>
    1ff8:	a8 01       	movw	r20, r16
    1ffa:	60 e0       	ldi	r22, 0x00	; 0
    1ffc:	70 e0       	ldi	r23, 0x00	; 0
    1ffe:	0e 94 39 11 	call	0x2272	; 0x2272 <memset>
    2002:	ce 01       	movw	r24, r28
    2004:	df 91       	pop	r29
    2006:	cf 91       	pop	r28
    2008:	1f 91       	pop	r17
    200a:	0f 91       	pop	r16
    200c:	08 95       	ret

0000200e <malloc>:
    200e:	cf 93       	push	r28
    2010:	df 93       	push	r29
    2012:	82 30       	cpi	r24, 0x02	; 2
    2014:	91 05       	cpc	r25, r1
    2016:	10 f4       	brcc	.+4      	; 0x201c <malloc+0xe>
    2018:	82 e0       	ldi	r24, 0x02	; 2
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	e0 91 49 03 	lds	r30, 0x0349
    2020:	f0 91 4a 03 	lds	r31, 0x034A
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	a0 e0       	ldi	r26, 0x00	; 0
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	30 97       	sbiw	r30, 0x00	; 0
    202e:	39 f1       	breq	.+78     	; 0x207e <malloc+0x70>
    2030:	40 81       	ld	r20, Z
    2032:	51 81       	ldd	r21, Z+1	; 0x01
    2034:	48 17       	cp	r20, r24
    2036:	59 07       	cpc	r21, r25
    2038:	b8 f0       	brcs	.+46     	; 0x2068 <malloc+0x5a>
    203a:	48 17       	cp	r20, r24
    203c:	59 07       	cpc	r21, r25
    203e:	71 f4       	brne	.+28     	; 0x205c <malloc+0x4e>
    2040:	82 81       	ldd	r24, Z+2	; 0x02
    2042:	93 81       	ldd	r25, Z+3	; 0x03
    2044:	10 97       	sbiw	r26, 0x00	; 0
    2046:	29 f0       	breq	.+10     	; 0x2052 <malloc+0x44>
    2048:	13 96       	adiw	r26, 0x03	; 3
    204a:	9c 93       	st	X, r25
    204c:	8e 93       	st	-X, r24
    204e:	12 97       	sbiw	r26, 0x02	; 2
    2050:	2c c0       	rjmp	.+88     	; 0x20aa <malloc+0x9c>
    2052:	90 93 4a 03 	sts	0x034A, r25
    2056:	80 93 49 03 	sts	0x0349, r24
    205a:	27 c0       	rjmp	.+78     	; 0x20aa <malloc+0x9c>
    205c:	21 15       	cp	r18, r1
    205e:	31 05       	cpc	r19, r1
    2060:	31 f0       	breq	.+12     	; 0x206e <malloc+0x60>
    2062:	42 17       	cp	r20, r18
    2064:	53 07       	cpc	r21, r19
    2066:	18 f0       	brcs	.+6      	; 0x206e <malloc+0x60>
    2068:	a9 01       	movw	r20, r18
    206a:	db 01       	movw	r26, r22
    206c:	01 c0       	rjmp	.+2      	; 0x2070 <malloc+0x62>
    206e:	ef 01       	movw	r28, r30
    2070:	9a 01       	movw	r18, r20
    2072:	bd 01       	movw	r22, r26
    2074:	df 01       	movw	r26, r30
    2076:	02 80       	ldd	r0, Z+2	; 0x02
    2078:	f3 81       	ldd	r31, Z+3	; 0x03
    207a:	e0 2d       	mov	r30, r0
    207c:	d7 cf       	rjmp	.-82     	; 0x202c <malloc+0x1e>
    207e:	21 15       	cp	r18, r1
    2080:	31 05       	cpc	r19, r1
    2082:	f9 f0       	breq	.+62     	; 0x20c2 <malloc+0xb4>
    2084:	28 1b       	sub	r18, r24
    2086:	39 0b       	sbc	r19, r25
    2088:	24 30       	cpi	r18, 0x04	; 4
    208a:	31 05       	cpc	r19, r1
    208c:	80 f4       	brcc	.+32     	; 0x20ae <malloc+0xa0>
    208e:	8a 81       	ldd	r24, Y+2	; 0x02
    2090:	9b 81       	ldd	r25, Y+3	; 0x03
    2092:	61 15       	cp	r22, r1
    2094:	71 05       	cpc	r23, r1
    2096:	21 f0       	breq	.+8      	; 0x20a0 <malloc+0x92>
    2098:	fb 01       	movw	r30, r22
    209a:	93 83       	std	Z+3, r25	; 0x03
    209c:	82 83       	std	Z+2, r24	; 0x02
    209e:	04 c0       	rjmp	.+8      	; 0x20a8 <malloc+0x9a>
    20a0:	90 93 4a 03 	sts	0x034A, r25
    20a4:	80 93 49 03 	sts	0x0349, r24
    20a8:	fe 01       	movw	r30, r28
    20aa:	32 96       	adiw	r30, 0x02	; 2
    20ac:	44 c0       	rjmp	.+136    	; 0x2136 <malloc+0x128>
    20ae:	fe 01       	movw	r30, r28
    20b0:	e2 0f       	add	r30, r18
    20b2:	f3 1f       	adc	r31, r19
    20b4:	81 93       	st	Z+, r24
    20b6:	91 93       	st	Z+, r25
    20b8:	22 50       	subi	r18, 0x02	; 2
    20ba:	31 09       	sbc	r19, r1
    20bc:	39 83       	std	Y+1, r19	; 0x01
    20be:	28 83       	st	Y, r18
    20c0:	3a c0       	rjmp	.+116    	; 0x2136 <malloc+0x128>
    20c2:	20 91 47 03 	lds	r18, 0x0347
    20c6:	30 91 48 03 	lds	r19, 0x0348
    20ca:	23 2b       	or	r18, r19
    20cc:	41 f4       	brne	.+16     	; 0x20de <malloc+0xd0>
    20ce:	20 91 02 01 	lds	r18, 0x0102
    20d2:	30 91 03 01 	lds	r19, 0x0103
    20d6:	30 93 48 03 	sts	0x0348, r19
    20da:	20 93 47 03 	sts	0x0347, r18
    20de:	20 91 00 01 	lds	r18, 0x0100
    20e2:	30 91 01 01 	lds	r19, 0x0101
    20e6:	21 15       	cp	r18, r1
    20e8:	31 05       	cpc	r19, r1
    20ea:	41 f4       	brne	.+16     	; 0x20fc <malloc+0xee>
    20ec:	2d b7       	in	r18, 0x3d	; 61
    20ee:	3e b7       	in	r19, 0x3e	; 62
    20f0:	40 91 04 01 	lds	r20, 0x0104
    20f4:	50 91 05 01 	lds	r21, 0x0105
    20f8:	24 1b       	sub	r18, r20
    20fa:	35 0b       	sbc	r19, r21
    20fc:	e0 91 47 03 	lds	r30, 0x0347
    2100:	f0 91 48 03 	lds	r31, 0x0348
    2104:	e2 17       	cp	r30, r18
    2106:	f3 07       	cpc	r31, r19
    2108:	a0 f4       	brcc	.+40     	; 0x2132 <malloc+0x124>
    210a:	2e 1b       	sub	r18, r30
    210c:	3f 0b       	sbc	r19, r31
    210e:	28 17       	cp	r18, r24
    2110:	39 07       	cpc	r19, r25
    2112:	78 f0       	brcs	.+30     	; 0x2132 <malloc+0x124>
    2114:	ac 01       	movw	r20, r24
    2116:	4e 5f       	subi	r20, 0xFE	; 254
    2118:	5f 4f       	sbci	r21, 0xFF	; 255
    211a:	24 17       	cp	r18, r20
    211c:	35 07       	cpc	r19, r21
    211e:	48 f0       	brcs	.+18     	; 0x2132 <malloc+0x124>
    2120:	4e 0f       	add	r20, r30
    2122:	5f 1f       	adc	r21, r31
    2124:	50 93 48 03 	sts	0x0348, r21
    2128:	40 93 47 03 	sts	0x0347, r20
    212c:	81 93       	st	Z+, r24
    212e:	91 93       	st	Z+, r25
    2130:	02 c0       	rjmp	.+4      	; 0x2136 <malloc+0x128>
    2132:	e0 e0       	ldi	r30, 0x00	; 0
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	cf 01       	movw	r24, r30
    2138:	df 91       	pop	r29
    213a:	cf 91       	pop	r28
    213c:	08 95       	ret

0000213e <free>:
    213e:	cf 93       	push	r28
    2140:	df 93       	push	r29
    2142:	00 97       	sbiw	r24, 0x00	; 0
    2144:	09 f4       	brne	.+2      	; 0x2148 <free+0xa>
    2146:	87 c0       	rjmp	.+270    	; 0x2256 <free+0x118>
    2148:	fc 01       	movw	r30, r24
    214a:	32 97       	sbiw	r30, 0x02	; 2
    214c:	13 82       	std	Z+3, r1	; 0x03
    214e:	12 82       	std	Z+2, r1	; 0x02
    2150:	c0 91 49 03 	lds	r28, 0x0349
    2154:	d0 91 4a 03 	lds	r29, 0x034A
    2158:	20 97       	sbiw	r28, 0x00	; 0
    215a:	81 f4       	brne	.+32     	; 0x217c <free+0x3e>
    215c:	20 81       	ld	r18, Z
    215e:	31 81       	ldd	r19, Z+1	; 0x01
    2160:	28 0f       	add	r18, r24
    2162:	39 1f       	adc	r19, r25
    2164:	80 91 47 03 	lds	r24, 0x0347
    2168:	90 91 48 03 	lds	r25, 0x0348
    216c:	82 17       	cp	r24, r18
    216e:	93 07       	cpc	r25, r19
    2170:	79 f5       	brne	.+94     	; 0x21d0 <free+0x92>
    2172:	f0 93 48 03 	sts	0x0348, r31
    2176:	e0 93 47 03 	sts	0x0347, r30
    217a:	6d c0       	rjmp	.+218    	; 0x2256 <free+0x118>
    217c:	de 01       	movw	r26, r28
    217e:	20 e0       	ldi	r18, 0x00	; 0
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	ae 17       	cp	r26, r30
    2184:	bf 07       	cpc	r27, r31
    2186:	50 f4       	brcc	.+20     	; 0x219c <free+0x5e>
    2188:	12 96       	adiw	r26, 0x02	; 2
    218a:	4d 91       	ld	r20, X+
    218c:	5c 91       	ld	r21, X
    218e:	13 97       	sbiw	r26, 0x03	; 3
    2190:	9d 01       	movw	r18, r26
    2192:	41 15       	cp	r20, r1
    2194:	51 05       	cpc	r21, r1
    2196:	09 f1       	breq	.+66     	; 0x21da <free+0x9c>
    2198:	da 01       	movw	r26, r20
    219a:	f3 cf       	rjmp	.-26     	; 0x2182 <free+0x44>
    219c:	b3 83       	std	Z+3, r27	; 0x03
    219e:	a2 83       	std	Z+2, r26	; 0x02
    21a0:	40 81       	ld	r20, Z
    21a2:	51 81       	ldd	r21, Z+1	; 0x01
    21a4:	84 0f       	add	r24, r20
    21a6:	95 1f       	adc	r25, r21
    21a8:	8a 17       	cp	r24, r26
    21aa:	9b 07       	cpc	r25, r27
    21ac:	71 f4       	brne	.+28     	; 0x21ca <free+0x8c>
    21ae:	8d 91       	ld	r24, X+
    21b0:	9c 91       	ld	r25, X
    21b2:	11 97       	sbiw	r26, 0x01	; 1
    21b4:	84 0f       	add	r24, r20
    21b6:	95 1f       	adc	r25, r21
    21b8:	02 96       	adiw	r24, 0x02	; 2
    21ba:	91 83       	std	Z+1, r25	; 0x01
    21bc:	80 83       	st	Z, r24
    21be:	12 96       	adiw	r26, 0x02	; 2
    21c0:	8d 91       	ld	r24, X+
    21c2:	9c 91       	ld	r25, X
    21c4:	13 97       	sbiw	r26, 0x03	; 3
    21c6:	93 83       	std	Z+3, r25	; 0x03
    21c8:	82 83       	std	Z+2, r24	; 0x02
    21ca:	21 15       	cp	r18, r1
    21cc:	31 05       	cpc	r19, r1
    21ce:	29 f4       	brne	.+10     	; 0x21da <free+0x9c>
    21d0:	f0 93 4a 03 	sts	0x034A, r31
    21d4:	e0 93 49 03 	sts	0x0349, r30
    21d8:	3e c0       	rjmp	.+124    	; 0x2256 <free+0x118>
    21da:	d9 01       	movw	r26, r18
    21dc:	13 96       	adiw	r26, 0x03	; 3
    21de:	fc 93       	st	X, r31
    21e0:	ee 93       	st	-X, r30
    21e2:	12 97       	sbiw	r26, 0x02	; 2
    21e4:	4d 91       	ld	r20, X+
    21e6:	5d 91       	ld	r21, X+
    21e8:	a4 0f       	add	r26, r20
    21ea:	b5 1f       	adc	r27, r21
    21ec:	ea 17       	cp	r30, r26
    21ee:	fb 07       	cpc	r31, r27
    21f0:	79 f4       	brne	.+30     	; 0x2210 <free+0xd2>
    21f2:	80 81       	ld	r24, Z
    21f4:	91 81       	ldd	r25, Z+1	; 0x01
    21f6:	84 0f       	add	r24, r20
    21f8:	95 1f       	adc	r25, r21
    21fa:	02 96       	adiw	r24, 0x02	; 2
    21fc:	d9 01       	movw	r26, r18
    21fe:	11 96       	adiw	r26, 0x01	; 1
    2200:	9c 93       	st	X, r25
    2202:	8e 93       	st	-X, r24
    2204:	82 81       	ldd	r24, Z+2	; 0x02
    2206:	93 81       	ldd	r25, Z+3	; 0x03
    2208:	13 96       	adiw	r26, 0x03	; 3
    220a:	9c 93       	st	X, r25
    220c:	8e 93       	st	-X, r24
    220e:	12 97       	sbiw	r26, 0x02	; 2
    2210:	e0 e0       	ldi	r30, 0x00	; 0
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	8a 81       	ldd	r24, Y+2	; 0x02
    2216:	9b 81       	ldd	r25, Y+3	; 0x03
    2218:	00 97       	sbiw	r24, 0x00	; 0
    221a:	19 f0       	breq	.+6      	; 0x2222 <free+0xe4>
    221c:	fe 01       	movw	r30, r28
    221e:	ec 01       	movw	r28, r24
    2220:	f9 cf       	rjmp	.-14     	; 0x2214 <free+0xd6>
    2222:	ce 01       	movw	r24, r28
    2224:	02 96       	adiw	r24, 0x02	; 2
    2226:	28 81       	ld	r18, Y
    2228:	39 81       	ldd	r19, Y+1	; 0x01
    222a:	82 0f       	add	r24, r18
    222c:	93 1f       	adc	r25, r19
    222e:	20 91 47 03 	lds	r18, 0x0347
    2232:	30 91 48 03 	lds	r19, 0x0348
    2236:	28 17       	cp	r18, r24
    2238:	39 07       	cpc	r19, r25
    223a:	69 f4       	brne	.+26     	; 0x2256 <free+0x118>
    223c:	30 97       	sbiw	r30, 0x00	; 0
    223e:	29 f4       	brne	.+10     	; 0x224a <free+0x10c>
    2240:	10 92 4a 03 	sts	0x034A, r1
    2244:	10 92 49 03 	sts	0x0349, r1
    2248:	02 c0       	rjmp	.+4      	; 0x224e <free+0x110>
    224a:	13 82       	std	Z+3, r1	; 0x03
    224c:	12 82       	std	Z+2, r1	; 0x02
    224e:	d0 93 48 03 	sts	0x0348, r29
    2252:	c0 93 47 03 	sts	0x0347, r28
    2256:	df 91       	pop	r29
    2258:	cf 91       	pop	r28
    225a:	08 95       	ret

0000225c <strnlen_P>:
    225c:	fc 01       	movw	r30, r24
    225e:	05 90       	lpm	r0, Z+
    2260:	61 50       	subi	r22, 0x01	; 1
    2262:	70 40       	sbci	r23, 0x00	; 0
    2264:	01 10       	cpse	r0, r1
    2266:	d8 f7       	brcc	.-10     	; 0x225e <strnlen_P+0x2>
    2268:	80 95       	com	r24
    226a:	90 95       	com	r25
    226c:	8e 0f       	add	r24, r30
    226e:	9f 1f       	adc	r25, r31
    2270:	08 95       	ret

00002272 <memset>:
    2272:	dc 01       	movw	r26, r24
    2274:	01 c0       	rjmp	.+2      	; 0x2278 <memset+0x6>
    2276:	6d 93       	st	X+, r22
    2278:	41 50       	subi	r20, 0x01	; 1
    227a:	50 40       	sbci	r21, 0x00	; 0
    227c:	e0 f7       	brcc	.-8      	; 0x2276 <memset+0x4>
    227e:	08 95       	ret

00002280 <strnlen>:
    2280:	fc 01       	movw	r30, r24
    2282:	61 50       	subi	r22, 0x01	; 1
    2284:	70 40       	sbci	r23, 0x00	; 0
    2286:	01 90       	ld	r0, Z+
    2288:	01 10       	cpse	r0, r1
    228a:	d8 f7       	brcc	.-10     	; 0x2282 <strnlen+0x2>
    228c:	80 95       	com	r24
    228e:	90 95       	com	r25
    2290:	8e 0f       	add	r24, r30
    2292:	9f 1f       	adc	r25, r31
    2294:	08 95       	ret

00002296 <strrev>:
    2296:	dc 01       	movw	r26, r24
    2298:	fc 01       	movw	r30, r24
    229a:	67 2f       	mov	r22, r23
    229c:	71 91       	ld	r23, Z+
    229e:	77 23       	and	r23, r23
    22a0:	e1 f7       	brne	.-8      	; 0x229a <strrev+0x4>
    22a2:	32 97       	sbiw	r30, 0x02	; 2
    22a4:	04 c0       	rjmp	.+8      	; 0x22ae <strrev+0x18>
    22a6:	7c 91       	ld	r23, X
    22a8:	6d 93       	st	X+, r22
    22aa:	70 83       	st	Z, r23
    22ac:	62 91       	ld	r22, -Z
    22ae:	ae 17       	cp	r26, r30
    22b0:	bf 07       	cpc	r27, r31
    22b2:	c8 f3       	brcs	.-14     	; 0x22a6 <strrev+0x10>
    22b4:	08 95       	ret

000022b6 <fputc>:
    22b6:	0f 93       	push	r16
    22b8:	1f 93       	push	r17
    22ba:	cf 93       	push	r28
    22bc:	df 93       	push	r29
    22be:	18 2f       	mov	r17, r24
    22c0:	09 2f       	mov	r16, r25
    22c2:	eb 01       	movw	r28, r22
    22c4:	8b 81       	ldd	r24, Y+3	; 0x03
    22c6:	81 fd       	sbrc	r24, 1
    22c8:	03 c0       	rjmp	.+6      	; 0x22d0 <fputc+0x1a>
    22ca:	8f ef       	ldi	r24, 0xFF	; 255
    22cc:	9f ef       	ldi	r25, 0xFF	; 255
    22ce:	20 c0       	rjmp	.+64     	; 0x2310 <fputc+0x5a>
    22d0:	82 ff       	sbrs	r24, 2
    22d2:	10 c0       	rjmp	.+32     	; 0x22f4 <fputc+0x3e>
    22d4:	4e 81       	ldd	r20, Y+6	; 0x06
    22d6:	5f 81       	ldd	r21, Y+7	; 0x07
    22d8:	2c 81       	ldd	r18, Y+4	; 0x04
    22da:	3d 81       	ldd	r19, Y+5	; 0x05
    22dc:	42 17       	cp	r20, r18
    22de:	53 07       	cpc	r21, r19
    22e0:	7c f4       	brge	.+30     	; 0x2300 <fputc+0x4a>
    22e2:	e8 81       	ld	r30, Y
    22e4:	f9 81       	ldd	r31, Y+1	; 0x01
    22e6:	9f 01       	movw	r18, r30
    22e8:	2f 5f       	subi	r18, 0xFF	; 255
    22ea:	3f 4f       	sbci	r19, 0xFF	; 255
    22ec:	39 83       	std	Y+1, r19	; 0x01
    22ee:	28 83       	st	Y, r18
    22f0:	10 83       	st	Z, r17
    22f2:	06 c0       	rjmp	.+12     	; 0x2300 <fputc+0x4a>
    22f4:	e8 85       	ldd	r30, Y+8	; 0x08
    22f6:	f9 85       	ldd	r31, Y+9	; 0x09
    22f8:	81 2f       	mov	r24, r17
    22fa:	09 95       	icall
    22fc:	89 2b       	or	r24, r25
    22fe:	29 f7       	brne	.-54     	; 0x22ca <fputc+0x14>
    2300:	2e 81       	ldd	r18, Y+6	; 0x06
    2302:	3f 81       	ldd	r19, Y+7	; 0x07
    2304:	2f 5f       	subi	r18, 0xFF	; 255
    2306:	3f 4f       	sbci	r19, 0xFF	; 255
    2308:	3f 83       	std	Y+7, r19	; 0x07
    230a:	2e 83       	std	Y+6, r18	; 0x06
    230c:	81 2f       	mov	r24, r17
    230e:	90 2f       	mov	r25, r16
    2310:	df 91       	pop	r29
    2312:	cf 91       	pop	r28
    2314:	1f 91       	pop	r17
    2316:	0f 91       	pop	r16
    2318:	08 95       	ret

0000231a <__ultoa_invert>:
    231a:	fa 01       	movw	r30, r20
    231c:	aa 27       	eor	r26, r26
    231e:	28 30       	cpi	r18, 0x08	; 8
    2320:	51 f1       	breq	.+84     	; 0x2376 <__ultoa_invert+0x5c>
    2322:	20 31       	cpi	r18, 0x10	; 16
    2324:	81 f1       	breq	.+96     	; 0x2386 <__ultoa_invert+0x6c>
    2326:	e8 94       	clt
    2328:	6f 93       	push	r22
    232a:	6e 7f       	andi	r22, 0xFE	; 254
    232c:	6e 5f       	subi	r22, 0xFE	; 254
    232e:	7f 4f       	sbci	r23, 0xFF	; 255
    2330:	8f 4f       	sbci	r24, 0xFF	; 255
    2332:	9f 4f       	sbci	r25, 0xFF	; 255
    2334:	af 4f       	sbci	r26, 0xFF	; 255
    2336:	b1 e0       	ldi	r27, 0x01	; 1
    2338:	3e d0       	rcall	.+124    	; 0x23b6 <__ultoa_invert+0x9c>
    233a:	b4 e0       	ldi	r27, 0x04	; 4
    233c:	3c d0       	rcall	.+120    	; 0x23b6 <__ultoa_invert+0x9c>
    233e:	67 0f       	add	r22, r23
    2340:	78 1f       	adc	r23, r24
    2342:	89 1f       	adc	r24, r25
    2344:	9a 1f       	adc	r25, r26
    2346:	a1 1d       	adc	r26, r1
    2348:	68 0f       	add	r22, r24
    234a:	79 1f       	adc	r23, r25
    234c:	8a 1f       	adc	r24, r26
    234e:	91 1d       	adc	r25, r1
    2350:	a1 1d       	adc	r26, r1
    2352:	6a 0f       	add	r22, r26
    2354:	71 1d       	adc	r23, r1
    2356:	81 1d       	adc	r24, r1
    2358:	91 1d       	adc	r25, r1
    235a:	a1 1d       	adc	r26, r1
    235c:	20 d0       	rcall	.+64     	; 0x239e <__ultoa_invert+0x84>
    235e:	09 f4       	brne	.+2      	; 0x2362 <__ultoa_invert+0x48>
    2360:	68 94       	set
    2362:	3f 91       	pop	r19
    2364:	2a e0       	ldi	r18, 0x0A	; 10
    2366:	26 9f       	mul	r18, r22
    2368:	11 24       	eor	r1, r1
    236a:	30 19       	sub	r19, r0
    236c:	30 5d       	subi	r19, 0xD0	; 208
    236e:	31 93       	st	Z+, r19
    2370:	de f6       	brtc	.-74     	; 0x2328 <__ultoa_invert+0xe>
    2372:	cf 01       	movw	r24, r30
    2374:	08 95       	ret
    2376:	46 2f       	mov	r20, r22
    2378:	47 70       	andi	r20, 0x07	; 7
    237a:	40 5d       	subi	r20, 0xD0	; 208
    237c:	41 93       	st	Z+, r20
    237e:	b3 e0       	ldi	r27, 0x03	; 3
    2380:	0f d0       	rcall	.+30     	; 0x23a0 <__ultoa_invert+0x86>
    2382:	c9 f7       	brne	.-14     	; 0x2376 <__ultoa_invert+0x5c>
    2384:	f6 cf       	rjmp	.-20     	; 0x2372 <__ultoa_invert+0x58>
    2386:	46 2f       	mov	r20, r22
    2388:	4f 70       	andi	r20, 0x0F	; 15
    238a:	40 5d       	subi	r20, 0xD0	; 208
    238c:	4a 33       	cpi	r20, 0x3A	; 58
    238e:	18 f0       	brcs	.+6      	; 0x2396 <__ultoa_invert+0x7c>
    2390:	49 5d       	subi	r20, 0xD9	; 217
    2392:	31 fd       	sbrc	r19, 1
    2394:	40 52       	subi	r20, 0x20	; 32
    2396:	41 93       	st	Z+, r20
    2398:	02 d0       	rcall	.+4      	; 0x239e <__ultoa_invert+0x84>
    239a:	a9 f7       	brne	.-22     	; 0x2386 <__ultoa_invert+0x6c>
    239c:	ea cf       	rjmp	.-44     	; 0x2372 <__ultoa_invert+0x58>
    239e:	b4 e0       	ldi	r27, 0x04	; 4
    23a0:	a6 95       	lsr	r26
    23a2:	97 95       	ror	r25
    23a4:	87 95       	ror	r24
    23a6:	77 95       	ror	r23
    23a8:	67 95       	ror	r22
    23aa:	ba 95       	dec	r27
    23ac:	c9 f7       	brne	.-14     	; 0x23a0 <__ultoa_invert+0x86>
    23ae:	00 97       	sbiw	r24, 0x00	; 0
    23b0:	61 05       	cpc	r22, r1
    23b2:	71 05       	cpc	r23, r1
    23b4:	08 95       	ret
    23b6:	9b 01       	movw	r18, r22
    23b8:	ac 01       	movw	r20, r24
    23ba:	0a 2e       	mov	r0, r26
    23bc:	06 94       	lsr	r0
    23be:	57 95       	ror	r21
    23c0:	47 95       	ror	r20
    23c2:	37 95       	ror	r19
    23c4:	27 95       	ror	r18
    23c6:	ba 95       	dec	r27
    23c8:	c9 f7       	brne	.-14     	; 0x23bc <__ultoa_invert+0xa2>
    23ca:	62 0f       	add	r22, r18
    23cc:	73 1f       	adc	r23, r19
    23ce:	84 1f       	adc	r24, r20
    23d0:	95 1f       	adc	r25, r21
    23d2:	a0 1d       	adc	r26, r0
    23d4:	08 95       	ret

000023d6 <__prologue_saves__>:
    23d6:	2f 92       	push	r2
    23d8:	3f 92       	push	r3
    23da:	4f 92       	push	r4
    23dc:	5f 92       	push	r5
    23de:	6f 92       	push	r6
    23e0:	7f 92       	push	r7
    23e2:	8f 92       	push	r8
    23e4:	9f 92       	push	r9
    23e6:	af 92       	push	r10
    23e8:	bf 92       	push	r11
    23ea:	cf 92       	push	r12
    23ec:	df 92       	push	r13
    23ee:	ef 92       	push	r14
    23f0:	ff 92       	push	r15
    23f2:	0f 93       	push	r16
    23f4:	1f 93       	push	r17
    23f6:	cf 93       	push	r28
    23f8:	df 93       	push	r29
    23fa:	cd b7       	in	r28, 0x3d	; 61
    23fc:	de b7       	in	r29, 0x3e	; 62
    23fe:	ca 1b       	sub	r28, r26
    2400:	db 0b       	sbc	r29, r27
    2402:	0f b6       	in	r0, 0x3f	; 63
    2404:	f8 94       	cli
    2406:	de bf       	out	0x3e, r29	; 62
    2408:	0f be       	out	0x3f, r0	; 63
    240a:	cd bf       	out	0x3d, r28	; 61
    240c:	09 94       	ijmp

0000240e <__epilogue_restores__>:
    240e:	2a 88       	ldd	r2, Y+18	; 0x12
    2410:	39 88       	ldd	r3, Y+17	; 0x11
    2412:	48 88       	ldd	r4, Y+16	; 0x10
    2414:	5f 84       	ldd	r5, Y+15	; 0x0f
    2416:	6e 84       	ldd	r6, Y+14	; 0x0e
    2418:	7d 84       	ldd	r7, Y+13	; 0x0d
    241a:	8c 84       	ldd	r8, Y+12	; 0x0c
    241c:	9b 84       	ldd	r9, Y+11	; 0x0b
    241e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2420:	b9 84       	ldd	r11, Y+9	; 0x09
    2422:	c8 84       	ldd	r12, Y+8	; 0x08
    2424:	df 80       	ldd	r13, Y+7	; 0x07
    2426:	ee 80       	ldd	r14, Y+6	; 0x06
    2428:	fd 80       	ldd	r15, Y+5	; 0x05
    242a:	0c 81       	ldd	r16, Y+4	; 0x04
    242c:	1b 81       	ldd	r17, Y+3	; 0x03
    242e:	aa 81       	ldd	r26, Y+2	; 0x02
    2430:	b9 81       	ldd	r27, Y+1	; 0x01
    2432:	ce 0f       	add	r28, r30
    2434:	d1 1d       	adc	r29, r1
    2436:	0f b6       	in	r0, 0x3f	; 63
    2438:	f8 94       	cli
    243a:	de bf       	out	0x3e, r29	; 62
    243c:	0f be       	out	0x3f, r0	; 63
    243e:	cd bf       	out	0x3d, r28	; 61
    2440:	ed 01       	movw	r28, r26
    2442:	08 95       	ret

00002444 <_exit>:
    2444:	f8 94       	cli

00002446 <__stop_program>:
    2446:	ff cf       	rjmp	.-2      	; 0x2446 <__stop_program>
